{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>New and updated developer information can be found at Bitshares Developer Portal .</p>"},{"location":"libs/","title":"BitShares Libraries","text":"<p>The libraries are the core of the project and define everything where applications can build on top.</p> <p>A graphene blockchain software will use the <code>app</code> library to define what the application will do, what services it will offer. The blockchain is defined by the <code>chain</code> library and includes all the objects, types, operations, protocols that build current consensus blockchain. The lowest level in memory database of Bitshares is developed at the <code>db</code> library. The <code>fc</code> is a helper module broadly used in the libraries code, <code>egenesis</code> will help with the genesis file, <code>plugins</code> will be loaded optionally to the application. Wallet software like the cli_wallet will benefit from the <code>wallet</code> library.</p> <p>Code in libraries is the most important part of bitshares-core project and it is maintained by the Bitshares Core Team and contributors.</p>"},{"location":"libs/#available-libraries","title":"Available Libraries","text":"Folder Name Description Status app Application Bundles component libraries (chain, network, plugins) into a useful application. Also provides API access. Active chain Blockchain Blockchain implementation and business logic. Database structure in the form of objects and updates to the blockchain in the form of evaluators are implemented here. Active db Database Defines the internal database graphene uses. Active egenesis Genesis Hardcodes the <code>genesis.json</code> file into the <code>witness_node</code> executable. Active fc Fast-compiling C++ library https://github.com/bitshares/bitshares-fc Active net Network The graphene p2p layer. Active plugins Plugins Collection of singleton designed modules used for extending the bitshares-core. Active protocol Protocol Fundamental structure of the data that will be transmitted on the wire. Operations are defined and basic data integrity checks are done for each. Active utilities Utilities Common utility calls used in applications or other libraries. Active wallet Wallet Wallet definition for the <code>cli_wallet</code> software. Active"},{"location":"programs/","title":"BitShares Programs","text":"<p>The bitshares programs are a collection of binaries to run the blockchain, interact with it or utilities.</p> <p>The main program is the <code>witness_node</code>, used to run a bitshares block producer, API or plugin node. The second in importance is the <code>cli_wallet</code>, used to interact with the blockchain. These 2 programs are the most used by the community and updated by the developers, rest of the programs are utilities.</p> <p>Programs in here are part of the bitshares-core project and are maintained by the bitshares core team and contributors.</p>"},{"location":"programs/#available-programs","title":"Available Programs","text":"Folder Name Description Category Status Help witness_node Witness Node Main software used to sign blocks or provide services. Node Active <code>./witness_node --help</code> - Delayed node configuration cli_wallet CLI Wallet Software to interact with the blockchain by command line. Wallet Active <code>./cli_wallet --help</code> js_operation_serializer Operation Serializer Dump all blockchain operations and types. Used by the UI. Tool Old <code>./js_operation_serializer</code> size_checker Size Checker Return wire size average in bytes of all the operations. Tool Old <code>./size_checker</code> cat-parts Cat parts Used to create <code>hardfork.hpp</code> from individual files. Tool Active <code>./cat-parts</code> check_reflect Check reflect Check reflected fields automatically(https://github.com/cryptonomex/graphene/issues/562) Tool Old <code>doxygen;cp -rf doxygen programs/build_helpers; ./check_reflect.py</code> member_enumerator Member enumerator Tool Deprecated <code>./member_enumerator</code> get_dev_key Get Dev Key Create public, private and address keys. Useful in private testnets, <code>genesis.json</code> files, new blockchain creation and others. Tool Active <code>/programs/genesis_util/get_dev_key -h</code> genesis_util Genesis Utils Other utilities for genesis creation. Tool Old network_mapper Network Mapper Generates .DOT file that can be rendered by graphviz to make images of node connectivity. Tool Experimental <code>./programs/network_mapper/network_mapper</code>"},{"location":"readme/","title":"BitShares Core Mod","text":"<p>FORK OF: BitShares Core is the BitShares blockchain node software and command-line wallet software.</p>"},{"location":"readme/#changes","title":"CHANGES:","text":"<ul> <li>updated to work on current ubuntu based system.</li> <li>updated to build / develop / debug using dev-containers. (https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)</li> </ul> <p>For UI reference wallet software (browser-based wallet and desktop wallet) visit BitShares UI.</p> <p>Visit BitShares.github.io to learn about BitShares and join the community at BitSharesTalk.org.</p> <p>Information for developers can be found in the Wiki and the BitShares Developer Portal. Users interested in how BitShares works can go to the BitShares Documentation site.</p> <p>Visit Awesome BitShares to find more resources and links E.G. chat groups, client libraries and extended APIs.</p> <ul> <li>Getting Started</li> <li>Support</li> <li>Using Built-In APIs</li> <li>Accessing restrictable node API sets</li> <li>FAQ</li> <li>License</li> </ul> Branch Build Status <code>master</code> <code>develop</code> <code>hardfork</code> <code>testnet</code> <code>master</code> of <code>bitshares-fc</code>"},{"location":"readme/#getting-started","title":"Getting Started","text":"<p>Build instructions and additional documentation are available in the Wiki.</p> <p>Prebuilt binaries can be found in the releases page for download.</p>"},{"location":"readme/#running-and-stopping-node-software","title":"Running and Stopping Node Software","text":"<p>Run Node Software:</p> <p>Stay on <code>bitshares-core/build</code> directory before you run the below <code>witness_node</code> command</p> <pre><code>./programs/witness_node/witness_node\n</code></pre> <p>Under <code>build</code> directory the node run will automatically create the directory <code>witness_node_data_dir</code> along with config files underneath then start synchronizing the blockchain. It may take usually several hours to fully synchronize the blockchain data. The blockchain data will be stored under the directory <code>witness_node_data_dir</code>.</p> <p>Stop Node Software:</p> <p>For stopping the node run cleanly, you will need to access the node run terminal then press on <code>Ctrl+C</code> then wait for the run to stop, please note that it may take usually few minutes to exit the run. It's recommended to use linux command screen to initiate the node run so you can go back to the node run screen to stop it.</p> <p>IMPORTANT: By default the node will start in reduced memory mode by using some of the commands detailed in Memory reduction for nodes. In order to run a full node with all the account histories which usually unnecessary, you need to remove <code>partial-operations</code> and <code>max-ops-per-account</code> from your config file. Please note that currently(2018-10-17) a full node will need more than 160GB of RAM to operate and required memory is growing fast. Consider the following table as minimal requirements before running a node:</p> Default Full Minimal ElasticSearch 150G HDD, 16G RAM 640G SSD, 64G RAM * 120G HDD, 4G RAM 1TB SSD, 32G RAM <p>* For this setup, allocate at least 500GB of SSD as swap.</p> <p>To use the command-line wallet or other wallets / clients with the node, the node need to be started with RPC connection enabled, which can be done by starting the node with the <code>--rpc-endpoint</code> parameter, E.G.</p> <pre><code>./programs/witness_node/witness_node --rpc-endpoint=127.0.0.1:8090\n</code></pre> <p>or configure it in the config file by editing <code>witness_node_data_dir/config.ini</code> as follows:</p> <pre><code>rpc-endpoint = 127.0.0.1:8090\n</code></pre> <p>You can run the program with <code>--help</code> parameter to see more info:</p> <pre><code>./programs/witness_node/witness_node --help\n</code></pre>"},{"location":"readme/#using-command-line-wallet","title":"Using Command-Line Wallet","text":"<p>Stay on <code>bitshares-core/build</code> directory before you run the below <code>cli_wallet</code> command</p> <pre><code>./programs/cli_wallet/cli_wallet\n</code></pre> <p>IMPORTANT: The <code>cli_wallet</code> or API interfaces to the node wouldn't be fully functional unless the node is fully synchronized with the blockchain. The <code>cli_wallet</code> command <code>info</code> will show result <code>head_block_age</code> which will tell you how far you are from the live current block of the blockchain.</p> <p>To check your current block:</p> <pre><code>new &gt;&gt;&gt; info\n</code></pre> <p>To query the blockchain, E.G. get info about an account:</p> <pre><code>new &gt;&gt;&gt; get_account &lt;account_name_or_id&gt;\n</code></pre> <p>If you need to transact with your account but not only query, firstly set your initial password and unlock the wallet:</p> <ul> <li> <p>For non-Windows operating systems, you can type the commands and press <code>[ENTER]</code>, then input the password and press <code>[ENTER]</code>, in this case the password won't show:</p> <p>new &gt;&gt;&gt; set_password [ENTER]   Enter password:   locked &gt;&gt;&gt; unlock [ENTER]   Enter password:   unlocked &gt;&gt;&gt;</p> </li> <li> <p>For Windows, or you'd like to show the password, type the commands with the password:</p> <p>new &gt;&gt;&gt; set_password    locked &gt;&gt;&gt; unlock    unlocked &gt;&gt;&gt; <p>To be able to transact with your account, import the corresponding private keys:</p> <pre><code>unlocked &gt;&gt;&gt; import_key &lt;ACCOUNT_NAME&gt; &lt;WIF_KEY&gt;\n</code></pre> <p>The private keys will be encrypted and stored in the wallet file, the file name is <code>wallet.json</code> by default. The private keys are accessible when the wallet is unlocked.</p> <pre><code>unlocked &gt;&gt;&gt; dump_private_keys\n</code></pre> <p>Use <code>lock</code> command to make the private keys inaccessible. There is no auto-lock feature so far.</p> <pre><code>unlocked &gt;&gt;&gt; lock\n</code></pre> <p>To import your initial (genesis) balances, import the private keys corresponding to the balances:</p> <pre><code>unlocked &gt;&gt;&gt; import_balance &lt;ACCOUNT_NAME&gt; [&lt;WIF_KEY&gt; ...] true\n</code></pre> <p>Use <code>help</code> to see all available wallet commands.</p> <pre><code>&gt;&gt;&gt; help\n</code></pre> <p>Use <code>gethelp &lt;COMMAND&gt;</code> to see more info about individual commands. E.G.</p> <pre><code>&gt;&gt;&gt; gethelp get_order_book\n</code></pre> <p>The definition of all commands is available in the wallet.hpp source code file. Corresponding documentation can be found in the Doxygen documentation.</p> <p>You can run the program with <code>--help</code> parameter to see more info:</p> <pre><code>./programs/cli_wallet/cli_wallet --help\n</code></pre> <p>There is also some info in the Wiki.</p>"},{"location":"readme/#support","title":"Support","text":"<p>Technical support is available in the BitSharesTalk technical support subforum.</p> <p>BitShares Core bugs can be reported directly to the issue tracker.</p> <p>Questions can be posted in Github Discussions.</p> <p>BitShares UI bugs should be reported to the UI issue tracker.</p> <p>Up to date online Doxygen documentation can be found at https://bitshares.github.io/doxygen.</p>"},{"location":"readme/#using-built-in-apis","title":"Using Built-In APIs","text":""},{"location":"readme/#node-api","title":"Node API","text":"<p>The <code>witness_node</code> software provides several different API sets, known as node API.</p> <p>Each API set has its own ID and a name. When running <code>witness_node</code> with RPC connection enabled, initially two API sets are available: * API set with ID <code>0</code> has name \"database\", it provides read-only access to the database, * API set with ID <code>1</code> has name \"login\", it is used to login and gain access to additional, restrictable API sets.</p> <p>Here is an example using <code>wscat</code> package from <code>npm</code> for websockets:</p> <pre><code>$ npm install -g wscat\n$ wscat -c ws://127.0.0.1:8090\n&gt; {\"id\":1, \"method\":\"call\", \"params\":[0,\"get_accounts\",[[\"1.2.0\"]]]}\n&lt; {\"id\":1,\"result\":[{\"id\":\"1.2.0\",\"annotations\":[],\"membership_expiration_date\":\"1969-12-31T23:59:59\",\"registrar\":\"1.2.0\",\"referrer\":\"1.2.0\",\"lifetime_referrer\":\"1.2.0\",\"network_fee_percentage\":2000,\"lifetime_referrer_fee_percentage\":8000,\"referrer_rewards_percentage\":0,\"name\":\"committee-account\",\"owner\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[],\"address_auths\":[]},\"active\":{\"weight_threshold\":6,\"account_auths\":[[\"1.2.5\",1],[\"1.2.6\",1],[\"1.2.7\",1],[\"1.2.8\",1],[\"1.2.9\",1],[\"1.2.10\",1],[\"1.2.11\",1],[\"1.2.12\",1],[\"1.2.13\",1],[\"1.2.14\",1]],\"key_auths\":[],\"address_auths\":[]},\"options\":{\"memo_key\":\"GPH1111111111111111111111111111111114T1Anm\",\"voting_account\":\"1.2.0\",\"num_witness\":0,\"num_committee\":0,\"votes\":[],\"extensions\":[]},\"statistics\":\"2.7.0\",\"whitelisting_accounts\":[],\"blacklisting_accounts\":[]}]}\n</code></pre> <p>We can do the same thing using an HTTP client such as <code>curl</code> for APIs which do not require login or other session state:</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [0, \"get_accounts\", [[\"1.2.0\"]]], \"id\": 1}' http://127.0.0.1:8090/\n{\"id\":1,\"result\":[{\"id\":\"1.2.0\",\"annotations\":[],\"membership_expiration_date\":\"1969-12-31T23:59:59\",\"registrar\":\"1.2.0\",\"referrer\":\"1.2.0\",\"lifetime_referrer\":\"1.2.0\",\"network_fee_percentage\":2000,\"lifetime_referrer_fee_percentage\":8000,\"referrer_rewards_percentage\":0,\"name\":\"committee-account\",\"owner\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[],\"address_auths\":[]},\"active\":{\"weight_threshold\":6,\"account_auths\":[[\"1.2.5\",1],[\"1.2.6\",1],[\"1.2.7\",1],[\"1.2.8\",1],[\"1.2.9\",1],[\"1.2.10\",1],[\"1.2.11\",1],[\"1.2.12\",1],[\"1.2.13\",1],[\"1.2.14\",1]],\"key_auths\":[],\"address_auths\":[]},\"options\":{\"memo_key\":\"GPH1111111111111111111111111111111114T1Anm\",\"voting_account\":\"1.2.0\",\"num_witness\":0,\"num_committee\":0,\"votes\":[],\"extensions\":[]},\"statistics\":\"2.7.0\",\"whitelisting_accounts\":[],\"blacklisting_accounts\":[]}]}\n</code></pre> <p>When using an HTTP client, the API set ID can be replaced by the API set name, E.G.</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [\"database\", \"get_accounts\", [[\"1.2.0\"]]], \"id\": 1}' http://127.0.0.1:8090/\n</code></pre> <p>The definition of all node APIs is available in the source code files including database_api.hpp and api.hpp. Corresponding documentation can be found in Doxygen: * database API * other APIs</p>"},{"location":"readme/#wallet-api","title":"Wallet API","text":"<p>The <code>cli_wallet</code> program can also be configured to serve all of its commands as APIs, known as wallet API.</p> <p>Start <code>cli_wallet</code> with RPC connection enabled:</p> <pre><code>$ ./programs/cli_wallet/cli_wallet --rpc-http-endpoint=127.0.0.1:8093\n</code></pre> <p>Access the wallet API using an HTTP client:</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"info\", \"params\": [], \"id\": 1}' http://127.0.0.1:8093/\n$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"get_account\", \"params\": [\"1.2.0\"], \"id\": 1}' http://127.0.0.1:8093/\n</code></pre> <p>Note: The syntax to access wallet API is a bit different than accessing node API.</p> <p>Important: * When RPC connection is enabled for <code>cli_wallet</code>, sensitive data E.G. private keys which is accessible via commands will be accessible via RPC too. It is recommended that only open network connection to localhost or trusted addresses E.G. configure a firewall. * When using wallet API, sensitive data E.G. the wallet password and private keys is transmitted as plain text, thus may be vulnerable to network sniffing. It is recommended that only use wallet API with localhost, or in a clean network, and / or use <code>--rpc-tls-endpoint</code> parameter to only serve wallet API via secure connections.</p>"},{"location":"readme/#accessing-restrictable-node-api-sets","title":"Accessing restrictable node API sets","text":"<p>You can restrict node API sets to particular users by specifying an <code>api-access</code> file in <code>config.ini</code> or by using the <code>--api-access /full/path/to/api-access.json</code> command-line option on node startup. Here is an example <code>api-access</code> file which allows user <code>bytemaster</code> with password <code>supersecret</code> to access four different API sets, while allowing any other user to access the three public API sets necessary to use the node:</p> <pre><code>{\n   \"permission_map\" :\n   [\n      [\n         \"bytemaster\",\n         {\n            \"password_hash_b64\" : \"9e9GF7ooXVb9k4BoSfNIPTelXeGOZ5DrgOYMj94elaY=\",\n            \"password_salt_b64\" : \"INDdM6iCi/8=\",\n            \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\", \"network_node_api\"]\n         }\n      ],\n      [\n         \"*\",\n         {\n            \"password_hash_b64\" : \"*\",\n            \"password_salt_b64\" : \"*\",\n            \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\"]\n         }\n      ]\n   ]\n}\n</code></pre> <p>Note: the <code>login</code> API set is always accessible.</p> <p>Passwords are stored in <code>base64</code> as salted <code>sha256</code> hashes.  A simple Python script, <code>saltpass.py</code> is available to obtain hash and salt values from a password. A single asterisk <code>\"*\"</code> may be specified as username or password hash to accept any value.</p> <p>With the above configuration, here is an example of how to call the <code>add_node</code> API from the <code>network_node</code> API set:</p> <pre><code>{\"id\":1, \"method\":\"call\", \"params\":[1,\"login\",[\"bytemaster\", \"supersecret\"]]}\n{\"id\":2, \"method\":\"call\", \"params\":[1,\"network_node\",[]]}\n{\"id\":3, \"method\":\"call\", \"params\":[2,\"add_node\",[\"127.0.0.1:9090\"]]}\n</code></pre> <p>Note, the call to <code>network_node</code> is necessary to obtain the correct API set ID for the <code>network_node</code> API set.  It is not guaranteed that the API set ID for the <code>network_node</code> API set will always be <code>2</code>.</p> <p>The restricted API sets are accessible via HTTP too using basic access authentication. E.G.</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [\"network_node\", \"add_node\", [\"127.0.0.1:9090\"]], \"id\": 1}' http://bytemaster:supersecret@127.0.0.1:8090/\n</code></pre> <p>Our <code>doxygen</code> documentation contains the most up-to-date information about APIs for the node and the wallet.</p>"},{"location":"readme/#faq","title":"FAQ","text":"<ul> <li> <p>Is there a way to generate help with parameter names and method descriptions?</p> <p>Yes. Documentation of the code base, including APIs, can be generated using Doxygen. Simply run <code>doxygen</code> in this directory.</p> <p>If both Doxygen and perl are available in your build environment, the command-line wallet's <code>help</code> and <code>gethelp</code> commands will display help generated from the doxygen documentation.</p> <p>If your command-line wallet's <code>help</code> command displays descriptions without parameter names like     <code>signed_transaction transfer(string, string, string, string, string, bool)</code> it means CMake was unable to find Doxygen or perl during configuration.  If found, the output should look like this:     <code>signed_transaction transfer(string from, string to, string amount, string asset_symbol, string memo, bool broadcast)</code></p> </li> <li> <p>Is there a way to allow external program to drive <code>cli_wallet</code> via websocket, JSONRPC, or HTTP?</p> <p>Yes. External programs may connect to the command-line wallet and make its calls over a websockets API. To do this, run the wallet in server mode, i.e. <code>cli_wallet -H \"127.0.0.1:9999\"</code> and then have the external program connect to it over the specified port (in this example, port 9999). Please check the \"Using Built-In APIs\" section for more info.</p> </li> <li> <p>Is there a way to access methods which require login over HTTP?</p> <p>Yes. Most of the methods can be accessed by specifying the API name instead of an API ID. If an API is protected by a username and a password, it can be accessed by using basic access authentication. Please check the \"Accessing restrictable node API sets\" section for more info.</p> <p>However, HTTP is not really designed for \"server push\" notifications, and we would have to figure out a way to queue notifications for a polling client. Websockets solves this problem. If you need to access the stateful methods, use Websockets.</p> </li> <li> <p>What is the meaning of <code>a.b.c</code> numbers?</p> <p>The first number specifies the space.  Space <code>1</code> is for protocol objects, <code>2</code> is for implementation objects. Protocol space objects can appear on the wire, for example in the binary form of transactions. Implementation space objects cannot appear on the wire and solely exist for implementation purposes, such as optimization or internal bookkeeping.</p> <p>The second number specifies the type.  The type of the object determines what fields it has.  For a complete list of type IDs, see <code>GRAPHENE_DEFINE_IDS(protocol, protocol_ids ...)</code> in protocol/types.hpp and <code>GRAPHENE_DEFINE_IDS(chain, implementation_ids ...)</code> in chain/types.hpp.</p> <p>The third number specifies the instance.  The instance of the object is different for each individual object.</p> </li> <li> <p>The answer to the previous question was really confusing.  Can you make it clearer?</p> <p>All account IDs are of the form <code>1.2.x</code>.  If you were the 9735th account to be registered, your account's ID will be <code>1.2.9735</code>.  Account <code>0</code> is special (it's the \"committee account\", which is controlled by the committee members and has a few abilities and restrictions other accounts do not).</p> <p>All asset IDs are of the form <code>1.3.x</code>.  If you were the 29th asset to be registered, your asset's ID will be <code>1.3.29</code>.  Asset <code>0</code> is special (it's BTS, which is considered the \"core asset\").</p> <p>The first and second number together identify the kind of thing you're talking about (<code>1.2</code> for accounts, <code>1.3</code> for assets).  The third number identifies the particular thing.</p> </li> <li> <p>How do I get the <code>network_add_nodes</code> command to work?  Why is it so complicated?</p> <p>You need to follow the instructions in the \"Accessing restrictable node API sets\" section to allow a username/password access to the <code>network_node</code> API set.  Then you need to pass the username/password to the <code>cli_wallet</code> on the command line.</p> <p>It's set up this way so that the default configuration is secure even if the RPC port is publicly accessible.  It's fine if your <code>witness_node</code> allows the general public to query the database or broadcast transactions (in fact, this is how the hosted web UI works).  It's less fine if your <code>witness_node</code> allows the general public to control which p2p nodes it's connecting to.  Therefore the API to add p2p connections needs to be set up with proper access controls.</p> </li> </ul>"},{"location":"readme/#license","title":"License","text":"<p>BitShares Core is under the MIT license. See LICENSE for more information.</p>"},{"location":"docs/architecture/API/","title":"API","text":""},{"location":"docs/architecture/API/#node-api","title":"Node API","text":"<p>The <code>witness_node</code> software provides several different API's, known as node API.</p> <p>To provide the API's, the node need to be started with RPC connection enabled, which can be done by starting the node with the <code>--rpc-endpoint</code> parameter, E.G.</p> <pre><code>./programs/witness_node/witness_node --rpc-endpoint=127.0.0.1:8090\n</code></pre> <p>Each API has its own ID and a name. When running <code>witness_node</code> with RPC connection enabled, initially two API's are available: * API 0 has name \"database\", it provides read-only access to the database, * API 1 has name \"login\", it is used to login and gain access to additional, restrictable API's.</p> <p>Here is an example using <code>wscat</code> package from <code>npm</code> for websockets:</p> <pre><code>$ npm install -g wscat\n$ wscat -c ws://127.0.0.1:8090\n&gt; {\"id\":1, \"method\":\"call\", \"params\":[0,\"get_accounts\",[[\"1.2.0\"]]]}\n&lt; {\"id\":1,\"result\":[{\"id\":\"1.2.0\",\"annotations\":[],\"membership_expiration_date\":\"1969-12-31T23:59:59\",\"registrar\":\"1.2.0\",\"referrer\":\"1.2.0\",\"lifetime_referrer\":\"1.2.0\",\"network_fee_percentage\":2000,\"lifetime_referrer_fee_percentage\":8000,\"referrer_rewards_percentage\":0,\"name\":\"committee-account\",\"owner\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[],\"address_auths\":[]},\"active\":{\"weight_threshold\":6,\"account_auths\":[[\"1.2.5\",1],[\"1.2.6\",1],[\"1.2.7\",1],[\"1.2.8\",1],[\"1.2.9\",1],[\"1.2.10\",1],[\"1.2.11\",1],[\"1.2.12\",1],[\"1.2.13\",1],[\"1.2.14\",1]],\"key_auths\":[],\"address_auths\":[]},\"options\":{\"memo_key\":\"GPH1111111111111111111111111111111114T1Anm\",\"voting_account\":\"1.2.0\",\"num_witness\":0,\"num_committee\":0,\"votes\":[],\"extensions\":[]},\"statistics\":\"2.7.0\",\"whitelisting_accounts\":[],\"blacklisting_accounts\":[]}]}\n</code></pre> <p>We can do the same thing using an HTTP client such as <code>curl</code> for API's which do not require login or other session state:</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [0, \"get_accounts\", [[\"1.2.0\"]]], \"id\": 1}' http://127.0.0.1:8090/\n{\"id\":1,\"result\":[{\"id\":\"1.2.0\",\"annotations\":[],\"membership_expiration_date\":\"1969-12-31T23:59:59\",\"registrar\":\"1.2.0\",\"referrer\":\"1.2.0\",\"lifetime_referrer\":\"1.2.0\",\"network_fee_percentage\":2000,\"lifetime_referrer_fee_percentage\":8000,\"referrer_rewards_percentage\":0,\"name\":\"committee-account\",\"owner\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[],\"address_auths\":[]},\"active\":{\"weight_threshold\":6,\"account_auths\":[[\"1.2.5\",1],[\"1.2.6\",1],[\"1.2.7\",1],[\"1.2.8\",1],[\"1.2.9\",1],[\"1.2.10\",1],[\"1.2.11\",1],[\"1.2.12\",1],[\"1.2.13\",1],[\"1.2.14\",1]],\"key_auths\":[],\"address_auths\":[]},\"options\":{\"memo_key\":\"GPH1111111111111111111111111111111114T1Anm\",\"voting_account\":\"1.2.0\",\"num_witness\":0,\"num_committee\":0,\"votes\":[],\"extensions\":[]},\"statistics\":\"2.7.0\",\"whitelisting_accounts\":[],\"blacklisting_accounts\":[]}]}\n</code></pre> <p>When using an HTTP client, the API ID can be replaced by the API name, E.G.</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [\"database\", \"get_accounts\", [[\"1.2.0\"]]], \"id\": 1}' http://127.0.0.1:8090/\n</code></pre> <p>The definition of all node API's is available in the source code files including database_api.hpp and api.hpp. Corresponding documentation can be found in Doxygen: * database API * other API's</p>"},{"location":"docs/architecture/API/#wallet-api","title":"Wallet API","text":"<p>The <code>cli_wallet</code> program can also be configured to serve all of its commands as API's, known as wallet API.</p> <p>Start <code>cli_wallet</code> with RPC connection enabled:</p> <pre><code>$ ./programs/cli_wallet/cli_wallet --rpc-endpoint=127.0.0.1:8091\n</code></pre> <p>Access the wallet API using an HTTP client:</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"info\", \"params\": [], \"id\": 1}' http://127.0.0.1:8091/\n$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"get_account\", \"params\": [\"1.2.0\"], \"id\": 1}' http://127.0.0.1:8091/\n</code></pre> <p>Note: The syntax to access wallet API is a bit different than accessing node API.</p> <p>Important: * When RPC connection is enabled for <code>cli_wallet</code>, sensitive data E.G. private keys which is accessible via commands will be accessible via RPC too. It is recommended that only open network connection to localhost or trusted addresses E.G. configure a firewall. * When using wallet API, sensitive data E.G. the wallet password and private keys is transmitted as plain text, thus may be vulnerable to network sniffing. It is recommended that only use wallet API with localhost, or in a clean network, and / or use <code>--rpc-tls-endpoint</code> parameter to only serve wallet API via secure connections.</p>"},{"location":"docs/architecture/API/#accessing-restrictable-node-apis","title":"Accessing restrictable node API's","text":"<p>You can restrict node API's to particular users by specifying an <code>api-access</code> file in <code>config.ini</code> or by using the <code>--api-access /full/path/to/api-access.json</code> startup node command.  Here is an example <code>api-access</code> file which allows user <code>bytemaster</code> with password <code>supersecret</code> to access four different API's, while allowing any other user to access the three public API's necessary to use the node:</p> <pre><code>{\n   \"permission_map\" :\n   [\n      [\n         \"bytemaster\",\n         {\n            \"password_hash_b64\" : \"9e9GF7ooXVb9k4BoSfNIPTelXeGOZ5DrgOYMj94elaY=\",\n            \"password_salt_b64\" : \"INDdM6iCi/8=\",\n            \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\", \"network_node_api\"]\n         }\n      ],\n      [\n         \"*\",\n         {\n            \"password_hash_b64\" : \"*\",\n            \"password_salt_b64\" : \"*\",\n            \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\"]\n         }\n      ]\n   ]\n}\n</code></pre> <p>Passwords are stored in <code>base64</code> as salted <code>sha256</code> hashes.  A simple Python script, <code>saltpass.py</code> is avaliable to obtain hash and salt values from a password. A single asterisk <code>\"*\"</code> may be specified as username or password hash to accept any value.</p> <p>With the above configuration, here is an example of how to call <code>add_node</code> from the <code>network_node</code> API:</p> <pre><code>{\"id\":1, \"method\":\"call\", \"params\":[1,\"login\",[\"bytemaster\", \"supersecret\"]]}\n{\"id\":2, \"method\":\"call\", \"params\":[1,\"network_node\",[]]}\n{\"id\":3, \"method\":\"call\", \"params\":[2,\"add_node\",[\"127.0.0.1:9090\"]]}\n</code></pre> <p>Note, the call to <code>network_node</code> is necessary to obtain the correct API identifier for the network API.  It is not guaranteed that the network API identifier will always be <code>2</code>.</p> <p>The restricted API's are accessible via HTTP too using basic access authentication. E.G.</p> <pre><code>$ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [\"network_node\", \"add_node\", [\"127.0.0.1:9090\"]], \"id\": 1}' http://bytemaster:supersecret@127.0.0.1:8090/\n</code></pre> <p>Our <code>doxygen</code> documentation contains the most up-to-date information about API's for the node and the wallet.</p>"},{"location":"docs/architecture/Blockchain-Objects/","title":"Blockchain Objects","text":"<p>In contrast to most cryptocurrency wallets, the BitShares 2.0 has a different model to represent the blockchain, its transactions and accounts. This chapter wants to given an introduction to the concepts of objects as they are used by the BitShares 2.0 client. Furthermore, we will briefly introduce the API and show how to subscribe to object changes (such as new blocks or incoming deposits). Afterwards, we will show how exchange may monitor their accounts and credit incoming funds to their corresponding users.</p> <p>Another helpful document can be found at this link: BItShares Developers Portal - Blockchain Objects and their Identifiers.</p>"},{"location":"docs/architecture/Blockchain-Objects/#objects","title":"Objects","text":"<p>On the BitShares blockchains there are no addresses, but objects identified by a unique id, an type and a space in the form:</p> <pre><code>space.type.id\n</code></pre> <p>Some examples:</p> <pre><code>1.2.15   # protocol space / account / id: 15\n1.6.105  # protocol space / witness / id: 105\n1.14.7   # protocol space / worker / id: 7\n\n2.1.0    # implementation space / dynamic global properties\n2.3.8    # implementation space / dynamic asset data / id: 8\n\n2.5.80    # implementation space / account-balance / id: 80\n2.6.80    # implementation space / account-statistics / id: 80\n2.9.80    # implementation space / account-transactions / id: 80\n2.7.80    # implementation space / transactions / id: 80\n2.8.80    # implementation space / block-summary / id: 80\n</code></pre> <p>Related source code: this and this.</p>"},{"location":"docs/architecture/Blockchain-Objects/#accounts","title":"Accounts","text":"<p>The BitShares blockchain users are required to register each account with a unique username and 3 public keys on the blockchain. The blockchain assigns an incremental user id and offers to resolve the name-to-id pair. For instance <code>1.2.15</code>.</p>"},{"location":"docs/architecture/P2P-network-protocol/","title":"P2P network protocol","text":""},{"location":"docs/architecture/P2P-network-protocol/#overview","title":"Overview","text":"<p>BitShares nodes communicate with each other through a peer-to-peer (P2P) network protocol.</p> <p>Each node accepts connections on a (not necessarily public) TCP socket. Immediately after the connection has been established, nodes exchange cryptographic keys that are subsequently used for encrypting the traffic within that connection.</p> <p>The protocol consists of messages that are exchanged through the encrypted connection. The protocol supports various message types for requesting information or transmitting blockchain items.</p>"},{"location":"docs/architecture/P2P-network-protocol/#communication-layers","title":"Communication layers","text":""},{"location":"docs/architecture/P2P-network-protocol/#encryption-layer","title":"Encryption layer","text":"<p>All network traffic after the initial key exchange is encrypted with AES-256.</p> <p>For the key exchange, each node creates a random private key on the secp256k1 curve, computes the corresponding public key and transmits that in clear over the connection.</p> <p>Upon receiving the remote public key, it is multiplied with the own private key. The resulting curve point is hashed with SHA-512 to produce a 512 bit shared secret.</p> <p>From this shared secret, a 256 bit key is created by hashing it with SHA-256. Similarly, a 128 bit IV is created by hashing the secret with city_hash_128. The 256-bit key and the 128-bit IV are then used to set up AES-256-CBC en/decryption streams for sending and receiving data.</p>"},{"location":"docs/architecture/P2P-network-protocol/#messaging-layer","title":"Messaging layer","text":"<p>Messages consist of an 8 bytes header (4 bytes little-endian integer size, 4 bytes little-endian integer type) plus actual message content. The content is a binary serialized representation of a data structure indicated by the type field.</p> <p>For transmission, messages are padded to a multiple of 16 bytes. (16 bytes is the block size handled by the underlying AES streams. Thus, an messages can always be en/decrypted without having to wait for further data.)</p>"},{"location":"docs/architecture/P2P-network-protocol/#messages","title":"Messages","text":"<p>Message types are defined in libraries/net/include/graphene/net/core_messages.hpp. Data structures are defined in the same file.</p> <p>Unknown message types between 5000 and 5099 are silently ignored. They are assumed to be newer protocol messages. Message types outside this range are assumed to contain blockchain objects. Currently, this can be either stand-alone transactions, or blocks.</p>"},{"location":"docs/architecture/P2P-network-protocol/#connection-lifecycle","title":"Connection lifecycle","text":"<p>P2P connections are typically long-lived. A node will try to connect to a certain minimum number of peers and can accept additional connections up to a certain maximum number. Peers are only disconnected when they are misbehaving in some sense.</p>"},{"location":"docs/architecture/P2P-network-protocol/#handshake","title":"Handshake","text":"<p>After setting up encryption, both peers send a hello_message to each other. Both sides perform some sanity checking on the hello_messages they receive, and reply with either connection_accepted_message or connection_rejected_message. In the latter case, they also initiate disconnecting the peer.</p> <p>After receiving a connection_accepted_message, a node will request its peer's peers by sending an address_request_message. Also, if it doesn't know its own firewall status, or considers its knowledge stale, it will send a check_firewall_message.</p> <p>After receiving a connection_rejected_message, a node will also send an address_request_message, although it may be unlikely(?) to receive a response before the connection is closed.</p> <p>During the handshake, the node keeps the connection in its \"handshaking\" list. After a successful handshake (i. e. after receiving an address_message in reply to the initial address_request_message, or, for inbound connections, after receiving a fetch_blockchain_item_ids_message), the node moves the connection into its \"active\" list and sends a current_time_request_message to the peer. Finally, it starts the synchronization process with the new peer.</p> <p>The handshake can also time out, which leads to the connection being closed.</p>"},{"location":"docs/architecture/P2P-network-protocol/#disconnecting","title":"Disconnecting","text":"<p>A node that wants to disconnect and has already received a closing_connection_message simply closes the connection. If it hasn't, it sends a closing_connection_message and waits for the peer either sending a closing_connection_message or closing it.</p> <p>Note: before sending a closing_connection_message, the node moves the connection from its \"active\" list to its \"closing\" list. It is likely that the peer will subsequently timeout due to this.</p> <p>Note: a node will close the connection forcibly at most <code>GRAPHENE_NET_PEER_DISCONNECT_TIMEOUT</code> seconds after sending a closing_connection_message.</p>"},{"location":"docs/architecture/P2P-network-protocol/#normal-operation","title":"Normal operation","text":"<p>The node implements several \"loops\" for handling connections. Depending on connection state (i. e. the list containing the connection), the connection may be used by one or more such loops.</p> <p>Active connections are used by * fetch_sync_items_loop * fetch_items_loop * advertise_inventory_loop * terminate_inactive_connections_loop (disconnect if last message was received too long ago) * fetch_updated_peer_lists_loop</p> <p>Note: a known problem from testnet is that active connections will be terminated if the connection is too slow to transmit a large message (such as a huge block) within the timeout, because terminate_inactive_connections_loop only considers complete messages.</p>"},{"location":"docs/architecture/P2P-network-protocol/#address_request_message","title":"address_request_message","text":"<p>An address_request_message is sent every 15 minutes by <code>fetch_updated_peer_lists_loop</code> to all active peers.</p> <p>Upon receiving it, the node compiles a list of all its active peers into an address_message (see below) and sends it back to the requesting peer.</p>"},{"location":"docs/architecture/P2P-network-protocol/#address_message","title":"address_message","text":"<p>Endpoints contained in incoming address_messages are merged into the node's list of potential peers, updating all entries that are already present.</p> <p>If the local node is still in handshaking mode, the incoming address_message signals the end of the handshaking process. Success or failure are determined by a previously received connection_accepted_message or connection_rejected_message (see above). In case of success, the connection is moved into the \"active\" list.</p>"},{"location":"docs/architecture/P2P-network-protocol/#check_firewall_message","title":"check_firewall_message","text":"<p>A check_firewall_message can mean two things:</p> <ol> <li> <p>The sending node wants to know its own firewall status. In this case, the message contains an empty node id and IP endpoint. Note that the sending node may not know its external IP, but the receiving node does. In that case, the receiving node fills in the missing fields and forwards the message to a different peer.</p> </li> <li> <p>The receiving node is asked to check the firewall status of the node specified by the message's node id and IP endpoint, probably because the sending node has forwarded a request as described above. If the receiving node is already connected to the target node, it prepares (but doesn't send, BUG???) a reply indicating that it is unable to check. Otherwise, it attempts to connect to the specified node, marking the peer_connection object with an appropriate firewall_check_state. If a connection attempt succeeds or fails for a peer that is thus marked, a check_firewall_reply_message is sent back to the node from which the check_firewall_message was received.</p> </li> </ol>"},{"location":"docs/architecture/P2P-network-protocol/#check_firewall_reply_message","title":"check_firewall_reply_message","text":"<p>Like the request, the reply can mean different things depending on the origin of the request. Unsolicited replies are ignored.</p> <p>If the receiving node was the originator of the request, it updates its view of itself (i. e. its externally visible endpoint and firewall status) according to the reply.</p> <p>If the receiving node had forwarded the request, it forwards the reply to the originating node. In case of success it also updates its own peer database accordingly. An unable_to_check reply leads to the request being forwarded to another peer.</p>"},{"location":"docs/architecture/P2P-network-protocol/#current_time_request_message","title":"current_time_request_message","text":"<p>current_time_request_message is sent after a successful handshake, and also in regular intervals on otherwise idle connections (as a keepalive mechanism).</p> <p>Upon receiving one, a node immediately sends back a current_time_reply_message.</p>"},{"location":"docs/architecture/P2P-network-protocol/#current_time_reply_message","title":"current_time_reply_message","text":"<p>When a node receives a current_time_reply_message, it updates the internal clock_offset and round_trip_delay fields associated with the sending node, by calculating approximate values for these from the fields of the message structure.</p>"},{"location":"docs/architecture/P2P-network-protocol/#get_current_connections_request_message","title":"get_current_connections_request_message","text":"<p>Currently never sent by core code. Node replies with get_current_connections_reply_message.</p>"},{"location":"docs/architecture/P2P-network-protocol/#get_current_connections_reply_message","title":"get_current_connections_reply_message","text":"<p>Ignored by receiving node.</p>"},{"location":"docs/architecture/P2P-network-protocol/#trx_message-and-block_message","title":"trx_message and block_message","text":"<p>trx_messages contain transactions and block_messages contain blocks (obviously).</p> <p>The P2P layer handles them both in the same way: if they were sent unsolicited, they are ignored. If they were asked for, they are forwarded to the application layer and processed, i. e. transactions are applied to the chain and blocks are either applied or added to the fork database. If processing was successful, they are added to the list of known items, which is then broadcast to all connected peers.</p>"},{"location":"docs/architecture/P2P-network-protocol/#item_ids_inventory_message","title":"item_ids_inventory_message","text":"<p>advertise_inventory_loop generates and broadcasts item_ids_inventory_message to all connected peers whenever new items appear in the local inventory. Only \"new\" items are sent to a peer, i. e. items that we have neither sent to nor received from it.</p> <p>When such a message is received from a peer, all items that are not locally available yet are added to our knowledge of the peer's inventory, and will eventually be fetched by the fetch_items loop.</p> <p>Note: the cache timeout for detecting \"new\" items per peer is GRAPHENE_NET_MAX_INVENTORY_SIZE_IN_MINUTES (currently 2).</p>"},{"location":"docs/architecture/P2P-network-protocol/#fetch_items_message","title":"fetch_items_message","text":"<p>fetch_items_message is used by fetch_items_loop and fetch_sync_items_loop to request items from peers.</p> <p>Upon receiving a fetch_items_message, the node responds with one message per requested item. For items that it doesn't know about it sends an item_not_available_message, for others it replies with a corresponding trx_message or block_message, depending on the requested item type.</p>"},{"location":"docs/architecture/P2P-network-protocol/#item_not_available_message","title":"item_not_available_message","text":"<p>When a node receives this in response to a fetch_items_message requesting that item, it is removed from our cache of the peer's inventory. If it was a sync item, the node stops fetching blocks from that peer, and possibly disconnects.</p> <p>The message is ignored if the corresponding item wasn't requested.</p>"},{"location":"docs/architecture/P2P-network-protocol/#fetch_blockchain_item_ids_message","title":"fetch_blockchain_item_ids_message","text":"<p>fetch_blockchain_item_ids_message and its response counterpart, blockchain_item_ids_inventory_message, form the backbone of the blockchain synchronization mechanism. Sychronization with a peer is started immediately after the initial handshake has been completed, and re-triggered whenever a new block has been applied to the chain successfully.</p> <p>The message contains a synopsis of the undoable blocks the sending node has on its main chain. The receiving node compares this with its own list of known blocks. The following outcomes are possible:</p> <ol> <li>The receiving peer is on a fork that is unreachable for the sender, i. e. the synopsis contains no block IDs that are on its main chain.</li> <li>The peers are on different forks but the sender could switch if it wanted to.</li> <li>The receiver is ahead of the sender, i. e. it has blocks that the other one needs.</li> <li>The peers are in sync.</li> <li>The receiver is behind the sender and needs blocks from them.</li> </ol> <p>In the first case (unreachable fork), the node replies with empty list, then disconnects the sender. In all other cases, the node replies with a (possibly empty) list of up to 2000 block IDs from its main chain that it thinks the sender needs.  In addition, in cases 2 (reachable fork) and 5 (receiver behind sender), the receiving node also restarts synchronization with the peer by sending a new fetch_blockchain_item_ids_message.</p> <p>Note: a node never sends item IDs that are not on its main chain, even if the sender is on a fork that it knows about.</p>"},{"location":"docs/architecture/P2P-network-protocol/#blockchain_item_ids_inventory_message","title":"blockchain_item_ids_inventory_message","text":"<p>If this message is received unsolicited, i. e. not in response to a previously sent fetch_blockchain_item_ids_message, it is ignored.</p> <p>Otherwise, the contained list is checked for plausibility, and if successful it is merged into the cached list of blocks the peer knows about. If the sending peer has items that the receiving node needs, the fetch_sync_items_loop is triggered, otherwise another batch of item IDs is requested by sending a new fetch_blockchain_item_ids_message.</p>"},{"location":"docs/architecture/StealthTransfers/","title":"StealthTransfers","text":""},{"location":"docs/architecture/StealthTransfers/#stealth-transfers","title":"Stealth Transfers","text":"<p>This tutorial shows how to use the CLI wallet to perform stealth transfers in BitShares.   A stealth transfer is one that hides both the amount being sent and the parties involved in the trade.   Stealth transfers are also referred to as blinded transfers.  When privacy is important no account is ever used twice and it is impossible for any third party to identify how money is moving through blockchain analysis alone.</p>"},{"location":"docs/architecture/StealthTransfers/#creating-a-blind-account","title":"Creating a Blind Account","text":"<p>Blind Accounts are not registered on the blockchain like the named accounts on BitShares.  Instead a blind account is nothing more than a labeled public key.  The label assigned to the key is only known to your wallet.  The first step is to create an blind account by giving the wallet a name and a \"brainkey\".  A \"brainkey\" is effectively the private key used by your account. </p> <pre><code>&gt;&gt;&gt; create_blind_account alice \"alice-brain-key\"\n    \"BTS7vbxtK1WaZqXsiCHPcjVFBewVj8HFRd5Z5XZDpN6Pvb2dZcMqK\"\n</code></pre> <p>The result of this call is to print out the Public Key associated with blind account alice.  </p> <p>For the purpose of this test we will create two blind accounts in two different wallets (alice and bob).</p> <pre><code>&gt;&gt;&gt; create_blind_account bob \"bob-brain-key\"\n    \"BTS8HosMbp7tL614bFgqtXXownHykqASxwmnH9NrhAnvtTuVWRf1X\"\n</code></pre> <p>Alice and Bob now each have their own account in their own wallet that isn't known to anyone else in the world.  They can view their blind accounts with the following command:</p> <pre><code>&gt;&gt;&gt; get_my_blind_accounts\n[[\n\"alice\",\n\"BTS7vbxtK1WaZqXsiCHPcjVFBewVj8HFRd5Z5XZDpN6Pvb2dZcMqK\"\n]]\n</code></pre>"},{"location":"docs/architecture/StealthTransfers/#adding-a-contact","title":"Adding a Contact","text":"<p>Suppose Alice wishes to make a payment to Bob, she must first ask Bob for his account public key, BTS8HosMbp7tL614bFgqtXXownHykqASxwmnH9NrhAnvtTuVWRf1X.   Then she can assign a label to it in her wallet.  In this case she will record bob's key as \"bobby\".</p> <pre><code>&gt;&gt;&gt; set_key_label BTS8HosMbp7tL614bFgqtXXownHykqASxwmnH9NrhAnvtTuVWRf1X bobby\n</code></pre>"},{"location":"docs/architecture/StealthTransfers/#transferring-to-a-stealth-balance","title":"Transferring to a Stealth Balance","text":"<p>All balances must come from somewhere and initially all balances are held by some public account.  For the purpose of this example we will assume alice has an account with the name 'alicepub' has a public balance that it would like to obscure.   It will do this by transferring some funds to one or more blind accounts.</p> <pre><code>&gt;&gt;&gt; transfer_to_blind alicepub BTS [[alice,1000],[alice,2000]] true\nalicepub sent 3000 BTS to 2 blinded balances fee: 15 BTS\n1000 BTS to  alice\n  receipt: 2Dif6AK9AqYGDLDLYcpcwBmzA36dZRmuXXJR8tTQsXg32nBGs6AetDT2E4u4GSVbMKEiTi54sqYu1Bc23cPvzSAyPGEJTLkVpihaot4e1FUDnNPz41uFfu2G6rug1hcRf2Qp5kkRm4ucsAi4Fzb2M3MSfw4r56ucztRisk9JJjLdqFjUPuiAiTdM99JdfKZy8WTkKF2npd\n\n2000 BTS to  alice\n  receipt: 28HrgG1nzkGEDNnL1eZmNvN9JmTVQp7X88nf7rfayjM7sACY8yA7FjV1cW5QXHi1sqv1ywCqfnGiNBqDQWMwpcGB1KdRwDcJPaTMZ5gZpw7Vw4BhdnVeZHY88GV5n8j3uGmZuGBEq18zgHDCFiLJ6WAYvs5PiFvjaNjwQmvBXaC6CqAJWJKXeKCCgmoVJ3CQCw2ErocfVH\n</code></pre> <p>In this case the only thing the public sees is that account 'alicepub' sent 3000 BTS to two different places.  The outside world has no idea how much is in each output, only that they add up to 3000 BTS.</p>"},{"location":"docs/architecture/StealthTransfers/#viewing-blind-balances","title":"Viewing Blind Balances","text":"<p>Alice can verify that she has 3000 BTS in blinded balances by using the command:</p> <pre><code>&gt;&gt;&gt; get_blind_balances alice\n3000 BTS\n</code></pre>"},{"location":"docs/architecture/StealthTransfers/#stealth-transfer-to-bob","title":"Stealth Transfer to Bob","text":"<p>Alice can now transfer to \"Bob\" which she has labeled 'bobby' in her wallet via the following command:</p> <pre><code>&gt;&gt;&gt; blind_transfer alice bobby 500 BTS true\nblind_transfer_operation temp-account fee: 15 BTS\n485 BTS to  alice\n  receipt: iLrPEY61BQsrKSVLLhuJBB6axkjpp2YA1EUq8k8tdQNfbgm1rZn8iUfxd2szyLV1962S39VtPFcuidok7tnT851JFUvP5r7U5MfbtRvmsNBHtSmaWyfbXg7srPsp1roUBpr9Z2QM7W7X5AAonFqoduWcnGp7cViQCDppEqSZHGjY8zFJARd1vm4qoPcMAjw4pjS3vgj6796SfR9ntnN5vZr5b9WvM4Hune7DfbGShed81n1R63BH9h9Ef8BXRy1ERkkJhMmYhXKC\n\n500 BTS to  bobby\n  receipt: iLrPEY61BQsrKSVLLhuJBB6axkjpp2YA1EUq8k8tdQNfbgmWNQD9tWnAciMpPuLhanv4j8nhvUE1ZjD3WNZPoxdiekTCraMir7xx5rbZsGCogF6YfPbCnZCapMDkC8Zsgs5bZWCB2oRvB1wCjYmsQaji6SQcax5Sii4MY93Q1HGPvehcS7jBvLDz5e1GQmAzoWhnPZqoCuDSvL521CSCCxRvLXoHK1Rih5kX72tJYdAXCECUL3xZ2cd2CA8eegfTiC7f7XkTd75f\n</code></pre> <p>The output shows that 500 BTS was sent to bobby and 485 BTS sent back to alice as change after paying a 15 BTS fee.  If we check the balance of alice we will see: </p> <pre><code>&gt;&gt;&gt; get_blind_balances alice\n2485 BTS\n</code></pre> <p>The outside world only knows that alice sent some amount less than 3000 BTS to two new outputs.</p>"},{"location":"docs/architecture/StealthTransfers/#receiving-a-blind-transfer","title":"Receiving a Blind Transfer","text":"<p>At this point Bob has not actually received any funds because his wallet has no idea where to look.  He needs to load the receipt from Alice into his account.</p> <pre><code>&gt;&gt;&gt; receive_blind_transfer iLrPEY61BQsrKSVLLhuJBB6axkjpp2YA1EUq8k8tdQNfbgmWNQD9tWnAciMpPuLhanv4j8nhvUE1ZjD3WNZPoxdiekTCraMir7xx5rbZsGCogF6YfPbCnZCapMDkC8Zsgs5bZWCB2oRvB1wCjYmsQaji6SQcax5Sii4MY93Q1HGPvehcS7jBvLDz5e1GQmAzoWhnPZqoCuDSvL521CSCCxRvLXoHK1Rih5kX72tJYdAXCECUL3xZ2cd2CA8eegfTiC7f7XkTd75f \"alice\" \"memo\"\n500 BTS  alice  =&gt;  bob   memo\n\n&gt;&gt;&gt; get_blind_balances bob\n500 BTS\n</code></pre> <p>The call to receive a blind transfer takes two optional arguments, \"from\" and \"memo\" which will be used to label alice's public key in bob's wallet.  This helps bob to make sense of his transfer history.</p> <pre><code>&gt;&gt;&gt; blind_history bob\n\nWHEN           AMOUNT  FROM  =&gt;  TO  MEMO\n====================================================================================\n19 seconds ago  500 BTS  alice  =&gt;  bob  memo\n</code></pre>"},{"location":"docs/architecture/StealthTransfers/#transferring-back-to-public","title":"Transferring back to Public","text":"<p>Eventually every blind balance needs to convert back to a public balance which can be achieved with the following command:</p> <pre><code>&gt;&gt;&gt; transfer_from_blind alice alicepub 1000 BTS true \n{ ... }\n</code></pre> <p>In this case alice returned some of her remaining blind balances back to her public balance.</p>"},{"location":"docs/architecture/architecture/","title":"Architecture","text":""},{"location":"docs/architecture/architecture/#architecture","title":"Architecture","text":"<p>Graphene is designed to allow multiple applications to connect to the network.  An application consists of a p2p node which receives blocks and optionally broadcasts new transactions on behalf of the application's users.  Applications contain core logic which consists of core chain state and core indexes, which is the minimal amount of data necessary to reach core consensus, shared global agreement among all nodes participating in the p2p network about core features.</p>"},{"location":"docs/architecture/architecture/#core-virtual-property","title":"Core virtual property","text":"<p>Virtual property consists of the things that can be owned.  Traditional cryptocurrencies, such as Bitcoin, have a single type of virtual property:  A digital token which is transferrible, fungible (e.g. all Bitcoins are identical), and (for practical purposes) divisible.</p> <p>Graphene has two different types of digital property:  Base property, and derived property. (Economists would call base property fiat, but this term is already used in the cryptocurrency space as a retronym for government-issued currency, used to differentiate it from cryptocurrency.)</p> <p>The base property in Graphene core consists of:</p> <ul> <li>Accounts</li> <li>Core asset</li> <li>UIA's</li> </ul> <p>Derived property in Graphene core consists of:</p> <ul> <li>BitAssets</li> <li>Bonds</li> <li>Options</li> </ul> <p>(TODO:  Other types of derived property, e.g. escrow?)</p> <p>Applications which leverage the Graphene blockchain for consensus may implement their own base and/or derived virtual property. (TODO:  explain how application-level virtual property may interact with core property.)</p> <p>Derived property is created by core smart contracts which are hard-coded in Graphene.  Smart contracts can be as diverse as real-world contracts, but in Graphene, all core smart contracts are collateralized, two-party contracts.  One side of the contract must post collateral which is used to perform settlement.  The party which posts collateral is referred to as the long side.</p> Contract type Long name Long fungible? Long transferrable? Short name Short fungible? Short transferrable? BitAsset Long holder Yes Yes Short holder No No Bond Lender No Yes Borrower No Yes Option Option holder ? Yes Option writer ? Yes <p>A word about the rationale for short BitAssets not being transferrable:  There is little technical obstacle to making short positions transferrable. However, if Alice is a weakly collateralized short seeking to exit, and Bob is a new short seeking to enter at high leverage, Alice and Bob both have incentive for her to sell her position to him.  It is desirable to force Alice to cover and force Bob to short at the minimum initial leverage, to re-capitalize shorts over time.</p>"},{"location":"docs/architecture/architecture/#differences-from-bitshares","title":"Differences from BitShares","text":"<ul> <li> <p>Shorting mechanics.  Shorts have maintenance margin requirement and user-settable stop-loss.  TODO:  Document exactly how this works.</p> </li> <li> <p>Incremental order matching.  Orders match incrementally when entered.  TODO:  Document exactly how this works.</p> </li> <li> <p>Traditional price splitting.  If orders match at a spread, they split the surplus 50-50.  TODO:  Document more exactly, including example.</p> </li> <li> <p>Fill-or-kill orders.  TODO:  How do these work?</p> </li> <li> <p>BitAssets 3.0.  TODO:  Turn forum posts, etc. into detailed spec including examples.</p> </li> <li> <p>TaPoS.  TODO:  Explain this.</p> </li> <li> <p>Short expiration time.  TODO:  Explain this.</p> </li> <li> <p>Multisig uses authority system.</p> </li> </ul>"},{"location":"docs/architecture/architecture/#authority-system","title":"Authority system","text":"<p>TODO:  Document this (sort of \"multisig for humans\")</p>"},{"location":"docs/architecture/architecture/#referral-system","title":"Referral system","text":"<p>TODO:  Document this</p>"},{"location":"docs/architecture/architecture/#proposed-txs","title":"Proposed tx's","text":"<p>TODO:  Document this, including very exact semantics</p>"},{"location":"docs/architecture/architecture/#custom-ops","title":"Custom ops","text":"<p>A custom op is a no-op with data.</p>"},{"location":"docs/architecture/architecture/#custom-objects","title":"Custom objects","text":"<p>A custom object is an object with data and an owner, the owner can update the data.  TODO:  Is this actually a thing?</p>"},{"location":"docs/architecture/architecture/#list-of-object-types","title":"List of object types","text":"<p>TODO:  Write the list</p>"},{"location":"docs/architecture/architecture/#relative-ids","title":"Relative ID's","text":"<p>TODO:  Document limitations of relative ID's.  They can only be used in some operations -- which operations?  TODO:  Fix this limitation</p>"},{"location":"docs/architecture/architecture/#name-blinding","title":"Name blinding","text":"<ul> <li>This is <code>theoreticalbts</code> idea for an interesting feature</li> </ul> <p>This is a feature implemented in Namecoin.  It is a commit/reveal procedure to prevent front-running of name registration. When registering a new name, you can commit <code>(H(name + separator + salt), recipient_pubkey)</code> in one tx, then within 24 hours, reveal <code>salt</code> in another tx to claim the name.  If multiple claims to the same name are submitted, the claim with the earliest commit time is given priority.  NB the recipient pubkey is given in the commit, not the reveal, so someone else front-running your reveal pays a fee but doesn't gain the name.</p> <p>Note, this can result in situations where account name is revoked (because it tried to claim a name that was revealed earlier). So the named object (e.g. account, but are account objects the only named objects in Graphene?) still exists, but just becomes nameless.</p>"},{"location":"docs/architecture/architecture/#namespacing","title":"Namespacing","text":"<ul> <li>This is <code>theoreticalbts</code> idea for an interesting feature</li> </ul> <p>Many user-bases already exist, and some of these may have name collisions.  Common names like <code>dan</code> or <code>nathan</code> are probably already registered on Github, Linkedin, Twitter, Google, Yahoo, etc. and probably belong to different people on all these services. If our business model is to convince online services to migrate their user bases, then we should give them a way to namespace these accounts.  E.g. <code>github/dan</code>, <code>github/nathan</code> etc., in general a registration of <code>a/b</code> must be approved by account <code>a</code>.</p> <p>Should this reflect referral structure.  For example if <code>a</code> is your referrer, then your name is <code>a/b</code>.  New accounts are always <code>a/b</code>, but can be promoted to <code>b</code> by buying out.  Hmm, seems like the buyout should also give you an opportunity to change your name (since root NS might have conflicts), and this change should be name-blinded.</p>"},{"location":"docs/architecture/architecture/#wrapped-transactions","title":"Wrapped transactions","text":"<ul> <li>This is <code>theoreticalbts</code> idea for an interesting feature</li> </ul> <p>In traditional exchanges, unfilled orders are free -- market fees are only charged on matched orders.  We have to charge a minimal amount per unfilled order as anti-spam measure.  However, we can imagine an e(x)change provider (X)avier who hosts orders on an external server.  When Alice wants to place an order, she creates an order transaction with no fee, then uploads the order to Xavier's server; Xavier publishes it (and Xavier will need to implement alternative anti-spam measures to protect his server from abuse).</p> <p>When Bob wants to match Alice's order, he provides the fee.</p> <p>Here's my idea for how to implement this without substantially re-working the fee structure.  We create a special \"community\" account (TODO:  better name) with a special flag which signals that no authority is needed to withdraw funds from it.  Alice signs her tx paying the fee from the community account, now the only reason her tx is invalid is because the community account has no funds.  Now Bob can create a wrapping transaction containing his matching order, funding for the community account, and Alice's tx.  The wrapped tx is signed by Bob.  Crucially, doing it this way means no one can insert a tx taking the money from the community account in between Bob's operation funding the community account and Alice's transaction paying it.</p> <p>Can we do this with proposed tx's?  We have to think very carefully about the exact semantics of proposed tx's.</p>"},{"location":"docs/architecture/architecture/#account-porting-gateways","title":"Account porting gateways","text":"<ul> <li>This is <code>theoreticalbts</code> idea for an interesting feature</li> </ul> <p>This can also be used for third-party \"account porting gateways\".  E.g. let's say we have <code>email</code> account and want to set up a way where anyone with an email address can claim the email address in BitShares form.  So for example <code>email/user_at_example_dot_com</code> would be given to someone who proves they control <code>user@example.com</code>.  The holder of the <code>email</code> BTS account, and not core witnesses / validation, is responsible for checking this proof (which may require arbitrary off-blockchain actions that cannot be validated in a non-decentralized way, like sending confirmation emails).  The validation consists of signature checking (\"user <code>email</code> confirmed pubkey <code>p</code> owns <code>email/user_at_example_dot_com</code>\") combined with the <code>email</code> account's policy (\"we require successful response to registration mail before giving out names\") combined with trust in <code>email</code> account (by sending money to account <code>email/user_at_example_dot_com</code>, user is trusting <code>email</code> account honestly associated <code>user_at_example_dot_com</code> with the correct person).</p> <p>This method can also be applied to any website which has a userbase that has a login API (Github / Twitter / LinkedIn / etc.), or even merely the ability for members to post content (e.g. in forum profile) -- if you give a user a challenge and they successfully post it in their profile or other publication area, they've successfully confirmed access to that account.</p> <p>With wrapped transactions, the account porting gateway can create a no-fee tx assigning the name to the user, the user then adds the fee to actually register the account.  This allows the account porting gateway to avoid having to solve the economic problem of determining which registrations will result in profitable CLV, and focus solely on the technical problem of verifying the owner of an existing name in a third-party system like email, DNS, Google accounts, etc., while still claiming referrer fees.  Admittedly there's no \"free lunch,\" the UX is a little more rocky because the user needs to provide their own funding.</p>"},{"location":"docs/architecture/architecture/#account-revocation","title":"Account revocation","text":"<ul> <li>This is <code>theoreticalbts</code> idea for an interesting feature</li> </ul> <p>There needs to be an \"I lost my email address and private keys\" button which allows <code>email</code> to revoke the name <code>email/user_at_example_dot_com</code>. However, the underlying account should still exist, it just needs to be unlinked from the name (this way if <code>user</code> later finds their private keys, they still have access to funds).  The name should be unable to be reassigned until a long enough delay which at least allows transactions with TaPoS before the revocation block become invalid (otherwise if Alice sends to <code>user_at_example_dot_com</code> and Eve controls <code>email</code> and a single witness, Eve can have her witness censor Alice's tx inclusion in the block, instead including a tx assigning <code>email/user_at_example_dot_com</code> to herself, and taking the funds when the tx appears in a later block).</p> <p>NB, this attack may be more difficult in practice, because clients do lookup of name-to-account-ID mapping locally.  It still makes sense to have a revocation period -- this way if you've heard from someone in the last 30 days that their address is <code>email/user_at_example_dot_com</code>, then you know you'll either send the funds to the right person or get an error.  Also, wallets should warn if one of your contacts has been revoked and reassigned.</p> <p>It also complicates account history, as the name displayed will be determined by the mapping for the name at the time the tx was performed.</p>"},{"location":"docs/architecture/architecture/#assertion-ops","title":"Assertion ops","text":"<ul> <li>This is <code>theoreticalbts</code> idea for an interesting feature</li> </ul> <p>An assertion op is an operation which invalidates a transaction unless the asserted condition holds. So far we have:</p> <ul> <li>TaPoS assertion.  Asserts that a particular block hash exists in the history.  All transactions have this assertion, it prevents transactions from migrating to forks where ID's have different objects.</li> </ul> <p>These may need to be included:</p> <ul> <li>Data object assertion.  We may be required to check a data object which has an ID, owner and custom content. We may assert a data object exists with the given ID and owner, and some function of the content is true.</li> </ul> <p>Examples of data object assertion functions:  Assert that the content follows a certain byte pattern (including gaps), assert the content is a Merkle / Patricia proof that x is in S, assert some hash of the content is a given value. These can be combined to construct an AXCT smart contract, and the latter is also useful for name-blinding schemes.</p> <ul> <li> <p>Date assertions.  Not-valid-before or not-valid-after.  Every tx has expiration (not-valid-after) in the near future, and can be not-valid-before some point in the recent past via TaPoS.  However it may be useful to extend these windows, e.g. create a transaction not-valid-before some time in the future (this is <code>nLockTime</code> in Bitcoin).  Or create a transaction not-valid-after some time in the far future.  A mechanism for more flexible date assertions than the default TaPoS / expiration should be provided.  It is acceptable to require the use of proposed transactions for this mechanism.</p> </li> <li> <p>Authority assertions.  An authority assertion is an op which adds the given authority to the list of authority required to make the transaction valid.  Authority assertion is useful to make platform actions and app actions atomic.  E.g. Alice and Bob want to create a transaction to trade her AppCoin for Bob's BitUSD.  The tx includes a custom op interpreted by the app layer as transfer of Alice's AppCoins to Bob, which the app doesn't honor without Alice's signature; and a regular (platform) transfer op sending Bob's BitUSD to Alice.  Without an authority assertion, Alice's signature also needs to be a custom op, which also means Alice has to sign first.  (If Alice used a regular signature, Eve would be able to play the role of Alice, strip her own signature and apply Bob's signature, taking Bob's BitUSD without compensating him with her AppCoins.)  Authority assertions mean that app signatures don't have to be wrapped in this way, and allows tx to be signed in any order.</p> </li> </ul>"},{"location":"docs/architecture/chain-locked-tx/","title":"Chain locked tx","text":""},{"location":"docs/architecture/chain-locked-tx/#chain-locked-transactions","title":"Chain-locked transactions","text":"<p>Add a chain ID to the signature.  This ensures that a transaction without TaPoS cannot migrate between Graphene-based chains, and reduces the ability for the transaction to migrate to a different protocol (e.g. if your Graphene key is also a Bitcoin key, then a Graphene transaction which is parseable as a Bitcoin transaction might be able to migrate to the Bitcoin chain).</p>"},{"location":"docs/architecture/chain-locked-tx/#wallet-functionality","title":"Wallet functionality","text":"<p>The <code>cli_wallet</code> stores the <code>chain_id</code> in the wallet file.  Thus a wallet file can only be used with a single chain.  When creating a new wallet file, the <code>chain_id</code> can be specified on the command line; if none is specified, the embedded <code>chain_id</code> will be used by default.</p> <p>When connecting to an API server, the <code>cli_wallet</code> will check the chain ID provided by the server matches the client, and disconnect immediately if the check fails.</p>"},{"location":"docs/architecture/chain-locked-tx/#light-wallet-functionality","title":"Light wallet functionality","text":"<p>At present, the light wallet simply uses the chain ID specified by its backing full node to sign transactions.</p>"},{"location":"docs/architecture/spv/SPV/","title":"SPV","text":"<p>Simple Payment Verification (SPV) basically provides a way for a client to validate a transaction was included within a specific block, provided knowledge of only a subset of blocks, not requiring the entire blockchain dataset.</p>"},{"location":"docs/architecture/spv/SPV/#proof-of-work","title":"Proof of work","text":"<p>Provided that Proof of work does not come with finality (but rather probabilistic finality - e.g. 99.99% after 6 blocks), SPV on POW also is probabilistic. This makes it particular easy because all we need to do is validate that a particular transaction is part of a block (through merkle root proofs) and collect 6 subsequent blocks. From those, the required work can be identified from the difficulty miners had to resolve to find those blocks. Hence, we basically end up with an equation that connections electrical expense with probability of a transaction being part of a block. Parameters allow to fine-tune for required security.</p>"},{"location":"docs/architecture/spv/SPV/#delegated-proof-of-stake-dpos","title":"Delegated Proof-of-Stake (DPoS)","text":"<p>DPoS presents some difficulty in the fact that no connection between electrical expense and validity of a block can be made. Instead, only the authoritative block producer may sign a given block with their corresponding signing key (a secret private key) within a specific time slot. Also, the block producer may change their authoritative signing key using a validated blockchain operation. Further, the set of valid block producers will change over time, as reflected by the votes collected, during each maintenance interval (see below). This brings us to some interesting questions:</p> <ul> <li>How does a client determine the set of valid block producers, over time?</li> <li>How does a client determine each block producers authoritative signing key, over time?</li> <li>How does a client confirm a given blocks was signed by authoritative signing key for that block production time slot?</li> </ul> <p>An advantage of DPoS is the finality that comes as early as 2/3 of active block producers individually approving a given block (e.g. having signed a block on top of the chain containing that block).</p>"},{"location":"docs/architecture/spv/SPV/#rounds-and-maintenance-intervals","title":"Rounds and Maintenance Intervals","text":"<p>It is important to note that block producers are a fixed set of entities that have been granted permission to produce blocks in an a-priori deterministic order. In each round a block producer may only produce at most one block. Hence, if our blockchain defines its block production interval as 3 seconds, and a round has 20 block producers, the round ends after exactly 60 seconds. Afterwards, a new round is shuffled from this set of block producers.</p> <p>Every maintenance interval, the votes for block producers are tallies which might cause the set of valid block producers to change, as well as the total number within the set, for the upcoming round. Therefore, additional producers may become active, active ones may become inactive, or active ones may be replaced. There are currently no bounds on neither the turnover within the block producer set nor the total number of block producers between maintenance intervals (blockchain parameters do define minimum and maximum producer set size).</p>"},{"location":"docs/architecture/spv/SPV/#problem-statement","title":"Problem Statement","text":"<p>All this is dealt with by DPoS internally, as part of the consensus protocol. If we were to verify the validity of a particular block, the only way to do so would be to go through every single block since genesis, as we cannot otherwise ensure that the block producers have actually been voted the way it is observed currently.</p> <p>At the current state, a single block simply does not contain sufficient information to ensure provability of that block being part of the actual (BitShares) blockchain. The only solution to that, obviously, requires to provide additional information together with the block/transaction in question. Obviously, we are looking for a way that requires less than the entire blockchain to be provided to prove a single transaction/block.</p>"},{"location":"docs/architecture/spv/SPV/#proposal","title":"Proposal","text":""},{"location":"docs/architecture/spv/SPV/#step-1-announcing-block-producer","title":"Step 1 - Announcing block producer","text":"<p>Provided that we need to be able to identify the block producers and their signing keys, we propose to:</p> <ul> <li>announce changes of block producers and signing keys in each first-block-in-round after the *maintenance interval</li> </ul> <p>This allows for keeping track of changes to block producers by providing only one block of information every maintenance interval (currently 4hrs). It thus becomes trivial to keep track of block producers since genesis (as of writing, only <code>1095</code> have happened so far).</p>"},{"location":"docs/architecture/spv/SPV/#step-2-bft-commitments-of-block-producers-per-round","title":"Step 2 - BFT commitments of block producers per round","text":"<p>Provided that the order of block producers changes every round, we cannot verify that a block producer may have gone rouge and provided a proof of a spoof block. For this reason, we introduce:</p> <ul> <li>a BFT-style operation that has to be broadcast by the block producer and can only be included in the first-block-in-round as a commitment of the producer to the first-block-in-round in the previous round.</li> </ul> <p>This way, we can count how many block producers agree on the outcome of the last round. If this number is higher than 2/3 of the available block producers (which is a number we know because of Step 1), we can assume that the previous round has also reached irreversibility.</p>"},{"location":"docs/architecture/spv/SPV/#required-data-for-a-proof","title":"Required data for a proof","text":"<p>Hence, for a proof that a transaction <code>tx</code> is part of a block <code>B(tx)</code>, we need the following information:</p> <ul> <li>the block header of <code>B(tx)</code> that contains the merkle root for proofing <code>tx in B(tx)</code></li> <li>the previous <code>x</code> block headers up to the *first-block-in-round of the round containing <code>B(tx)</code></li> <li>the previous <code>y</code> *first-block-in-round headers up to genesis</li> </ul>"},{"location":"docs/architecture/spv/SPV/#open-questions","title":"Open Questions","text":"<ul> <li>How to allow a block producer to change signing key?</li> <li>Can we make irreversible explicit if the block producer commit to the first-block-in-round of the previous round?</li> </ul>"},{"location":"docs/architecture/spv/SPV/#literature","title":"Literature","text":"<ol> <li>kyber.network</li> </ol>"},{"location":"docs/architecture/threading/Threading/","title":"Threading in BitShares Core","text":"<p>Work in progress</p>"},{"location":"docs/architecture/threading/Threading/#general-remarks","title":"General Remarks","text":"<p>BitShares uses <code>boost::thread</code> for parallel execution. However, due to the single-threaded internal database, threads are used sparingly.</p> <p>On top of <code>boost::thread</code>, BitShares implements a kind of cooperative multitasking (using <code>boost::context</code>). I. e. a thread can have tasks queued for processing, and whenever a task either completes, is blocked in a mutex, or is waiting for a future, the thread switches to the next task in the queue (but see below).</p> <p>Per default there are two main threads, a database thread and a P2P thread. In addition, several more threads are started for asynchronous IO operations (using <code>boost::asio</code>). These are available through <code>fc::default_io_service()</code>.</p> <p>With https://github.com/bitshares/bitshares-core/pull/1360 there will be another thread pool. It is mostly meant for parallel processing of computationally intensive things that do not otherwise interfere with each other. This pool is accessed using <code>fc::do_parallel()</code>.</p>"},{"location":"docs/architecture/threading/Threading/#p2p-thread","title":"P2P Thread","text":"<p>The P2P thread is \"owned\" by <code>node_impl</code>. It has several permanent tasks for handling (accepting, creating, monitoring, closing) P2P connections, started from <code>connect_to_p2p_network()</code>.</p> <p>P2P communication is based on messages. Messages start with a message header containing message type and payload size, followed by the payload and padded to a multiple of 16 bytes. Incoming messages concerning the P2P layer are handled within the P2P thread, messages concerning the database (mostly blocks and transactions) are handed over to the database thread. \"handed over\" means a task is created within the database thread.</p>"},{"location":"docs/architecture/threading/Threading/#accept_loop","title":"accept_loop","text":"<p>Accepts connections on the P2P listening socket (if any) and enters them into the <code>_handshaking_connections</code> pool.</p>"},{"location":"docs/architecture/threading/Threading/#p2p_network_connect_loop","title":"p2p_network_connect_loop","text":"<p>Attempts to connect to known peers as long as <code>current_connections &lt; desired_connections</code>.</p>"},{"location":"docs/architecture/threading/Threading/#fetch_sync_items_loop","title":"fetch_sync_items_loop","text":"<p>Continually requests items in <code>ids_of_items_to_get</code> from connected peers.</p>"},{"location":"docs/architecture/threading/Threading/#fetch_items_loop","title":"fetch_items_loop","text":"<p>Continually requests items in <code>_items_to_fetch</code> from connected peers.</p>"},{"location":"docs/architecture/threading/Threading/#advertise_inventory_loop","title":"advertise_inventory_loop","text":"<p>Advertises items in <code>_new_inventory</code> to connected in-sync peers.</p>"},{"location":"docs/architecture/threading/Threading/#terminate_inactive_connections_loop","title":"terminate_inactive_connections_loop","text":"<p>Terminates connections that appear idle, or stale, or dead.</p>"},{"location":"docs/architecture/threading/Threading/#fetch_updated_peer_lists_loop","title":"fetch_updated_peer_lists_loop","text":"<p>Periodically (hardcoded every 15 minutes) sends <code>address_request_message</code> to all active peers.</p>"},{"location":"docs/architecture/threading/Threading/#bandwidth_monitor_loop","title":"bandwidth_monitor_loop","text":"<p>Updates total bytes sent/received every second for the past minute. Aggregates per minute over the last hour, keeps hourly aggregates for 72 hours.</p>"},{"location":"docs/architecture/threading/Threading/#dump_node_status_task","title":"dump_node_status_task","text":"<p>Dumps node status to logfile (level INFO) every minute.</p>"},{"location":"docs/architecture/threading/Threading/#database-thread","title":"Database thread","text":"<p>The database thread is actually the \"main\" thread of <code>witness_node</code>.</p> <p>It initializes the database and the configured plugins, opens the database (which can involve replaying), then starts the P2P network thread and possibly websocket API endpoints. After starting everything else, it simply goes to sleep and waits for application shutdown.</p> <p>The database thread does not remain completely inactive though. It handles tasks posted to it from the other threads, for example from the P2P thread, from the websocket threads, or from plugins like the witness plugin.</p> <p>Some of these tasks must not be interrupted. E. g. when during application of a block the task yields, another task may become active that interferes with the block processing, e. g. when a new pending transaction is received via P2P or client API and immediately applied to the database.</p>"},{"location":"docs/architecture/threading/Threading/#tasks","title":"Tasks","text":"<p>An <code>fc::task</code> consists of two parts - a functor to be executed, and a promise that is fulfilled upon completion of the functor with its return value.</p> <p>An <code>fc::promise</code> is usually paired with an <code>fc::future</code>. The future owns the promise (in the sense of RAII) through a <code>shared_ptr</code>. This means that at least one future for a given task must exist until the task is completed, because otherwise the promise goes out of scope and the thread that's processing the task will have a problem.</p>"},{"location":"docs/architecture/threading/Threading/#caveats","title":"Caveats","text":"<ul> <li>A thread that is blocked in an <code>fc::spin_yield_lock</code> will yield to other tasks in its ready queue, but will not start new tasks in the pending queue, nor check blocked tasks and the futures they're blocking on!</li> <li>A thread that is blocked in an <code>fc::spin_lock</code> will (as the name implies) spin-wait for the lock to become free instead of yielding to anything else.</li> <li><code>promise.wait(timeout)</code> will set the promise into error state if the timer expires.</li> </ul>"},{"location":"docs/build/BUILD_UBUNTU/","title":"Ubuntu (64-bit) Build and Install Instructions","text":"<p>As of writing, we support building on Ubuntu 16.04, 18.04 and 20.04 LTS releases. The following dependencies are recommended for a clean install on Ubuntu (64-bit):</p> <pre><code>sudo apt-get update\nsudo apt-get install autoconf cmake make automake libtool git libboost-all-dev libssl-dev g++ libcurl4-openssl-dev doxygen\n</code></pre>"},{"location":"docs/build/BUILD_UBUNTU/#build-bitshares-core","title":"Build BitShares Core","text":"<pre><code>git clone https://github.com/bitshares/bitshares-core.git\ncd bitshares-core\ngit submodule update --init --recursive\ncmake -DCMAKE_BUILD_TYPE=Release .\nmake\n</code></pre>"},{"location":"docs/build/BUILD_UBUNTU/#build-support-boost-version","title":"Build Support Boost Version","text":"<p>NOTE: BitShares Core requires a Boost version in the range [1.58 - 1.74]. Newer versions may work, but have not been tested. If your system came pre-installed with a version of Boost that you do not wish to use, you may manually build your preferred version and use it with BitShares by specifying it on the CMake command line. Example:</p> <pre><code>cmake -DBOOST_ROOT=/path/to/boost -DCMAKE_BUILD_TYPE=Release .\nmake\n</code></pre>"},{"location":"docs/build/BUILD_WIN32/","title":"Windows development environment setup and build instructions","text":"<p>This document will help you build Bitshares Core from its source code, assuming only that you have a fresh installation of Windows.</p> <p>Note that compiling BitShares Core is not required to use the software. Pre-built binaries are available here.</p>"},{"location":"docs/build/BUILD_WIN32/#prerequisites","title":"Prerequisites","text":"<ul> <li>64 bit windows operating system. Windows 10 was used for this document.</li> </ul>"},{"location":"docs/build/BUILD_WIN32/#visual-studio","title":"Visual Studio","text":"<p>Visual studio 2019 is used by some in the core team. Visual Studio 2017 and 2015 Update 1 are known to have worked in the past. Assume that anything older is unsupported. The code contains C++14 features, so older compilers that do not support the features used will not work.</p>"},{"location":"docs/build/BUILD_WIN32/#git","title":"Git","text":"<p>Download Git for Windows here.</p> <p>Installation of git is straightforward. Using the installation options that adds to your PATH environment variable is recommended.</p>"},{"location":"docs/build/BUILD_WIN32/#cmake","title":"CMake","text":"<p>Download the latest cmake and install it. Version 3.14.2 was the latest version when this document was prepared. Find it available for download here.</p> <p>Install it, and allow it to add to your PATH environment variable.</p>"},{"location":"docs/build/BUILD_WIN32/#perl","title":"Perl","text":"<p>Perl is used to build OpenSSL. ActiveState Perl is the recommended Perl engine. Version 5.26.3 was used for prepare this document. ActivePerl can be found here.</p> <p>Install it. As usual, adding this to the PATH will make your life easier. </p>"},{"location":"docs/build/BUILD_WIN32/#nasm","title":"NASM","text":"<p>NASM is also used to build some pieces of OpenSSL. A direct link to the version used to prepare this document is here.</p> <p>The installer seems to not add to the PATH environment variable. You should do this manually.</p>"},{"location":"docs/build/BUILD_WIN32/#openssl","title":"OpenSSL","text":"<p>OpenSSL, Boost, and libcurl are libraries compiled into the eventual BitShares-Core application. The instructions from here on can be modified to fit your situation. The <code>VS2015 x64 Native Tools command prompt</code> was used as <code>Administrator</code> to run these commands.</p> <p>Advice: To make life easier, you may wish to make a folder called \"Development\", where your compilation work can be kept. Within \"Development\", make a folder called \"cpp\" where you do everything c++ related. From there, you can type:</p> <p><code>git clone https://github.com/openssl/openssl</code></p> <p>This will pull the latest source code for OpenSSL to your machine. Since I do not care to put experimental versions of libraries into BitShares, I then get a more stable version and compile by typing the following commands:</p> <pre><code>cd openssl\ngit checkout tags/OpenSSL_1_1_1b\nperl ./Configure VC-WIN64A no-shared\n</code></pre> <p>This may give an error about not having nmake.exe or dmake.exe in your PATH. If so, do not worry. If you can run nmake from this directory, you will be fine. Now type the following commands</p> <pre><code>nmake\nnmake install\n</code></pre> <p>By default, this will put OpenSSL in your C:\\Program Files\\OpenSSL directory.</p>"},{"location":"docs/build/BUILD_WIN32/#boost","title":"Boost","text":"<p>Return to your C:\\Development\\cpp directory (\"cd ..\" should get you there), then clone and compile the boost library by typing the following commands:</p> <pre><code>git clone https://github.com/boostorg/boost\ncd boost\ngit checkout tags/boost-1.69.0\ngit submodule update --init --recursive\nbootstrap.bat\nb2 --prefix=c:\\Development\\cpp\\boost169 --toolset=msvc variant=release threading=multi address-model=64 install\n</code></pre> <p>Note that if you have more than one msvc compiler installed, you will need to modify the <code>toolset</code> parameter.</p> compiler toolset parameter Visual Studio 2015 msvc-14.0 Visual Studio 2017 msvc-14.1 Visual Studio 2019 msvc-14.2"},{"location":"docs/build/BUILD_WIN32/#libcurl","title":"libcurl","text":"<p>Return to your C:\\Development\\cpp directory and type:</p> <pre><code>git clone https://github.com/curl/curl\ncd curl\ngit checkout tags/curl-7_64_1\nbiuldconf.bat\nmkdir curl-build\ncd curl-build\ncmake -G \"Visual Studio 16 2019\" -A x64 -DCMAKE_USE_OPENSSL=ON -DCURL_DISABLE_FTP=ON -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_TELNET=ON -DCURL_DISABLE_DICT=ON -DCURL_DISABLE_FILE=ON -DCURL_DISABLE_TFTP=ON -DCURL_DISABLE_LDAPS=ON -DCURL_DISABLE_RTSP=ON -DCURL_DISABLE_POP3=ON -DCURL_DISABLE_IMAP=ON -DCURL_DISABLE_SMTP=ON -DCURL_DISABLE_GOPHER=ON -DCURL_STATICLIB=ON ..\\\ncmake --build . --target install --config Release\n</code></pre>"},{"location":"docs/build/BUILD_WIN32/#bitshares-core","title":"Bitshares Core","text":"<p>Return once again to your C:\\Development\\cpp directory and type:</p> <pre><code>git clone https://github.com/bitshares/bitshares-core\ncd bitshares-core\ngit submodule update --init --recursive\ncmake -G \"Visual Studio 16 2019\" -A x64 -DBOOST_ROOT=c:\\Development\\cpp\\boost169 -DCURL_STATICLIB=ON -DCURL_LIBRARY=\"C:\\Program Files\\CURL\\lib\\libcurl_imp.lib\" -DCURL_INCLUDE_DIR=\"C:\\Program Files\\CURL\\include\" -DOPENSSL_CONF_SOURCE=\"C:\\Program Files\\Common Files\\SSL\\openssl.cnf\"\ncmake --build . --target install --config Release\n</code></pre> <p>Upon success, you will have the applications compiled. You can find the application \"witness_node\" at <code>c:\\Development\\cpp\\bitshares-core\\programs\\witness_node\\witness_node.exe</code>. The application \"cli_wallet\" can be found at <code>c:\\Development\\cpp\\bitshares-core\\programs\\cli_wallet\\cli_wallet.exe</code>.</p>"},{"location":"docs/build/BUILD_WinDevEnv/","title":"BUILD WinDevEnv","text":"<p>============================ Windows development environment setup and build instruction</p> <p>This is an informal build environment setup instruction, it is not recommended to apply in production.</p>"},{"location":"docs/build/BUILD_WinDevEnv/#prerequisites","title":"Prerequisites","text":"<ul> <li>64 bit windows operating system</li> <li>Microsoft Visual C++ 2015 Update 1, download address can be found at https://gist.github.com/CHEF-KOCH/ebd07873bb4b343613db (the community edition will work, Visual Studio 2019 may not work, other versions may or may not work)</li> <li>git for windows (Git-2.18.0-64-bit)</li> <li>cmake (cmake-3.12.1-win64-x64)</li> </ul> <p>Any other version of the software listed above is not used nor tested, but can still be used on your own risk. To make things easier, we suggest you keep all the default settings in the install process and add both git and cmake into your PATH. </p>"},{"location":"docs/build/BUILD_WinDevEnv/#download-and-install-libraries","title":"Download and install libraries","text":"<ol> <li>boost 1.65.1 https://sourceforge.net/projects/boost/files/boost-binaries/1.65.1/boost_1_65_1-msvc-14.0-64.exe/download</li> <li>Openssl 1.0.2p  https://slproweb.com/download/Win64OpenSSL-1_0_2p.exe</li> </ol> <p>You do can download the source and compile the two libraries above, it will take more time and return more safety/security. Again, we still suggest you to keep all the default settings in the install process. Any changes you made here, you have to make the corresponding changes to cmake command we use later.</p>"},{"location":"docs/build/BUILD_WinDevEnv/#down-and-compile","title":"Down and compile","text":"<ol> <li>cURL, we do not find any usable prebuilt cURL, so we have to compile it from source. Open a command window with administrator right, and run </li> </ol> <pre><code>git clone https://github.com/curl/curl.git\ncd curl\nbuildconf.bat\ncmake -G \"Visual Studio 14 2015 Win64\" -DCMAKE_USE_OPENSSL=ON -DCURL_DISABLE_FTP=ON -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_TELNET=ON -DCURL_DISABLE_DICT=ON -DCURL_DISABLE_FILE=ON -DCURL_DISABLE_TFTP=ON -DCURL_DISABLE_LDAPS=ON -DCURL_DISABLE_RTSP=ON -DCURL_DISABLE_POP3=ON -DCURL_DISABLE_IMAP=ON -DCURL_DISABLE_SMTP=ON -DCURL_DISABLE_GOPHER=ON -DCURL_STATICLIB=ON -DOPENSSL_CONF_SOURCE=\"C:\\OpenSSL-Win64\\bin\\openssl.cfg\"\ncmake --build . --target install --config Release -j 3\n</code></pre> <p>The command above will compile the libcURL and install it to the C:\\Program Files\\CURL directory.</p> <ol> <li>compile the bitsares-core. In the command windows we opened before, run </li> </ol> <pre><code>git clone https://github.com/bitshares/bitshares-core.git\ngit checkout develop\ngit submodule update --init --recursive\ncmake  -G \"Visual Studio 14 2015 Win64\" -DBoost_USE_STATIC_LIBS=ON -DOPENSSL_CONF_SOURCE=\"C:\\OpenSSL-Win64\\bin\\openssl.cfg\" -DCURL_INCLUDE_DIR=\"C:\\Program Files\\CURL\\include\" -DCURL_LIBRARY=\"C:\\Program Files\\CURL\\lib\\libcurl_imp.lib\" -DCURL_STATICLIB=ON\ncmake --build . --target install --config Release -j 3\n</code></pre> <p>If you want to dynamically link to cURL, you need to drop the -DCURL_STATICLIB=ON argument. The number after -j in the last command is recommended set to N-1, where N is your computer's core number.</p>"},{"location":"docs/build/Building-on-OS-X/","title":"Building on OS X","text":"<p>The document is relocated at [[Building-on-macOS]].</p>"},{"location":"docs/build/Building-on-macOS/","title":"BitShares-Core Build Instructions for macOS","text":"<ol> <li> <p>Install XCode and its command line tools by following the instructions here: https://guide.macports.org/#installing.xcode.     In OS X 10.11 (El Capitan) and newer, you will be prompted to install developer tools when running a developer command in the terminal. This step may not be needed.</p> </li> <li> <p>Install Homebrew by following the instructions here: http://brew.sh/</p> </li> <li> <p>Initialize Homebrew:    <code>brew doctor    brew update</code></p> </li> <li> <p>Install dependencies:    <code>brew install cmake git autoconf automake libtool</code></p> </li> </ol> <p>Note:    As mentioned elsewhere, BitShares-Core depends on the third-party libraries \"Boost\" and \"OpenSSL\". These libraries need to be in certain version ranges. At the moment, Boost needs to be between 1.58 and 1.74. OpenSSL needs to be in the 1.0.x or 1.1.x range.</p> <ul> <li> <p>Boost:      It's likely that the default boost version in brew has issues or not yet supported by us. If you just want to build BitShares-Core, use an older version of boost from our own HomeBrew Tap:      <code>brew install bitshares/boost/boost@1.69</code>      If necessary, link it as the default boost library:      <code>brew link --force --overwrite boost@1.69</code></p> <p>Nevertheless, if you would like to experiment or test newer boost libraries, you can try:  <code>brew install boost</code></p> </li> <li> <p>OpenSSL:      As of writing, the latest OpenSSL in brew is OpenSSL v3, unfortunately it is not supported by us. You may install an older version of OpenSSL with brew:      <code>brew install openssl@1.1</code>      If necessary, link it as the default openssl library:      <code>brew link --force --overwrite openssl@1.1</code></p> </li> <li> <p>Optional. To support importing Bitcoin wallet files:    <code>brew install berkeley-db</code></p> </li> <li> <p>Optional. To use TCMalloc in LevelDB:    <code>brew install google-perftools</code></p> </li> <li> <p>Clone the BitShares-Core repository:    <code>git clone https://github.com/bitshares/bitshares-core.git    cd bitshares-core</code></p> </li> <li> <p>Build BitShares-Core:    <code>git submodule update --init --recursive    cmake .    make</code></p> </li> </ul> <p>Note:    To compile with non-default versions of Boost and/or OpenSSL, we need to tell cmake where these libraries are. Instead of the \"cmake .\" mentioned above, we use (for example):    <code>cmake -DBOOST_ROOT=/usr/local/opt/boost@1.69 -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1 .</code>    and then proceed with the normal    <code>make</code></p>"},{"location":"docs/contributing/Contribution-Guide/","title":"Contribution Guide","text":""},{"location":"docs/contributing/Contribution-Guide/#draft-bitshares-contribution-guidance-using-github","title":"[DRAFT] BitShares Contribution Guidance Using GitHub","text":"<p>This document, as a draft, intends to provide guidance and solicit feedback from Team Members and the Community. It does not intend to be a directive at this time. The goal is to explore, refine and finally define a collaboration framework using GitHub. Provided below are links to sample items for demonstration purposes. After reading the article, you are encouraged to apply the concepts introduced within the Contribution Guide Project for further refinement. Please provide feedback by opening an Issue or commenting therein. Once the Core Team has refined their processes, this document will loose its [DRAFT] status and we apply the concepts throughout the BitShares-Core repo.</p>"},{"location":"docs/contributing/Contribution-Guide/#table-of-contents","title":"TABLE OF CONTENTS","text":""},{"location":"docs/contributing/Contribution-Guide/#introduction","title":"INTRODUCTION","text":"<p>Collaboration within open source projects is key to advancing their development and adoption. GitHub serves as the central repository for code and collaboration today and the intention is to continue using this transparent platform. GitHub provides a flexible platform upon which can craft our framework. Software developers are likely familiar with the concepts of Issues and Comments as provided by GitHub, but perhaps less so in extending them to represent User Stories or Tasks. Labels, Projects and Milestones are other concepts provided by GitHub which allow categorization, organization and prioritization both visually and functionally. These concepts are introduced below and demonstrated to apply them when contributing to the BitShares-Core repository.</p>"},{"location":"docs/contributing/Contribution-Guide/#concepts","title":"CONCEPTS","text":"<p>For the benefit of a reader unfamiliar with the GitHub platform, the concepts below are offered in contextual ordering rather than alphabetically. The concepts intend to build upon each other as the reader progresses.</p> <ul> <li>Agile software development</li> </ul> <p>Agile software development is is an umbrella term for a set of methods and practices based on the values and principles expressed in the Agile Manifesto. Solutions evolve through collaboration between self-organizing, cross-functional teams utilizing the appropriate practices for their context.</p> <p>Please note: The BitShares Core Team intends to adopt agile principals where appropriate, but not be strictly held to them. </p> <ul> <li>GitHub Repository</li> </ul> <p>GitHub is a software platform for teams to organize their efforts. This is the highest level concept discussed herein. The reader finds themselves within the <code>BitShares-Core</code> repository. The concepts offered and their application are intended to be limited to this repository only.</p> <ul> <li>Issues</li> </ul> <p>An <code>Issue</code> as implemented within the GitHub platform is quite broad, leaving open to the development team how to use them for collaboration. At its core, GitHub is an issue tracker - a collection of tasks, enhancements, bugs and more. <code>Issues</code> are the primary method for communicating ideas within the platform. This is enabled by using various properties and features of Issues including: <code>Title</code>, <code>Description</code>, <code>Comments</code>, <code>Assignees</code>, <code>Labels</code>, <code>Projects</code> and <code>Milestones</code> (read on to learn about these). </p> <ul> <li>Tasks</li> </ul> <p>A <code>Task</code> is a semantic application of an <code>Issue</code> to represent work to be performed within the repository. Typically a <code>Task</code> will be assigned to a <code>Team Member</code>. A <code>Task</code> may be the highest level or a child of <code>Task List</code>, <code>User Story</code> or <code>Epic</code> (see below).</p> <ul> <li>Task List</li> </ul> <p>A <code>Task List</code> is a collection of <code>Issues</code> representing a progression of work to be done. A <code>Task List</code> must be represented within the <code>Description</code> of an <code>Issue</code> using the \"- [ ]\" pattern (dash-space-bracket-space-bracket) to represent an open/unfinished <code>Task</code> and the \"- [x]\" pattern (dash-space-bracket-x-bracket) to represent completed. They can be <code>inline</code> or <code>referential</code>. An <code>inline</code> <code>Task List</code> will contain its elements within the <code>Task</code>, <code>User Story</code> or <code>Epic</code>. A <code>referential</code> <code>Task List</code> will contain references to other <code>Tasks</code> using the hash tag \"#\" followed by the GitHub IssueID assigned when the <code>Issue</code> was created. Note: the <code>Issue</code> being referenced must exist, so when creating a <code>referential</code> <code>Task List</code> one my need to return to update after creating the target <code>Task</code>.      </p> <ul> <li>User Stories</li> </ul> <p>A <code>User Story</code> is an <code>agile software development</code> concept used to represent a requirement of the system.</p> <ul> <li>Labels</li> <li>Projects</li> <li>Milestones</li> <li>Wiki</li> </ul>"},{"location":"docs/contributing/Contribution-Guide/#contributing-and-applying-the-above-concepts","title":"Contributing and Applying the Above Concepts","text":""},{"location":"docs/contributing/Git-Flow/","title":"Development / Release / Bugfix Workflows","text":"<p>The purpose of this document is to describe and define how changes flow into our code and through the various stages of development until it finally goes into production.</p> <p>The general idea is based on git-flow.</p> <p>For our purposes, the general concept behind gitflow has been extended to allow for these additional needs:</p> <ol> <li>We have two different types of releases, mainnet and testnet, with a master-like branch for each one.</li> <li>We have to distinguish consensus-breaking changes (aka hardforks) from    non-consensus-breaking changes.</li> </ol>"},{"location":"docs/contributing/Git-Flow/#goals-to-achieve","title":"Goals To Achieve:","text":"<ol> <li>Maintain two independent release versions, testnet and mainnet.</li> <li>Decouple development from releases, i. e. maintain the ability to create    emergency bugfixes for current release without bringing incomplete new    features into production.</li> <li>Separate consensus-related changes from non-consensus-related changes.</li> <li>Keep development branches compatible with mainnet.</li> </ol>"},{"location":"docs/contributing/Git-Flow/#basic-rules","title":"Basic Rules:","text":"<ol> <li>Development always happens in private feature-branches. The only exception is    a change that must be distinguished in the destination branch (typical    example: hardfork date in testnet).</li> <li>Features are merged after they are reasonably complete, i. e. they come with    unit tests that provide reasonable coverage and do not report any errors.<ol> <li>\"Completed\" features that are not consensus-related are merged into    \"develop\".</li> <li>\"Completed\" features that are consensus-related are merged into the    \"hardfork\" branch, with a hardfork date in the far future.</li> <li>All merges into \"develop\" or \"hardfork\" are performed via github PR's and    require review and approval from core developers (if the PR is created    by a core dev at least one other core dev must review and approve).</li> <li>To maintain a clean history and make reviewing and merging easier,    feature branches must be rebased onto current \"develop\" (or \"hardfork\")    before creating a PR.</li> <li>Merges are always done as real merges, not as fast-forwards, and not    squashed.</li> <li>For each branch, maintain a correct <code>sonar.branch.target</code> value in the    <code>sonar-project.properties</code> file until we develop a script to maintain it.</li> </ol> </li> <li>Core developers coordinate regular merges from \"develop\" into \"hardfork\".</li> <li>Both \"develop\" and \"hardfork\" should always remain compatible with mainnet,    i. e. a full replay must be possible.</li> <li>the planned version is set in the <code>sonar-project.properties</code> file</li> </ol>"},{"location":"docs/contributing/Git-Flow/#how-to-create-a-release","title":"How To Create a Release","text":"<p>For a release,</p> <ol> <li>Check and bump stuff</li> <li>Check whether need to bump <code>DB_VERSION</code> to force a replay after upgraded:    if there is a data schema change, or logic change that affects historical    data, the answer is yes.</li> <li>FC version usually has been bumped already during development, but it    doesn't harm if check again.</li> <li>Check version in the <code>sonar-project.properties</code> file</li> <li>May need to bump baseimage version in Dockerfile</li> <li>Check reflection with <code>doxygen &amp;&amp; programs/build_helpers/check_reflect.py</code></li> <li>A \"release\" branch is created based on \"develop\" or \"hardfork\".</li> <li>A draft of release notes is prepared as a Github issue, with links to issues    and pull requests, and info that users might have interest in.</li> <li>The \"release\" branch is merged into \"testnet\".</li> <li>For a hardfork release, the hardfork date is adapted directly on the    testnet branch.</li> <li>The \"testnet\" branch is tagged as test-version. A pre-release is    created for that tag, with a link to the draft release notes.</li> <li>Create binaries for Linux, macOS and Windows with      bitshares-gitian and      upload them to the pre-release page.<ul> <li>Note 1: some license files are stored in bitshares-gitian. If any of    them changed, need to update the copy in bitshares-gitian.</li> <li>Note 2: we may like to update libraries in bitshares-gitian, E.G. OpenSSL,    zlib and Curl may have new releases.</li> <li>Note 3: create a new branch in bitshares-gitian for each new release or    pre-release of bitshares-core.</li> </ul> </li> <li>A Docker image should be built and pushed to Docker Hub automatically      by Github Actions. Check it.      Link: https://hub.docker.com/r/bitshares/bitshares-core</li> <li>Bugfixes for the release are created on the \"release\" branch and merged into    \"testnet\". Additional test-versions are tagged as needed.    Additional pre-releases too.</li> <li>After sufficient testing, the release must be approved. In the case of a    hardfork release, witness approval is required.</li> <li>After approval, a version will be decided. If it is a hardfork release,    the mainnet hardfork date is decided and set in the \"release\" branch.</li> <li>Bump docs sub-module which links to wiki in the \"release\" branch.</li> <li>Update Doxyfile with the planned version in the \"release\" branch.</li> <li>Update CONTRIBUTORS.txt in the \"release\" branch according to instructions     inside. Update the CONTRIBUTORS.txt file in FC too, and bump FC if needed.</li> <li>The \"release\" branch is merged into \"master\", and a version tag is created     on \"master\". Create the tag by git command line and push to github.     This is needed for Docker to catch the new tag.<ul> <li>Note 1: normally, a docker build will be triggered automatically in Github   Actions after the tag is pushed, and a new Docker image will be pushed to   Docker Hub when it's done.</li> <li>Note 2: The project description on Docker Hub is not updated automatically.   Edit it manually (copy and modify from README.md) if needed.</li> </ul> </li> <li>Create binaries for Linux, macOS and Windows with     bitshares-gitian.<ul> <li>Note 1: some license files are stored in bitshares-gitian. If any of   them changed, need to update the copy in bitshares-gitian.</li> <li>Note 2: we may like to update libraries in bitshares-gitian, E.G. OpenSSL,   zlib and Curl may have new releases.</li> <li>Note 3: create a new branch in bitshares-gitian for each new release or   pre-release of bitshares-core.</li> </ul> </li> <li>Create the release on Github by attaching the prepared release notes to the     tag, attach the binaries and add checksums of the binaries in the release     notes.</li> <li>Update online code documentation by using updated <code>Doxyfile</code> as config file     in the <code>master</code> branch.<ul> <li>Send pull request to https://github.com/bitshares/doxygen.bitshares.org with   new content in html format.</li> <li>Note: the HTML files are hosted on Github Pages, thus the <code>CNAME</code> file in     the target directory need to be kept. </li> <li>Note: need to edit <code>index.html</code>, remove the \"Build Status\" CI badges.</li> <li>Send pull request to https://github.com/bitshares/dev.bitshares.works with   new content in xml format.</li> </ul> </li> <li>Update date of last core download page of bitshares.org site.</li> <li>The \"release\" branch is merged back into \"develop\" and \"hardfork\".</li> <li>The \"release\" branch is merged into \"testnet\". This will produce a merge     conflict for the hardfork dates, which must be resolved without changing the     testnet hardfork date.</li> </ol> <p>Note: Solving conflicts by github(web) will merge branches in unintended directions. Avoid solving this way, merge and resolve conflicts manually through the git command line. Conflicts generally occur when merging release to testnet.</p> <p>Note 2: Follow command line github suggestion to resolve conflicts but at the end of the process you will not have permission to merge directly to <code>testnet</code>, never push the fix to <code>release</code>. Create a new branch and push there, then create a new pull request between <code>testnet</code> and <code>new_branch</code>, merge <code>new_branch</code> to <code>testnet</code> and <code>release</code> will be automatically added to the merge.</p> <p>Note 3: When creating tag for testnet do it from the command line with <code>git tag</code>. Github don't have the option to create a tag without a release.</p> <p>Note 4: Don't change tags on github. This is a source of confusion, and of irreproducible bug reports. Making a new one is better (ex: test-3.0.1).</p> <p>Note 5: Do not mark mainnet releases as \"pre-release\" unless there is a new version coming immediately after. Never upgrade \"pre-release\" to \"release\" as new emails to subscribers will not be sent when doing so.</p>"},{"location":"docs/contributing/Git-Flow/#how-to-create-an-emergency-fix","title":"How To Create an Emergency Fix","text":"<p>An emergency fix may become necessary when a serious problem in mainnet is discovered. The goal here is to fix the problem as soon as possible, while keeping the risk for creating additional problems as low as possible.</p> <p>First of all, the problem must be analyzed and debugged. This happens, naturally, directly on the release version.</p> <p>Presumably the developer who creates the fix will work on his private master branch. That is OK. But for publishing the fix, the following steps should be taken:</p> <ol> <li>Find the version of the \"release\" branch that was merged into \"master\"    when creating the broken release version, name it \"old-release\".</li> <li>The fix is applied to \"old-release\" via pull requests.</li> <li>The new \"old-release\" branch (with the fix) is merged into \"master\", and    a version tag is created on \"master\".</li> <li>A new Docker image will be built and pushed to Docker Hub automatically.</li> <li>Witnesses update to the new version, and production continues.</li> <li>A unit test is created on the original \"old-release\" (without the fix)    that reproduces the problem.</li> <li>The two \"old-release\" branches (one with the fix and the other with the    unit test) are merged, and it is verified that the fix resolves the    problem, by running the unit test.</li> <li>Follow the normal release workflow to create a release, upload binaries,    update docs and etc.</li> <li>The new \"old-release\" branch (with both the fix and the unit test) is    merged into \"testnet\". Follow the normal workflow to create a testnet    release.</li> <li>The new \"old-release\" branch (with both the fix and the unit test) is    merged back into \"develop\", and if needed, into \"hardfork\" and the    current \"release\".</li> </ol>"},{"location":"docs/contributing/Git-Flow/#how-to-update-the-readmemd","title":"How To Update the README.md","text":"<p>In general we want changes in the README to be visible fast in <code>master</code>.</p> <ol> <li>If the <code>release</code> branch contains changes that we don't want to merge into    <code>master</code> yet, create a new branch from the version of the latest <code>release</code>    branch that was merged into <code>master</code>, and update the README.md file in the    new branch via pull requests. Otherwise, update the README.md file in the    <code>release</code> branch via pull requests.</li> <li>If created a new branch in the last step, merge the new branch into <code>release</code>    and <code>master</code>. Otherwise, merge <code>release</code> into <code>master</code>.</li> <li>Merge <code>release</code> back into <code>develop</code>.</li> <li>Merge <code>release</code> into <code>testnet</code> and/or merge <code>develop</code> into <code>hardfork</code> if    changes need to be visible in the branches, or wait until these merges    occur naturally.</li> </ol>"},{"location":"docs/contributing/Style-Guide/","title":"Style Guide","text":""},{"location":"docs/contributing/Style-Guide/#draft-bitshares-coding-style-guide","title":"DRAFT -- BitShares Coding Style / Guide","text":""},{"location":"docs/contributing/Style-Guide/#standardization","title":"Standardization","text":"<p>This Cording Style Guide are specific to BitShares-Core codebase. It will save time to the programmer and reviewer.</p>"},{"location":"docs/contributing/Style-Guide/#discussion","title":"Discussion","text":"<ul> <li>Define coding style guidelines #1318</li> <li>Additional Context (optional)</li> <li>https://isocpp.org/wiki/faq/coding-standards</li> </ul>"},{"location":"docs/contributing/Style-Guide/#general","title":"General","text":"<ul> <li>Use <code>FC_ASSERT</code> instead of <code>assert</code> (reason: <code>assert()</code> checks are executed conditionally depending on compile-time settings, which endangers consensus)</li> <li>Use <code>using</code> instead of <code>typedef</code></li> </ul>"},{"location":"docs/contributing/Style-Guide/#formatting","title":"Formatting","text":"<ul> <li>Maximum line length: 118 (*That's what you can see on github without side-scrolling)</li> <li>newline at the end of each file.</li> <li>Avoid multiple empty new lines in code, in general 1 empty line is enough to separate blocks of code.</li> <li>Long calls, definitions or declarations are recommended to use this style: 496c622</li> <li>TBD spaces</li> </ul>"},{"location":"docs/contributing/Style-Guide/#discussion-spaces-and-padding","title":"Discussion - spaces and padding","text":"<ul> <li>3 spaces indentation<ul> <li>Comment</li> </ul> </li> <li>4 spaces of indentation, and do away with padding the insides of parentheses.<ul> <li>Comment</li> </ul> </li> <li>for function and method calls, there is no space between function name and opening parenthesis</li> <li>for control statements there is a space between statement and opening parenthesis</li> </ul> <p>Suggestions - We should    - come to a consensus regarding formatting rules    - find a tool that can do it automatically    - make a big whitespace-only change</p>"},{"location":"docs/contributing/Style-Guide/#comments","title":"Comments","text":""},{"location":"docs/contributing/Style-Guide/#-remove-commented-code-comments-can-be-made-when-code-seems-not-enough-to-explain-an-idea-that-comments-are-generally-used-in-test-cases-and-explain-in-plain-english-what-is-happening-commented-code-should-not-be-submitted-just-delete-it","title":"- Remove commented code. Comments can be made when code seems not enough to explain an idea, that comments are generally used in test cases and explain in plain English what is happening. Commented code should not be submitted, just delete it.","text":""},{"location":"docs/contributing/Style-Guide/#naming","title":"Naming","text":""},{"location":"docs/contributing/Style-Guide/#-method-names-should-be-all-lowercase-with-_-as-word-separator-1271-comment","title":"- Method names should be all lowercase with \"_\" as word separator: #1271 (comment)","text":""},{"location":"docs/contributing/Style-Guide/#scoping","title":"Scoping","text":"<ul> <li>lambda expressions must capture variables explicitly if what you need is not too many.</li> <li>In a huge refactoring please do it in small steps in individual commits that are easily verifiable. This makes the reviewer life a bit easier. - From: #1413 (comment)</li> <li>Avoid global variables. From #1324 (comment)</li> </ul>"},{"location":"docs/contributing/Style-Guide/#classes","title":"Classes","text":""},{"location":"docs/contributing/Style-Guide/#-","title":"-","text":""},{"location":"docs/contributing/Style-Guide/#functions","title":"Functions","text":""},{"location":"docs/contributing/Style-Guide/#-when-defining-a-function-should-always-be-in-a-new-line","title":"- When defining a function:  <code>{</code> should always be in a new line.","text":""},{"location":"docs/contributing/Style-Guide/#exception-rules","title":"Exception Rules","text":""},{"location":"docs/contributing/Style-Guide/#-_1","title":"-","text":""},{"location":"docs/contributing/Style-Guide/#architecture","title":"Architecture","text":"<ul> <li>Create/modify/delete of the database inside operation evaluator must be done in <code>do_apply</code> and never in <code>do_evaluate</code> - From #1449 (comment) </li> <li>When new fields are added or removed to objects; a bump of the database is needed. From: #1449 (review) </li> </ul>"},{"location":"docs/contributing/Style-Guide/#pull-requests","title":"Pull Requests","text":"<ul> <li>Pull requests should add/modify/delete the minimum amount code possible to develop 1 and only 1 feature or concept. From #1467 - Pull doing several stuff at once.</li> <li>Pull requests in bitshares can only be made against 2 branches: <code>develop</code> if there is a non consensus related change or <code>hardfork</code> if it is modifying consensus.</li> </ul>"},{"location":"docs/dev/DEV_README/","title":"DEV README","text":""},{"location":"docs/dev/DEV_README/#how-to-use-fc-async-to-do-recurring-tasks","title":"How to use fc async to do recurring tasks","text":"<pre><code>_my_task = fc::async( callable, \"My Task\" );\n_my_task = fc::schedule( callable, \"My Task 2\", exec_time );\n</code></pre>"},{"location":"docs/dev/DEV_README/#stuff-to-know-about-the-code","title":"Stuff to know about the code","text":"<p><code>static_variant&lt;t1, t2&gt;</code> is a union type which says \"this variable may be either t1 or t2.\"  It is serializable if t1 and t2 are both serializable.</p> <p>The file <code>operations.hpp</code> documents the available operations, and <code>database_fixture.hpp</code> is a good reference for building and submitting transactions for processing.</p> <p>Tests also show the way to do many things, but are often cluttered with code that generates corner cases to try to break things in every possible way.</p> <p>Visitors are at the end of <code>operations.hpp</code> after the large typedef for <code>operation</code> as a <code>static_variant</code>.  TODO:  They should be refactored into a separate header.</p>"},{"location":"docs/dev/DEV_README/#downcasting-stuff","title":"Downcasting stuff","text":"<ul> <li>You have an <code>object_id_type</code> and want to downcast it to a <code>key_id_type</code> : <code>key_id_type( object_id )</code></li> <li>You have an <code>operation_result</code> and want to downcast it to an <code>object_id_type</code> : <code>op_result.get&lt;object_id_type&gt;()</code></li> <li>Since <code>operation_result</code> is a <code>static_variant</code>, the above is also how you downcast <code>static_variant</code></li> </ul>"},{"location":"docs/dev/DEV_README/#debugging-fc-exceptions-with-gdb","title":"Debugging FC exceptions with GDB","text":"<ul> <li><code>catch throw</code></li> </ul>"},{"location":"docs/dev/design-issues/","title":"Design issues","text":""},{"location":"docs/dev/design-issues/#purpose","title":"Purpose","text":"<p>This is a list of some design issues based on my (@theoreticalbts) review of White Rabbit.  Feel free to add or delete from this.</p>"},{"location":"docs/dev/design-issues/#sub-objects","title":"Sub-objects","text":"<p>EDIT:  Seems like this has already implemented as \"ID spaces\".  Keeping this information here so it can eventually be incorporated into a spec.</p> <p>Several objects such as <code>delegate_vote_object</code> (keeping track of vote totals for a delegate) and <code>balances</code> (keeping track of balances for an account) are kept in their own object ID.  This is not necessary for chain semantics, rather it is optimizing the memory usage of the undo state.</p> <p>I think it is better to avoid splitting out these sub-objects in the blockchain specification, instead have a separate \"local object ID space\" local to each node where sub-objects are kept.  So from the blockchain spec level, a create account operation says \"create an account object including balances.\"  But from the blockchain implementation level, a create account operation says \"create an account object in the blockchain ID space, then create a balance object in the local ID space, then put a link the blockchain object's balances data field pointing to the local object.\"  Changing the balance would then request an immutable handle to the account object, through which you could get the local ID, then request a mutable handle to the balances object.  Achieving the desired result of having a balance change only require the undo state to copy the balances instead of the whole account object.</p> <p>The strength of implementing this with a local object ID space is that we can later split things out into sub-objects, or join sub-objects into their containing object, without a hardfork.  Since the local ID's are never exposed outside the local node's implementation of the blockchain.</p>"},{"location":"docs/dev/design-issues/#tx-size-optimizations-for-tapos-validation","title":"Tx size optimizations for TaPoS validation","text":"<p>EDIT:  I (@theoreticalbts) have taken a crack at this, it compiles but is not yet tested.</p> <p>We have this:</p> <pre><code>    struct transaction \n    {\n        fc::time_point_sec expiration;\n        uint32_t           ref_block_num    = 0;\n        uint32_t           ref_block_prefix = 0;\n        vector&lt;operation&gt;  operations;\n     };\n</code></pre> <p>First, we should simply include the full block hash at height <code>ref_block_num</code> in the computation of <code>digest()</code>, thus the tx will fail to validate unless the block ID at the given height is a match.  Allowing to completely eliminate <code>ref_block_prefix</code> and also avoiding the potential security holes from using only 32 bits in <code>ref_block_prefix</code> field.</p> <p>Second, the <code>ref_block_num</code> itself can be reduced to 16 bits as follows:  Simply specify the low 16 bits of the reference block height, and only validate against the most recent block whose low 16 bits match.  A more recent block whose block height has the same low 16 bits as the reference block height cannot appear until 64K blocks after the reference block, in which case the transaction is over a day old and will fail due to being expired (unless we decrease block time below 2 seconds).</p>"},{"location":"docs/dev/design-issues/#processed_transaction-has-no-purpose","title":"processed_transaction has no purpose","text":"<p>The <code>processed_transaction</code> is included in a block.  This is too much data.  Since object ID's are assigned sequentially and deterministically, this is totally redundant information.  A single note specifying the first ID to be allocated in the block header would suffice, but even that much is redundant.  Once we have over a couple million objects, storing the object ID's will inflate all object creation ops by four bytes totally unnecessarily.</p>"},{"location":"docs/dev/design-issues/#block-header-does-not-support-spv","title":"Block header does not support SPV","text":"<p>We should be able to verify blockchain using headers only.  Thus we need to have hash of tx's in block header instead of <code>vector&lt;processed_transaction&gt;</code>.</p>"},{"location":"docs/dev/design-issues/#cache-block-hashes","title":"Cache block hashes","text":"<p>We need some in-memory structure for a block that caches block and transaction hashes instead of recomputing it every time we want it (e.g. every transaction must compute reference block hash).  This means maybe we should have an in-memory block / tx type distinct from the on-the-wire block / tx type, which annotates it with extra information like the hash.  And maybe operation results as well, although in that case, the same tx on different forks would have to have a different object for each fork.</p>"},{"location":"docs/dev/design-issues/#limit-delegate-turnover-rate-to-support-spv","title":"Limit delegate turnover rate to support SPV","text":"<p>We should think about hard coding a limitation for the number of delegates that can change in a round.  I.e. if more than 25 new delegates in a round, only add the 25 most popular new delegates, and only remove the 25 least popular old delegates.  Limited rate of delegate turnover allows us to use SPV with DPOS.</p>"},{"location":"docs/dev/design-issues/#allow-backreferences-to-object-ids-in-transaction","title":"Allow backreferences to object ID's in transaction","text":"<p>We need a way for a transaction to refer to objects it has newly allocated.   Let's reserve low object ID's for this purpose (perhaps 0-127, 0-255, or 0-1023).  So newly created objects start out with a low ID, remain there for the duration of the transaction, and are then moved to their permanent (high) ID.</p> <p>It may shorten some transactions to also temporarily (within the transaction) assign low ID's to an object that is referenced in a transaction.  Thus, a transaction doing multiple actions on object #2,941,832 would only have the 4-byte varint encoding once; subsequent references to 2,941,832 within that transaction would instead call it object #5 (if objects 0-4 were already taken by other objects referenced by the same transaction).</p>"},{"location":"docs/dev/design-issues/#voting","title":"Voting","text":"<p>Holders of any asset should be allowed to vote for object ID's representing candidates.  A delegate is a candidate, but we can define other candidate types as well.  All we need in the candidate structure is a <code>map&lt;asset_id, vote_count&gt;</code>.  If we're willing to restrict each candidate object to only being allowed to run in elections for a single asset, we'd effectively be restricting the <code>map</code> to contain at most a single entry, and thus could simply replace it with an <code>asset_id</code> and <code>vote_count</code>.</p> <p>By removing restrictions on the voting system and leveraging the general architecture of the object graph, it will now be simple to implement voting on proposals.</p> <p>In addition, as well as single-sig and multi-sig, we can now allow a new signature type for \"the delegate(s) appointed by the owners of X\", where X is any asset.  This allows systems for distributed escrow and ultimately building of new DPOS chains with their own delegates as apps on our platform.</p>"},{"location":"docs/dev/design-issues/#thoughts-on-prices","title":"Thoughts on prices","text":"<p>Prices need overhauled.  Having a <code>price</code> be decimal in BitShares is a pain point.  If you do that, you're asking for rounding errors -- and we sure have plenty.  Instead, <code>price</code> should be a rational number.</p> <p>IMHO (M = @theoreticalbts), an offer should specify <code>have</code> and <code>want</code> instead of <code>quote</code> and <code>base</code>.  Then it stands for the half-open interval <code>(want / have, infinity)</code>.  I.e. if Alice has 10000 BTS and wants $90, then Alice will accept an exchange rate of $0.009 / BTS or more.  If Bob has $100 and wants 10000 BTS, Bob will accept an exchange rate of 100 BTS per dollar or more (i.e. $0.01 / BTS or less).  Two offers can be matched against each other if <code>alice.have.asset_id == bob.want.asset_id</code> and <code>alice.want.asset_id == bob.have.asset_id</code> (i.e. they are on opposite sides of the same market), and <code>alice.want.amount * bob.want.amount &gt;= alice.have.amount * bob.have.amount</code>.  So in our example, the LHS \"want product\" is <code>$90 * 10000 BTS = 900,000 BTS</code> and the RHS \"have product\" is <code>$100 * 10000 BTS = 1,000,000 BTS</code>, so the parties can make a deal.  (The difference between the two is negative if there's a spread, positive if there's an overlap, zero if there's an exact match.)</p> <p>You can create an order list for matching by comparing <code>want / have</code> and sending the smallest list to the top.  I.e. if Charlie has 10000 BTS and wants $95, comparing his offer to Alice's above would require comparing <code>charlie.want / charlie.have</code> to <code>alice.want / alice.have</code>.  The current market engine uses decimal fraction data type, however an exact comparison is also possible:  <code>charlie.want / charlie.have &gt;= alice.want / alice.have</code> iff <code>charlie.want * alice.have &gt;= alice.want * charlie.have</code>.</p> <p>So you can compare orders on the same side of the book by comparing cross products, and check whether orders on opposite sides of the book overlap by comparing the \"want product\" to the \"have product.\"</p>"},{"location":"docs/dev/design-issues/#undoing-indexes","title":"Undoing indexes","text":"<p>This looks like a can of worms:</p> <pre><code>    struct undo_state\n    {\n        object_id_type                         old_next_object_id;\n        map&lt;object_id_type, packed_object&gt;     old_values;\n        map&lt;string,object_id_type &gt;            old_account_index;\n        map&lt;string,object_id_type &gt;            old_symbol_index;\n    };\n</code></pre> <p>The issue here is that you have to CoW the index entries of any indexed object.  This is done by <code>database::index_account</code> and <code>database::index_symbol</code> right now.  Which seems like a lot of boilerplate for adding an additional index.  Is there some way we can reduce the number of places we have to modify the code when adding a new index?</p>"},{"location":"docs/dev/design-issues/#edges-have-no-purpose","title":"Edges have no purpose","text":"<p>I don't see what functionality we gain by having an edge class.  Anything the edge can do, can be done by data object.</p> <p>The one thing the edge provides is an index.  Having app-level transactions automatically indexed by the platform may ease implementation of some apps.  However we can get more general indexing by just letting us have two strings, then they can be indexed by any data (if the indexed field doesn't have to be an ID, it's a little more flexible).  You can use strings as ID's by encoding the ID with big-endian variable length encoding.  The existence and meaning of the account would already be asserted by the publishing transaction's reference block.</p>"},{"location":"docs/dev/design-issues/#should-tx-and-block-have-object-id","title":"Should tx and block have object ID?","text":"<p>Maybe transactions and blocks should have their own ID's.</p>"},{"location":"docs/dev/design-issues/#types","title":"Types","text":"<p>This is just some notes on types.  (This document started out as a spec.)</p> <ul> <li><code>address</code> : An <code>address</code> is computed as <code>ripemd160( sha512( compressed_ecc_public_key ) )</code>.</li> <li><code>asset</code> : An <code>asset</code> is a <code>share_type</code> specifying the amount, and an <code>asset_id_type</code> specifying an asset object ID.</li> <li><code>price</code> : A <code>price</code> specifies an exchange rate being offered.  See \"thoughts on prices\" below for how prices should be overhauled.</li> </ul>"},{"location":"docs/dev/dpos-slot-tickets/","title":"Dpos slot tickets","text":""},{"location":"docs/dev/dpos-slot-tickets/#status","title":"Status","text":"<p>This is my (@theoreticalbts) getting some ideas down on paper regarding DPOS.  It's not really up-to-date with my latest thinking.  So anyone reading this shouldn't take it as a serious proposal -- it's more me thinking out loud.</p>"},{"location":"docs/dev/dpos-slot-tickets/#dpos-slot-tickets","title":"DPOS slot tickets","text":"<p>Now that we are re-visiting the DPOS algorithm for Graphene, I (@theoreticalbts) would like to propose a modification to decentralize with dynamic delegates.  The core of this proposal is an algorithm which results in a delegate having a chance to produce a block proportional to their support (the amount of stake voting for them).</p> <ul> <li>Delegates can have planned downtime without any protocol modifications</li> <li>No fixed number of delegates, fully decentralized</li> <li>The most popular delegates produce most blocks, but even highly unpopular delegates occasionally get to produce a block</li> <li>Delegate ordering can be fixed several minutes ahead of time</li> <li>Efficient implementation via auction protocol</li> <li>Delegates can be required to post a bond which is only returned when they actually publish a block, make downtime unprofitable without huge block rewards</li> </ul> <p>A delegate which produces a block becomes ineligible to produce another block for some cooldown time.</p>"},{"location":"docs/dev/dpos-slot-tickets/#details","title":"Details","text":"<p>At block height <code>h</code>, each node which controls a delegate object locally produces a ticket.  The ticket represents a chance to produce a block of height between <code>h+c</code> and <code>h+d</code> for some blockchain config parameters <code>c</code>, <code>d</code> (e.g. <code>c = 384</code> and <code>d = 416</code>).</p> <p>The ticket's priority is computed as <code>priority = H(random_state, delegate_id, parent_block_hash) * f(support)</code> where <code>support</code> is the votes for the account, <code>random_state</code> is a strong random state (no single previous delegate controls more than a single bit).  The highest priority wins.  The choice of the advantage function <code>f()</code> will be discussed in the next section.</p> <p>Tickets of priority <code>2**(N+64)</code> or more, where <code>N</code> is the number of bits in the hash function, may be published between height <code>h</code> and <code>h+a</code>.  The worst priority of publishable tickets then falls exponentially until <code>h+b</code>, until all tickets are allowed to be published between <code>h+b-a</code> and <code>h+b</code> (where <code>a</code> and <code>b</code> are more config parameters, e.g. <code>a = 128</code>, <code>b = 256</code>).  No tickets are allowed to be published between <code>h+b</code> and <code>h+c</code>.</p> <p>Then for each future slot height, the slot is assigned to the ticket with the winning eligible priority.  A delegate assigned to the block at height <code>z</code> will become ineligible until <code>z+g</code> blocks have passed, where <code>g &gt;= d-c</code> is another config parameter.  (The restriction <code>g &gt;= d-c</code> implies that no ticket can be re-used.) Here is a diagram:</p> <pre><code>produce                better                  ticket was eligible         ticket was eligible         ticket becomes            ticket stops being      earliest time when             latest time when\nticket                 tickets                 to publish for at least     to publish during some      eligible to produce       eligible to produce     delegate would become          delegate would become\n|                      start                   one block regardless        block window of length      a block                   a block                 eligible to produce            eligible to produce\n|                      to become               of its value                a regardless of prio             |                          |                 another block                  another block\n|                      unpublishable                  |                          |                          |                          |                 (with another ticket)          (with another ticket)\n|                          |                          |                          |                          |                          |                          |                          |\n|   ---&gt;---&gt;---&gt;---&gt;---&gt;   |   ---&gt;---&gt;---&gt;---&gt;---&gt;   |                          |    waiting period        |                          |    waiting period        |   ---&gt;---&gt;---&gt;---&gt;---&gt;   |\n|       worse tickets      |       worse tickets      |                          |    makes it harder       |                          |    dictates at what      |      tickets later       |\n|     gradually become     |     gradually become     |                          |    to game RNG           |                          |    point support         |   in the window          |\n|        publishable       |        publishable       |                          |                          |                          |    \"saturates\" and       |   gradually become       |\n|                          |                          |                          |                          |                          |    additional votes      |   eligible to produce    |\n|                          |   ---&gt;---&gt;---&gt;---&gt;---&gt;   |   ---&gt;---&gt;---&gt;---&gt;---&gt;   |                          |                          |    no longer increase    |   again                  |\n|                          |      better tickets      |      better tickets      |                          |                          |    block production      |                          |\n|                          |     gradually become     |     gradually become     |                          |                          |    frequency             |                          |\n|                          |       unpublishable      |       unpublishable      |                          |                          |                          |                          |\n|                          |                          |                          |                          |                          |                          |                          |\n|                          |                          |                          |                          |                          |                          |                          |\n|                          |                          |                          |                          |                          |                          |                          |\n|                          |                          |                          |                          |                          |                          |                          |\n|                          |                          |                          |                          |                          |                          |                          |\nh                         h+a                       h+b-a                       h+b                        h+c                        h+d                       h+c+g                      h+d+g\n</code></pre> <p>If <code>d-c</code> better tickets have been published, the delegate should throw away his ticket to save the publication fee, since he'll be unable to win.</p> <p>As well as a publication fee, a ticket may include a bond requirement, some amount of stake (e.g. 9x the block reward) which is only refunded if the block is produced (or the ticket expires at height <code>h+d</code> without being used to produce a block).  A 9x bond would make it unprofitable to run a delegate that has less than 90% uptime.</p> <p>Delegates should include their secret hash with their ticket.</p> <p>Delegates that are offline are automatically dropped.  All nodes have an opportunity to become a delegate.</p> <p>High priority tickets are only allowed to be published for a window in order to prevent strategically withholding tickets until the last minute.  Each ticket has an <code>a</code> block wide publication window where it must be revealed in order to be valid.  The process is similar to a \"downward\" auction where the auctioneer names a very high figure that is highly unlikely to be paid, then exponentially lowers the bidding level until enough buyers enter to buy all the product for sale.  The \"bidding\" here is not through anything with permanent value, but rather ephemeral priority.</p>"},{"location":"docs/dev/dpos-slot-tickets/#the-advantage-function","title":"The advantage function","text":"<p>The role of <code>f()</code> determines how much support affects the probability of being voted in.  It is clear that <code>f()</code> should be monotonically increasing (greater support always increases probability of a winning ticket).</p> <p>Suppose we two delegates <code>D</code> and <code>D'</code> with support <code>v</code> and <code>v'</code> where <code>v &gt;= v'</code>.  Let us compute the probability that <code>priority(D) &gt;= priority(D')</code>.  A delegate <code>D</code> ticket is uniformly chosen from <code>[0, f(v))</code> and a delegate <code>D'</code> ticket is uniformly chosen from <code>[0, f(v'))</code>.  Delegate <code>D</code> wins if its ticket contains a number greater than <code>f(v')</code>, which happens with probability <code>q = (f(v) - f(v')) / f(v)</code>.  In the remaining <code>1 - q</code> cases, <code>D</code> is uniformly in <code>[0, f(v'))</code> which means it has a <code>50%</code> chance of winning.  Thus the overall probability of winning, <code>p</code>, is:</p> <pre><code>p = q + (1 - q) / 2\n  = q + 1/2 - q/2\n  = (q+1) / 2\n  = ((f(v) - f(v')) / f(v) + 1) / 2\n  = (2*f(v) - f(v')) / (2 * f(v))\n  = 1 - f(v') / (2*f(v))\n</code></pre> <p>Now suppose we want the probability of being chosen to be \"linear\".  This means that we want <code>p / (1-p) = v / v'</code>.</p> <pre><code>p / (1-p) = (1 - f(v') / (2*f(v))) / (f(v') / (2*f(v)))\n          = 2*f(v) / f(v') - 1\n</code></pre> <p>Some numerical experimentation shows that the following choice of <code>f</code>, which I will denote <code>F</code>, results in \"linear\" probability:</p> <pre><code>f(v) = F(v) = (v-1) / 2 + 1\n</code></pre>"},{"location":"docs/dev/quick-tips-for-devs/","title":"Quick Tips for BitShares Developers","text":"<p>This guide is intended for developers who will be using the existing BitShares Core platform.  Detailed documentation can be found at the following resources.</p> <ul> <li>Developer documentation</li> <li>General Documentation</li> </ul> <p>Quick tips for common developer actions are linked to below.</p> <p>Table of Contents</p> <ul> <li>Accounts, Permissions, and Authorities</li> <li>Standard Transactions</li> <li>Proposed Transactions</li> <li>User Issued Assets</li> <li>Vesting Balances</li> <li>Hashed Time-Lock Contracts</li> <li>Software Tools</li> <li>Configuration for Testnet</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#accounts-permissions-and-authorities","title":"Accounts, Permissions, and Authorities","text":"<ul> <li>About Accounts</li> <li>About Account Permissions</li> <li>About Dynamic Account Permissions</li> <li>About Multi-Signature Authorities</li> <li>How to change account authority thresholds (GUI)</li> <li>How to register an account</li> <li>How to import a GUI-wallet account into the CLI-wallet</li> <li>How to generate a random key in the CLI</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#standard-transactions","title":"Standard Transactions","text":"<p>Transactions allow multiple operations to be performed atomically within BitShares</p> <ul> <li>How to construct a transaction in the CLI wallet</li> <li>Tips about transactions</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#proposed-transactions","title":"Proposed Transactions","text":"<p>Proposed transaction are useful for performing actions on the blockchain that require approval of multiple accounts.</p> <ul> <li>About Proposed Transactions</li> <li>How to create a proposed transaction</li> <li>How to approve a proposed transaction</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#user-issued-assets-uia","title":"User-Issued Assets (UIA)","text":"<ul> <li>About User-Issued Assets</li> <li>How to create a UIA in the GUI</li> <li>How to create a UIA in the CLI (Example)</li> <li>How to create parent.child assets</li> <li>How to update an existing UIA</li> <li>How can the issuer issue a UIA</li> <li>How can the issuer retract a UIA</li> <li>How can the issuer burn a UIA (CLI)</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#vesting-balances","title":"Vesting Balances","text":"<ul> <li>About vesting balances</li> <li>Example of vesting balances with CryptoBridge</li> <li>How to create vesting balance</li> <li>How to check a vesting balance</li> <li>Example of supplementing payouts for vesting balances</li> <li>How to claim a vesting balance (CLI)</li> <li>How to claim a vesting balance (GUI Wallet)</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#hashed-time-lock-contracts-htlc","title":"Hashed Time-Lock Contracts (HTLC)","text":"<ul> <li>How to create and redeem an HTLC (CLI)</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#software-tools","title":"Software Tools","text":""},{"location":"docs/dev/quick-tips-for-devs/#api-calls","title":"API Calls","text":"<ul> <li>How to make one-off API calls</li> <li>About Remote Procedure Call API</li> <li>How to subscribe to object data with websockets</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#software-clients-and-libraries","title":"Software Clients and Libraries","text":"<ul> <li>Open Source GUI Wallets</li> <li>Open Source Command Line Wallets<ul> <li>CLI Wallet (C++)</li> <li>Uptick (Python)</li> </ul> </li> <li>Open Source Libraries</li> <li>Open Source Tools</li> </ul>"},{"location":"docs/dev/quick-tips-for-devs/#how-to-configure-software-for-testnet","title":"How to Configure Software for Testnet","text":""},{"location":"docs/dev/quick-tips-for-devs/#reference-wallet","title":"Reference Wallet","text":"<p>The GUI reference wallet, which is also hosted by several parties, can be connected to any testnode under Settings.</p>"},{"location":"docs/dev/quick-tips-for-devs/#command-line-interface-wallet-cli","title":"Command Line Interface Wallet (CLI)","text":"<ul> <li>The CLI Wallet (C++) must<ul> <li>have been built from the testnet branch</li> <li>be configured to point to a public API node by using the <code>-s</code> switch</li> </ul> </li> </ul> <pre><code>cli_wallet -s ws://&lt;HOST_NAME_OR_IP&gt;:&lt;HOST_PORT&gt;\n</code></pre> <p>or if using a secure connection</p> <pre><code>cli_wallet -s wss://&lt;HOST_NAME_OR_IP&gt;:&lt;HOST_PORT&gt;\n</code></pre>"},{"location":"docs/dev/quick-tips-for-devs/#python-wallet","title":"Python Wallet","text":"<p>Uptick is a Python-based CLI tool set for BitShares blockchain.  Documentation can be found here.</p> <p>It can be configured to connect to the public testnet by setting any testnet API node.  For example</p> <pre><code>uptick set node wss://testnet.nodes.bitshares.ws\n</code></pre>"},{"location":"docs/dev/quick-tips-for-devs/#dexbot","title":"DEXBot","text":"<p>DEXBot is a market maker bot that can be configured to point to a testnet API node by leaving it as the only API node in the configuration file.</p>"},{"location":"docs/integration/Monitoring-accounts/","title":"Monitoring accounts","text":"<p>It is recommended that the reader has went through the following introductions:</p> <ul> <li>[[Introduction to Blockchain Objects|Blockchain-Objects]]</li> <li>[[Introduction to Wallet/Node daemons|Wallet_Full-Nodes_Witness_Nodes]]</li> <li>[[Graphene API|API]]</li> <li>[[Websocket Subscriptions|Websocket Subscriptions]]</li> </ul> <p>To monitor accounts, we recommend to use the <code>get_full_accounts</code> call in order to fetch the current state of an account and automatically subscribe to future account updates including balance update.</p> <p>A notification after a transaction would take the form:</p> <pre><code>[[\n    {\n      \"owner\": \"1.2.3184\", \n      \"balance\": 1699918247, \n      \"id\": \"2.5.3\", \n      \"asset_type\": \"1.3.0\"\n    }, \n    {\n      \"most_recent_op\": \"2.9.74\", \n      \"pending_vested_fees\": 6269529, \n      \"total_core_in_orders\": 0, \n      \"pending_fees\": 0, \n      \"owner\": \"1.2.3184\", \n      \"id\": \"2.6.3184\", \n      \"lifetime_fees_paid\": 50156232\n    }\n]]\n</code></pre> <p>Please distinguish transactions from operations: Since a single transaction may contain several (independent) operations, monitoring an account may only require to investigate operations that change the account.</p>"},{"location":"docs/nodes/Delayed-Node/","title":"Delayed Node","text":"<p>The <code>witness_node</code> program now can be used to serve the features that was served by <code>delayed_node</code>.</p>"},{"location":"docs/nodes/Delayed-Node/#configurations","title":"Configurations","text":"<p>To use <code>witness_node</code> as a delayed node, some options are required to be configured appropriately.</p>"},{"location":"docs/nodes/Delayed-Node/#1-disable-p2p-connection","title":"1. Disable P2P connection","text":"<p>Start <code>witness_node</code> with command line option <code>--seed-nodes=\"[]\"</code> and/or <code>--p2p-endpoint=127.0.0.1:0</code>, or configure the options in <code>config.ini</code>:</p> <pre><code>p2p-endpoint = 127.0.0.1:0\nseed-nodes = []\n</code></pre>"},{"location":"docs/nodes/Delayed-Node/#2-enable-delayed_node-plugin","title":"2. Enable delayed_node plugin","text":"<p>Start <code>witness_node</code> with <code>--plugins=\"delayed_node [and other required plugins]\"</code>, or configure it in <code>config.ini</code>:</p> <pre><code>plugins = delayed_node\n</code></pre>"},{"location":"docs/nodes/Delayed-Node/#3-fetch-blocks-from-a-trusted-witness-node-via-rpc","title":"3. Fetch blocks from a trusted witness node via RPC","text":"<p>Start <code>witness_node</code> with <code>--trusted-node=\"ip.address.of.the.witness.node:rpc-port\"</code>, or configure it in <code>config.ini</code>:</p> <pre><code>trusted-node = ip.address.of.the.witness.node:rpc-port\n</code></pre>"},{"location":"docs/nodes/Delayed-Node/#sample-configurations","title":"Sample Configurations","text":"<p>Assuming the RPC endpoint of the trusted node is <code>127.0.0.1:8090</code>, we can have following options in <code>config.ini</code> of a delayed node.</p> <pre><code>p2p-endpoint = 127.0.0.1:0\nseed-nodes = []\nplugins = delayed_node account_history api_helper_indexes\ntrusted-node = 127.0.0.1:8090\n</code></pre>"},{"location":"docs/nodes/Guide-to-setup-personal-nodes/","title":"Run your own decentralised exchange","text":"<p>ihashfury (56)in #bitshares \u2022 9 years ago (edited)</p>"},{"location":"docs/nodes/Guide-to-setup-personal-nodes/#you-can-now-run-your-own-decentralised-exchange-node-and-trade-steem-with","title":"You can now run your own decentralised exchange node and trade STEEM with:","text":"<p>#BTS #BTC #LTC #DOGE #DASH PPC  #ETH NXT  #MUSE NSR NBT EMC EGH  #GOLD #SILVER #USD #EUR #CNY #GBP ...</p> <p>all using a Light Wallet with built-in deposit/withdraw and FIAT gateway.  </p> <p> </p> <p>A few steps will have you up and running. The system uses a Light Wallet which can connect to trusted secure servers or your own local blockchain (run from the command line).</p> <p>**P2P Decentralised Exchange Node setup for Ubuntu x64 - ( copy and paste to your terminal )  </p> <p>You can run on your own computer, a local server, VPS or VirtualBox.**</p> <pre><code>### 1. Download the software to build for Ubuntu Linux x64 using git:\n\n# update your system and install ntp\nsudo apt-get update &amp;&amp; sudo apt-get -y upgrade\nsudo apt-get install ntp\nsudo dpkg-reconfigure tzdata # to set your time zone\n\n# Install the build tools\nsudo apt-get install gcc g++ cmake make libbz2-dev libdb++-dev libdb-dev libssl-dev openssl libreadline-dev autoconf libtool git libncurses-dev build-essential kernel-package libncurses-dev doxygen libboost-all-dev autotools-dev automake\n\n# you may have to run this on a fresh install and reboot\n#sudo dpkg --configure -a\n#sudo reboot\n\n# download the P2P node software\ngit clone https://github.com/bitshares/bitshares-2.git\n\n# build the P2P node software\ncd bitshares-2\ngit checkout bitshares\ngit describe --tags\ngit submodule update --init --recursive\ncmake -D CMAKE_BUILD_TYPE=Release .\nmake witness_node cli_wallet\n\n</code></pre> <p> </p> <p> </p> <p></p> <pre><code>### 2. Run your new P2P Decentralised Exchange Node\n\n~/bitshares-2/programs/witness_node/witness_node --rpc-endpoint \"127.0.0.1:8090\" # will allow only your computer's wallet to connect to the blockchain\n# ~/bitshares-2/programs/witness_node/witness_node --rpc-endpoint \"0.0.0.0:8090\" # will allow anyone to connect their wallet to your copy of the blockchain\n\n# you can also strip and copy witness_node to your bin folder for easy blockchain startup\n\nmkdir ~/bin\nstrip ./programs/witness_node/witness_node\nstrip ./programs/cli_wallet/cli_wallet\ncp ./programs/witness_node/witness_node ~/bin\ncp ./programs/cli_wallet/cli_wallet ~/bin\n\n</code></pre> <p></p> <p>Check the block explorer for the latest block https://cryptofresh.com/</p> <p>I have used VirtualBox to run the blockchain on Ubuntu.</p> <p>Remember to install openssh and forward ports in VirtualBox host  </p> <p>Network settings then ssh in (you can use putty on windoze).</p> <pre><code># ssh user@127.0.0.1 -p 3022\n\n</code></pre> <p></p> <p>3. The fun part - download the Light Wallet software for your OS</p> <p>Download the Light Wallet here: </p> <p>BitShares Light Wallet</p> <p>Tutorial https://bitshares.org/register/</p> <p>Set your user name and password (if you found the post useful, you could add by24seven as your Referrer and get a few Free PERKS too)</p> <p>Connect to your local chain after it has synchronised </p> <p>In the Light Wallet under <code>settings * API CONNECTION</code> click on <code>wss://bitshares.openledger.info/ws</code> and change it to your own blockchain node from part 2</p> <p>linux </p> <p><code>ws://127.0.0.1:8090</code> </p> <p>or  </p> <p><code>ws://localhost:8090</code></p> <p>VirtualBox linux </p> <p><code>ws://localhost:3022</code></p> <p>or server ip </p> <p><code>ws://localserverip:8090</code></p> <p>Then click <code>CONFIRM</code></p> <p>If you are using a VPS it is recommended you use ssh to connect to the API eg:  </p> <p><code>ssh -L 6080:localhost:8090 user@vpsserverip</code> </p> <p>then connect to the API with  </p> <p><code>ws://localhost:6080</code> </p> <p>in the Light Wallet</p> <p></p>"},{"location":"docs/nodes/Guide-to-setup-personal-nodes/#welcome-to-your-own-decentralised-exchange","title":"Welcome to your own Decentralised Exchange","text":"<p>More help can be found here: </p> <p>https://docs.bitshares.eu/ https://bitsharestalk.org/index.php/board,45.0.html</p> <p>Enjoy!</p> <p>if you are lazy you can use these Decentralised Exchanges in your chromium browser! (no need to install software and a few Free PERKS too)</p> <p>Bitshares </p> <p>OpenLedger </p> <p>DacPlay</p>"},{"location":"docs/nodes/Guide-to-setup-personal-nodes/#remember-to-back-up-your-wallet-as-only-you-have-the-private-keys-to-access-your-funds-to-trade-on-all-these-decentralised-exchanges","title":"Remember to back-up your wallet, as only you have the private keys to access your funds to trade on all these Decentralised Exchanges.","text":"<p> #bitcoin #litecoin #gold #silver #steem</p> <p>#gold #GOLD #EUR #USD #DOGE #steem #sudo #SILVER #silver #CNY #BTC #DASH #GBP #ETH #MUSE #LTC #bitcoin #litecoin 9 years ago in #bitshares by ihashfury (56)$419.63</p> <ul> <li>Past Payouts $419.63</li> <li> <ul> <li>Author $209.88</li> </ul> </li> <li> <ul> <li>Curators $209.74 34 votes</li> </ul> </li> <li> <p>blocktrades: $204.46</p> </li> <li>berniesanders: $169.40</li> <li>fuzzyvest: $34.59</li> <li>pharesim: -$25.98</li> <li>nextgencrypto: $17.98</li> <li>ihashfury: $5.96</li> <li>xeroc: $5.17</li> <li>liondani: $2.99</li> <li>benjojo: $1.57</li> <li>kimziv: $0.96</li> <li>tuck-fheman: $0.90</li> <li>sandra: $0.74</li> <li>fminerten1: $0.23</li> <li>noisy: $0.20</li> <li>pheonike: $0.17</li> <li>markopaasila: $0.06</li> <li>mostar: $0.06</li> <li>bangking: $0.04</li> <li>kewpiedoll: $0.04</li> <li>jabberw0cky: $0.04</li> <li>and 14 more Reply    13</li> </ul> <p>Sort:- Trending   * Trending   * Votes   * Age [-]pharesim (73) 9 years ago\u00a0(edited)\u00a0</p> <p>\"Remember to back-up your wallet, as only you have the private keys to access your funds to trade on all these Decentralised Exchanges.\"</p> <p>This sentence shows exactly why I'm opposed to promoting trading OPEN.STEEM and advertising it as decentralized.  </p> <p>Users don't have the convenience of password resets and 2FA, but still have to take all the risks of a centralized exchange (issuer getting hacked and funds stolen, or simply running away). What's the big plus that makes it so great? I cannot see it.</p> <p>$10.57</p> <ul> <li>Past Payouts $10.57</li> <li> <ul> <li>Author $5.29</li> </ul> </li> <li> <ul> <li>Curators $5.29 4 votes</li> </ul> </li> <li> <p>fuzzyvest: $6.60</p> </li> <li>pharesim: $4.96</li> <li>ihashfury: -$0.99</li> <li>mostar: $0.00 Reply   [-]ihashfury (56) 9 years ago\u00a0(edited)\u00a0</li> </ul> <p>I did not advertise OPEN.STEEM as decentralized - The exchange is decentralized.  </p> <p>You can also set-up a STEEM SmartCoin if you want to trade a decentralized coin on a decentralized exchange.  </p> <p>See BTC or ALTCAP for an example.</p> <p>$0.36</p> <ul> <li>Past Payouts $0.36</li> <li> <ul> <li>Author $0.18</li> </ul> </li> <li> <ul> <li>Curators $0.18 2 votes</li> </ul> </li> <li> <p>fuzzyvest: $2.36</p> </li> <li>pharesim: -$2.00 Reply   [-]pharesim (73) 9 years ago\u00a0(edited)\u00a0</li> </ul> <p>You said I could trade STEEM on a decentralized exchange, and that's just not true.</p> <p>I'm not blaming you for using that term, because in BTS-land it just works like that. But: everyone else expects decentralized storage when talking about a decentralized exchange. An exchange without gateways is useless, and when it comes to decentralization the gateway is much more important than the trading backend. What exactly is the pro for the user when only the trading is decentralized?</p> <p>IMO that's even one of the main reasons why BTS lacks success. If it delivered what everyone expected from a decentralized exchange it'd be a killer. With centralized gateways, it's unnecessary. NXT MGW is more decentralized than anything on BTS (yes, except SmartCoins, but that's another story).</p> <p>$10.46</p> <ul> <li>Past Payouts $10.46</li> <li> <ul> <li>Author $5.23</li> </ul> </li> <li> <ul> <li>Curators $5.23 4 votes</li> </ul> </li> <li> <p>fuzzyvest: $6.57</p> </li> <li>pharesim: $4.86</li> <li>ihashfury: -$0.98</li> <li>mostar: $0.00 Reply   [-]fuzzyvest (62) 9 years ago </li> </ul> <p>This is 100% agreed imo. If Bitshares doesn't do this, someone else will. And then...where will Bitshares be?  </p> <p>What do you think about IPFS and how should bitshares best fix this in your opinions?</p> <p>On a positive endnote, however, I think there is one obvious benefit to bts today--- it significantly lowers the barrier to entry for running your own centralized exchange---is cool though :)</p> <p>$10.65</p> <ul> <li>Past Payouts $10.65</li> <li> <ul> <li>Author $5.32</li> </ul> </li> <li> <ul> <li>Curators $5.32 4 votes</li> </ul> </li> <li> <p>fuzzyvest: $6.75</p> </li> <li>pharesim: $4.90</li> <li>ihashfury: -$1.01</li> <li>bob-the-poster: $0.00 Reply   [-]ihashfury (56) 9 years ago </li> </ul> <p>altcap.io please have a look at this post - Distributed Access to the BitShares Decentralised ExchangeIf you would also like to provide a  #backup #gateway and  #WebSocket access to the  #bitshares platform for bitshares  #shareholders comparable to </p> <p>$0.13</p> <ul> <li>Past Payouts $0.13</li> <li> <ul> <li>Author $0.13</li> </ul> </li> <li> <ul> <li>Curators $0.00 3 votes</li> </ul> </li> <li> <p>ihashfury: $0.11</p> </li> <li>sandra: $0.01</li> <li>jason: $0.01 Reply   [-]brigon (45) 9 years ago </li> </ul> <p>hi, great post. I am busy setting up on azure vm.</p> <p>$0.09</p> <ul> <li>Past Payouts $0.09</li> <li> <ul> <li>Author $0.07</li> </ul> </li> <li> <ul> <li>Curators $0.02 2 votes</li> </ul> </li> <li> <p>ihashfury: $0.08</p> </li> <li>sandra: $0.01 Reply   [-]ihashfury (56) 9 years ago </li> </ul> <p>Thanks  </p> <p>If you need any help please post here and/or join Bitshares Telegram Chat</p> <p>$0.00</p> <p>1 vote</p> <ul> <li>sandra Reply   [-]brigon (45) 9 years ago </li> </ul> <p>Had some issues with some packages: boost, flex, bison, but seems errors are ok now! might contact you still for some help!</p> <p>$0.00</p> <p>Reply   [-]brigon (45) 9 years ago\u00a0(edited)\u00a0</p> <p>btw, which linux version would be best to use? ubuntu? version? 12.04 or 15.10 or latest? what server would be best, cores and memory?</p> <p>$0.00</p> <p>Reply   [-]djleo (54) 9 years ago </p> <p>Looks interesting! Are there any plans to support Monero too?</p> <p>$0.08</p> <ul> <li>Past Payouts $0.08</li> <li> <ul> <li>Author $0.06</li> </ul> </li> <li> <ul> <li>Curators $0.02 1 vote</li> </ul> </li> <li> <p>ihashfury: $0.08 Reply   [-]crispywhips93 (32) 7 years ago </p> </li> </ul> <p>I need to upgrade my server capacity I want to run a node from my home</p> <p>$0.02</p> <ul> <li>Past Payouts $0.02</li> <li> <ul> <li>Author $0.02</li> </ul> </li> <li> <ul> <li>Curators $0.00 1 vote</li> </ul> </li> <li> <p>crispywhips93: $0.02 Reply   [-]tatchcapital (47) 7 years ago </p> </li> </ul> <p>Hello,</p> <p>Post date a bit; but it's still the best tuto I have founded.  </p> <p>However I'm stuck at step 1</p> <p>$0.00</p> <p>1 vote</p> <ul> <li>tatchcapital Reply   [-]imyao (56) 9 years ago </li> </ul> <p>Great!</p> <p>$0.00</p> <p>Reply   </p>"},{"location":"docs/nodes/HaProxy-and-BitShares/","title":"Using BitShares-core behind HaProxy","text":"<p>This page explains how to use HaProxy as loadbalancer for bitshares-core.</p>"},{"location":"docs/nodes/HaProxy-and-BitShares/#global-and-defaults","title":"Global and defaults","text":"<p>The haproxy config <code>/etc/haproxy/haproxy.cfg</code> comes with a global section and defaults. The following appear to be sound defaults with respect to security standards of 2018:</p> <pre><code> global\n    log /dev/log local0\n    log /dev/log local1 notice\n    chroot /var/lib/haproxy\n    # management/stats socket\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n\n    # Generated via \"openssl dhparam -out dhparam.pem 1024\"\n    ssl-dh-param-file /etc/haproxy/dhparams.pem\n\n    # Recent Cipher suites\n    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n    ssl-default-bind-options no-sslv3    no-tls-tickets\n    ssl-default-server-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n    ssl-default-server-options no-sslv3   no-tls-tickets\n\n    # Track stats\n    server-state-file /etc/haproxy/haproxy.state\n\n defaults\n     log     global\n     mode    http\n</code></pre>"},{"location":"docs/nodes/HaProxy-and-BitShares/#frontends","title":"Frontends","text":"<p>A frontend is used as entrypoint. Here, we open a frontend for HTTPS (443) and HTTP (80):</p> <pre><code> frontend https\n\n    # file must contain certificate, chain and key\n    bind *:443 ssl strict-sni crt /etc/ssl/keys/domain.pem\n    mode http\n\n    # this sets the 'is_node' ACL in case the domain name matches\n    acl is_node              hdr(Host)    -i node.bitshares.org\n\n    # SSL\n    http-response set-header Strict-Transport-Security max-age=15768000\n\n    # Let's redirect everything for node to the node backend\n    use_backend node if is_node\n\n    # in case some other domain points to us, let's still redirect\n    # to node backend\n    default_backend node\n\n frontend http\n    bind *:80\n    mode http\n    # No like HTTP .. Let's do HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n</code></pre>"},{"location":"docs/nodes/HaProxy-and-BitShares/#backend","title":"Backend","text":"<p>The backend is quite simple and merely points to a set of backend nodes each running a bitshares-core API on port <code>8090</code>.</p> <p>In our case, we also run a healthchecker that tests the API and causes HAproxy to remove the backend automatically, if unhealthy. The healthchecker listens on port <code>8095</code>.</p> <pre><code> backend node\n    option httpchk\n    balance roundrobin\n    server node-01 192.168.0.10:8090 check port 8095\n    server node-01 192.168.0.11:8090 check port 8095\n    server node-01 192.168.0.12:8090 check port 8095\n    server node-01 192.168.0.13:8090 check port 8095\n    server node-01 192.168.0.14:8090 check port 8095\n    server node-01 192.168.0.15:8090 check port 8095\n</code></pre>"},{"location":"docs/nodes/Manage-your-nodes-by-using-gnu-screen/","title":"Manage your nodes by using gnu screen","text":"<p>When i started working in the bitshares-core one of the first problems i found after building a node was a proper way to run a node in the background.</p> <p>When a node is started, it needs to sync all the chain and this takes time, when the ssh connection between my pc and my server is lost then I need to start all over again.</p> <p>Also, this will help when you want to keep your node running and turn off your pc by closing the ssh connection, here is the best way to do it.</p> <p>This is a very practical setup for developers and nodemasters that connect to their servers by ssh and run nodes in there.</p> <p>Meet GNU Screen https://www.gnu.org/software/screen/</p> <p>We will only use just a few commands for our needs.</p> <p>Type screen in your terminal and you will see a msg as:</p> <p></p> <p>Hit enter. You are now in a new terminal.</p> <p>You can go back to the original terminal by the following combination of keys.</p> <p>Press \"CTRL\" key and while pressed press key \"a\". Release \"CTRL\" and press \"d\".</p> <p>You will see something like:</p> <p><code>[detached from 11831.pts-2.alfredo]</code></p> <p>This will return you to the original window detaching the screen created terminal, but anything running there will keep running in the background.</p> <p>In order to gain control again to the screen window use:</p> <p><code>screen -r</code></p> <p>This will work as you only have one screen going.</p> <p>Now what we need to do is create a screen terminal, run the node inside it, deattach it and turn everything off if you want and go to sleep. Then came back the next day, log in to your server, run screen -r and see how the node will be still running.</p> <p>So, log in to your vps and then:</p> <p><code>screen</code></p> <p>You are now in a new terminal, navigate to your witness, start the witness by something like:</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --genesis-json genesis/my-genesis.json  --enable-stale-production -w \\\"\"1.6.0\"\\\" \\\"\"1.6.1\"\\\" \\\"\"1.6.2\"\\\" \\\"\"1.6.3\"\\\" \\\"\"1.6.4\"\\\" --rpc-endpoint \"localhost:8090\"</code></p> <p>Node will start syncing or whatever, you then use the key combinations explained above(ctrl-a and then d) and you get back to the original terminal.</p> <p>Then you leave:</p> <p><code>exit</code></p> <p>Next day after logging in:</p> <p><code>screen -r</code></p> <p>will send you to the terminal with the running node.</p> <p>More cool stuff can be done with screen but these are the basics for using it with bitshares nodes.</p> <p>If you have several screens going on, the screen -r will not work for you, but follow the command suggestions and you will know how to gain control of each terminal again:</p> <pre><code>root@alfredo:~/bitshares-munich/recurring/bitshares-core# screen -r\nThere are several suitable screens on:\n        11873.pts-2.alfredo     (09/01/17 20:07:00)     (Detached)\n        11831.pts-2.alfredo     (09/01/17 19:55:18)     (Detached)\nType \"screen [-d] -r [pid.]tty.host\" to resume one of them.\nroot@alfredo:~/bitshares-munich/recurring/bitshares-core# \n</code></pre> <p>In this case i will do:</p> <p><code>screen -r 11873.pts-2.alfredo</code></p> <p>to get access to one of the terminals.</p> <p>To end a screen session just gain control over it and type <code>exit</code>.</p> <p>One last useful command i use when the connection drops while you are inside a screen session. When you came back, the screen command will tell you that the terminal is attached but you have no control over it.</p> <p>What you need to use in that case is something like:</p> <p><code>screen -D -r '1234.somescreensession'</code></p> <p>to recover your screen session.</p>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/","title":"Memory Reduction for Nodes","text":"<p>UPDATE(2019-07-25): please check the \"requirements\" table in README for latest requirements to run the software.</p> <p>The BitShares blockchain is big and Graphene technology stores all the data into RAM at chain replay. Currently(2017-09-04) a full node requires 40GB of RAM. Most of the time a full node with everything loaded is not needed and expensive due to the amount of memory the machine need to have available. RAM usage can be reduced significantly by using <code>witness_node</code> executable options.</p> <p>Here are the 4 new options you can use to reduce RAM:</p> <pre><code>programs/witness_node/witness_node --help\n...\n  --plugins arg                         Space-separated list of plugins to \n                                        activate\n...\n\nOptions for plugin account_history:\n  --track-account arg                   Account ID to track history for (may \n                                        specify multiple times)\n  --partial-operations arg              Keep only those operations in memory \n                                        that are related to account history \n                                        tracking\n  --max-ops-per-account arg             Maximum number of operations per \n                                        account will be kept in memory\n...\n</code></pre>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/#-plugins","title":"--plugins","text":"<p>Allows to run only the plugins you want. </p> <p>By default, if the plugin parameter is not present in the command line startup the node will start with the default plugins loaded, these are:</p> <ul> <li>witness</li> <li>account_history</li> <li>market_history</li> </ul> <p>You can launch a node only with the witness plugin activated like the following if you are after just validating blocks:</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --rpc-endpoint \"127.0.0.1:8090\" --plugins \"witness\"</code></p>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/#-track-account","title":"--track-account","text":"<p>Allows to track only the history of selected accounts.</p> <p>Suppose you have an application wallet or something that is only interested in the history of 1 account or just a few accounts, no need to spend the memory in the huge amount of account history from the rest of the network. You will still be able to do transfers and everything as normal, it is just the account history that will not be available.</p> <p>In order to track the history only for just one account you may start the node as:</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --rpc-endpoint \"127.0.0.1:8090\" --track-account \"\\\"1.2.282\\\"\"</code></p> <p>To track multiple accounts:</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --rpc-endpoint \"127.0.0.1:8090\" --track-account \"\\\"1.2.282\\\"\" \"\\\"1.2.24484\\\"\" \"\\\"1.2.2058\\\"\"</code></p>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/#-max-ops-per-account","title":"--max-ops-per-account","text":"<p>Add a number of operations the node will store for each account in the network.</p> <p>We found out that most of the blockchain size is actually history of millions of orders made by automated bot accounts in the system. The market making these accounts do, is very needed for the DEX liquidity, but is of little value for most nodes.</p> <p>This parameter allows to go deleting the oldest operation history from all accounts. Balances and everything will still be fine, please remember this is only deleting history.</p> <p>By limiting the number of operations per account to 1000 the blockchain decrease in size is more than notorious and will allow you to run nodes in reduced memory machines, can run with 4-5 gigs (on 2017-09-04) by using combinations around this option.</p> <p>Reduce the number of operations for each account that the node will save in the blockchain to 100 by starting with:</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --rpc-endpoint \"127.0.0.1:8090\" --max-ops-per-account 100</code></p>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/#-partial-operations","title":"--partial-operations","text":"<p>Remove operation history objects.</p> <p>BitShares-core stores operations in 2 different objects, the 2.9.X and the 1.11.X. they are not exactly the same but if you are removing ops with <code>--track-account</code> or <code>--max-ops-per-account</code> it makes sense that you also add this option to reduce memory usage even more.</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --rpc-endpoint \"127.0.0.1:8090\" --max-ops-per-account 100 --partial-operations true</code></p>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/#combinations","title":"Combinations","text":"<p>Combinations that make sense are all valid and can be used to suit your needs.</p> <p>I personally start my nodes with 1000 ops per account and partial operations:</p> <p><code>programs/witness_node/witness_node --data-dir data/my-blockprod --rpc-endpoint \"127.0.0.1:8090\" --max-ops-per-account 1000 --partial-operations true</code></p> <p>This will allow me to run the node with less than 5 gigs(4.820492G) (on 2017-09-04):</p> <pre><code>ffffffffff600000      4K r-x--   [ anon ]\n total          4820492K\nroot@alfredo:~# pmap 28685\n</code></pre>"},{"location":"docs/nodes/Memory-Reduction-for-Nodes/#special-notes","title":"Special notes","text":"<ul> <li>A new option could be <code>untrack-account</code> (not implemented yet). we could identify the biggers and run a node with the account history of bots out.</li> </ul>"},{"location":"docs/nodes/Node-Initialization/","title":"Node Initialization","text":""},{"location":"docs/nodes/Node-Initialization/#steps-performed-during-application-witness_node-startup","title":"Steps performed during application (<code>witness_node</code>) startup:","text":"<ol> <li>Create <code>application</code></li> </ol> <p>1.1. Create <code>database</code></p> <p>1.1.1 Initialize indexes</p> <p>1.1.2 Initialize evaluators</p> <ol> <li>Register plugins</li> <li>Enable plugins from <code>plugins</code> option</li> <li>Initialize <code>application</code></li> <li>Initialize plugins</li> <li>Startup <code>application</code></li> </ol> <p>6.1 Open database (includes loading state from disk and replay if required)</p> <p>6.2 Start listening on network sockets</p> <ol> <li>Startup enabled plugins</li> <li>Wait for shutdown signal</li> <li>Shut down plugins</li> <li>Shut down node</li> </ol> <p>10.1 Shut down P2P network</p> <p>10.2 Close database</p> <p>10.2.1 Dump database to disk</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/","title":"Distributed Access to the BitShares Decentralised Exchange","text":"<p>ihashfury (56)in #bitshares \u2022 9 years ago (edited)</p> <p>I hope to encourage and promote more access points and backup WebSocket (wss) gateways for BitShares. This is the logical progression from Run your own decentralised exchange post.  </p> <p></p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#distributed-access-to-the-bitshares-network","title":"Distributed Access to the BitShares Network","text":"<ul> <li>Distributed Access to the BitShares Decentralised Exchange<ul> <li>Distributed Access to the BitShares Network</li> <li>BitShares node setup post - Run your own decentralised exchange</li> <li>Create a New User</li> <li>Install Nginx<ul> <li>Configure Nginx</li> <li>Create your web folder</li> <li>Configure Nginx</li> <li>Update Virtual Host File</li> <li>Activate sim link and disable default web server</li> <li>Link local folder to www root and add a simple index.html</li> <li>Restart Nginx</li> </ul> </li> <li>Install letsencrypt<ul> <li>Obtain your SSL certificate</li> <li>Check your certificate</li> <li>Setup a renew cronjob for your new SSL certificate</li> <li>Generate Strong Diffie-Hellman Group cert</li> </ul> </li> <li>Add SSL to Nginx settings<ul> <li>Edit altcap.io</li> <li>Update altcap.io www virtual host</li> <li>Restart Nginx</li> </ul> </li> <li>Install BitShares web gui<ul> <li>Install NVM (Node Version Manager)</li> <li>Download BitShares gui</li> <li>Setup light wallet</li> <li>Link web root to gui build folder</li> <li>Build light wallet</li> </ul> </li> <li>SSL test<ul> <li>Vote for @Steemitboard as a witness to get one more award and increased upvotes!</li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#bitshares-node-setup-post-run-your-own-decentralised-exchange","title":"BitShares node setup post - Run your own decentralised exchange","text":"<p>Once you have a full node setup, you can allow BitShares shareholders secure access to your server to trade and check their accounts by following these steps.</p> <p>A DNS Alias (CNAME) is required to point to your server ip address.  </p> <p>See dyn.com for DNS Alias setup.  </p> <p>You may have to wait a few days for the DNS to work through the internet.  </p> <p>Please change altcap.io to your DNS alias in the examples below.</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#create-a-new-user","title":"Create a New User","text":"<p>I recommend creating a new user on your server to run the Bitshares gui and give the user sudo access.</p> <p>You can use any name - I have used bitshares in this example</p> <pre><code>sudo adduser bitshares\nsudo gpasswd -a bitshares sudo\nsudo gpasswd -a bitshares users\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#install-nginx","title":"Install Nginx","text":"<p>Install Nginx web server</p> <pre><code># ssh into your new user bitshares\nssh bitshares@altcap.io\nsudo apt-get install nginx\n# check version\nnginx -v\n# add user to web server group\nsudo gpasswd -a bitshares www-data\n# start nginx\nsudo service nginx start\n\n</code></pre> <p>This will start Nginx default web server. Check it by typing the ip address of your server in a web browser or your alias altcap.io</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#configure-nginx","title":"Configure Nginx","text":"<p>To configure the web server, edit the default site and save as new DNS alias name using http port 80 only until you setup letsencrypt.org SSL Certificate.</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#create-your-web-folder","title":"Create your web folder","text":"<pre><code>sudo mkdir -p /var/www/altcap.io/public_html\nsudo chown -R bitshares:bitshares var/www/altcap.io/public_html\nsudo chmod 755 /var/www\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#configure-nginx_1","title":"Configure Nginx","text":"<pre><code># edit default setup and save as altcap.io\nsudo nano /etc/nginx/sites-available/default\n\n</code></pre> <p>Point to your new virtual host</p> <pre><code>###### altcap.io ######\nserver {\n    listen 80;\n    server_name altcap.io;\n    #rewrite ^ https://$server_name$request_uri? permanent;\n    #rewrite ^ https://altcap.io$uri permanent;\n    #\n    root /var/www/altcap.io/public_html;\n    # Add index.php to the list if you are using PHP\n    index index.html index.htm;\n    #\n    location / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ =404;\n    }\n}\n\n</code></pre> <p>CTRL+O to save as altcap.io (^O Write Out)</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#update-virtual-host-file","title":"Update Virtual Host File","text":"<pre><code>sudo cp altcap.io /etc/nginx/sites-available/altcap.io\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#activate-sim-link-and-disable-default-web-server","title":"Activate sim link and disable default web server","text":"<pre><code>sudo ln -s /etc/nginx/sites-available/altcap.io /etc/nginx/sites-enabled/altcap.io\nsudo rm /etc/nginx/sites-enabled/default\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#link-local-folder-to-www-root-and-add-a-simple-indexhtml","title":"Link local folder to www root and add a simple index.html","text":"<pre><code>ln -s /var/www/altcap.io/public_html ~/public_html\nnano ~/public_html/index.html\n\n</code></pre> <p>Add some text to index.html</p> <pre><code>altcap.io\n\n</code></pre> <p>CTRL+X to save as index.html (^X Exit)</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#restart-nginx","title":"Restart Nginx","text":"<pre><code>sudo service nginx restart\n\n</code></pre> <p>Now you have setup a simple web server.  </p> <p>DigitalOcean has a great article for more information on Virtual Host setup.</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#install-letsencrypt","title":"Install letsencrypt","text":"<pre><code>sudo apt-get install letsencrypt\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#obtain-your-ssl-certificate","title":"Obtain your SSL certificate","text":"<pre><code>sudo letsencrypt certonly --webroot -w /var/www/altcap.io/public_html -d altcap.io\n\n</code></pre> <p>Follow the instructions and add an email address</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#check-your-certificate","title":"Check your certificate","text":"<pre><code>sudo ls -l /etc/letsencrypt/live/altcap.io\n# and check it will update\nsudo letsencrypt renew --dry-run --agree-tos\nsudo letsencrypt renew\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#setup-a-renew-cronjob-for-your-new-ssl-certificate","title":"Setup a renew cronjob for your new SSL certificate","text":"<pre><code>sudo crontab -e\n\n</code></pre> <p>Add this line to run the job every 6 hours on the 16th minute</p> <pre><code>16 */6 * * *  /usr/bin/letsencrypt renew &gt;&gt; /var/log/letsencrypt-renew.log\n\n</code></pre> <p>CTRL+X to save (^X Exit)</p> <pre><code># check your crontab\nsudo crontab -l\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#generate-strong-diffie-hellman-group-cert","title":"Generate Strong Diffie-Hellman Group cert","text":"<pre><code>sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#add-ssl-to-nginx-settings","title":"Add SSL to Nginx settings","text":"<p>Make a copy of altcap.io just in case.</p> <pre><code>cp altcap.io alcap.io.no.ssl\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#edit-altcapio","title":"Edit altcap.io","text":"<pre><code>nano altcap.io\n\n</code></pre> <pre><code>###### altcap.io ######\nserver {\n    listen 80;\n    server_name altcap.io;\n    #rewrite ^ https://$server_name$request_uri? permanent;\n    rewrite ^ https://altcap.io$uri permanent;\n    #\n    root /var/www/altcap.io/public_html;\n    # Add index.php to the list if you are using PHP\n    index index.html index.htm;\n    #\n    location / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ =404;\n    }\n}\n\n###### altcap.io websockets\n\nupstream websockets {\n    server localhost:8090;\n}\n\n###### altcap.io ssl\nserver {\n    listen 443 ssl;\n    #\n    server_name altcap.io;\n    #\n    root /var/www/altcap.io/public_html;\n    # Add index.php to the list if you are using PHP\n    index index.html index.htm;\n    #\n    ssl_certificate /etc/letsencrypt/live/altcap.io/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/altcap.io/privkey.pem;\n    #\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    add_header Strict-Transport-Security max-age=15768000;\n    #\n    # Note: You should disable gzip for SSL traffic.\n    # See: https://bugs.debian.org/773332\n    #\n    # Read up on ssl_ciphers to ensure a secure configuration.\n    # See: https://bugs.debian.org/765782\n    #\n    # Self signed certs generated by the ssl-cert package\n    # Don't use them in a production server!\n    #\n    # include snippets/snakeoil.conf;\n    #\n    location / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ =404;\n    }\n    location ~ /ws/? {\n        access_log off;\n        proxy_pass http://websockets;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n###### altcap.io ######\n\n</code></pre> <p>CTRL+X to save (^X Exit)</p> <p>You have now setup an SSL secured web server with a WebSocket connected to your local BitShares witness_node (listening on port 8090 - see this post for more information)</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#update-altcapio-www-virtual-host","title":"Update altcap.io www virtual host","text":"<pre><code>sudo cp altcap.io /etc/nginx/sites-available/altcap.io\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#restart-nginx_1","title":"Restart Nginx","text":"<pre><code>sudo service nginx restart\n\n</code></pre> <p>Now you have setup an SSL web server.  </p> <p>More information on SSL setup can be found here.  </p> <p>DigitalOcean letsencrypt SSL </p> <p>LetsEncrypt </p> <p>CertBot</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#install-bitshares-web-gui","title":"Install BitShares web gui","text":""},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#install-nvm-node-version-manager","title":"Install NVM (Node Version Manager)","text":"<pre><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\n\n</code></pre> <p>exit bash (terminal) and reconnect</p> <pre><code>ssh [[email\u00a0protected]](/cdn-cgi/l/email-protection)\nnvm install v5\nnvm use v5\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#download-bitshares-gui","title":"Download BitShares gui","text":"<pre><code>git clone https://github.com/bitshares/bitshares-2-ui.git\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#setup-light-wallet","title":"Setup light wallet","text":"<pre><code>cd /bitshares-2-ui/\n\n</code></pre> <p>Before building the light wallet, you need to edit SettingsStore.js line 19 and 99 wss WebSocket.</p> <pre><code>nano /bitshares-2-ui/dl/src/stores/SettingsStore.js\n\n</code></pre> <p>Change line 19</p> <pre><code>            connection: \"wss://altcap.io/ws\",\n\n</code></pre> <p>Add your new wss WebSocket to line 99</p> <pre><code>            connection: [\n                \"wss://altcap.io/ws\",\n                \"wss://bitshares.openledger.info/ws\",\n                \"wss://bitshares.dacplay.org:8089/ws\",\n                \"wss://dele-puppy.com/ws\",\n                \"wss://valen-tin.fr:8090/ws\"\n\n</code></pre> <p>CTRL+X to save (^X Exit)</p> <pre><code>### Setup install\ncd dl; npm install\ncd ../web; npm install\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#link-web-root-to-gui-build-folder","title":"Link web root to gui build folder","text":"<pre><code>ln -s ~/public_html/ dist\n\n</code></pre>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#build-light-wallet","title":"Build light wallet","text":"<pre><code>npm run build\n\n</code></pre> <p>You have now created another Access point to the BitShares Decentralised Exchange.  </p> <p>The more the merrier. </p> <p>Please remember to check your firewall and SSH is up-to-date and configured correctly. DigitalOcean has firewall and Secure SSH tutorials for more help.</p>"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#ssl-test","title":"SSL test","text":"<p>You can also check how secure your new web server is compared to your bank. Add this link to a web browser and wait for the results.</p> <pre><code>https://www.ssllabs.com/ssltest/analyze.html?d=altcap.io\n\n</code></pre> <p>Now change altcap.io to your local bank's domain name in the link and post the results below.</p> <p>Thank you svk for your advice and guidance.</p> <p>#rewrite 9 years ago in #bitshares by ihashfury (56)$32.97</p> <ul> <li>Past Payouts $32.97</li> <li> <ul> <li>Author $19.02</li> </ul> </li> <li> <ul> <li>Curators $13.95 38 votes</li> </ul> </li> <li> <p>enki: $8.05</p> </li> <li>roadscape: $7.33</li> <li>complexring: $5.31</li> <li>lafona-miner: $4.81</li> <li>newyo: $1.80</li> <li>ihashfury: $1.68</li> <li>xeroc: $1.50</li> <li>berkah: $0.68</li> <li>lafona: $0.37</li> <li>sandra: $0.21</li> <li>pheonike: $0.20</li> <li>clains: $0.20</li> <li>pfunk: $0.17</li> <li>psylains: $0.11</li> <li>jason: $0.11</li> <li>idealist: $0.09</li> <li>rnglab: $0.09</li> <li>noisy: $0.06</li> <li>rimantas: $0.04</li> <li>proctologic: $0.04</li> <li>and 18 more Reply    27</li> </ul> <p>Sort:- Trending   * Trending   * Votes   * Age [-]shing3e (44) 9 years ago </p> <p>Thanks for the security check tip!</p> <p>$0.70</p> <ul> <li>Past Payouts $0.70</li> <li> <ul> <li>Author $0.53</li> </ul> </li> <li> <ul> <li>Curators $0.17 2 votes</li> </ul> </li> <li> <p>ihashfury: $0.68</p> </li> <li>jason: $0.02 Reply   [-]sandra (62) 9 years ago </li> </ul> <p>SSL Certificate Overall Rating results:  </p> <p>altcap.io - A+  </p> <p>security.hsbc.co.uk - B  </p> <p>meine.deutsche-bank.de - A  </p> <p>globalmarkets.bnpparibas.com - A  </p> <p>particulares.gruposantander.es - A-  </p> <p>bmn.es - F</p> <p>$0.55</p> <ul> <li>Past Payouts $0.55</li> <li> <ul> <li>Author $0.55</li> </ul> </li> <li> <ul> <li>Curators $0.01 3 votes</li> </ul> </li> <li> <p>ihashfury: $0.52</p> </li> <li>jason: $0.03</li> <li>sandra: $0.01 Reply   [-]xeroc (70) 9 years ago </li> </ul> <p>For proper markdown, you need to have a blank space after <code>##</code> for headlines. If you could please correct that ..</p> <p>$0.41</p> <ul> <li>Past Payouts $0.41</li> <li> <ul> <li>Author $0.20</li> </ul> </li> <li> <ul> <li>Curators $0.20 2 votes</li> </ul> </li> <li> <p>ihashfury: $0.40</p> </li> <li>judyhopps: $0.00 Reply   [-]roseebit (63) 9 years ago </li> </ul> <p>Good</p> <p>$0.07</p> <ul> <li>Past Payouts $0.07</li> <li> <ul> <li>Author $0.07</li> </ul> </li> <li> <ul> <li>Curators $0.00 3 votes</li> </ul> </li> <li> <p>ihashfury: $0.07</p> </li> <li>sandra: $0.00</li> <li>aleks123rus: $0.00 Reply   [-]tatchcapital (47) 7 years ago </li> </ul> <p>Hello @ihashfury !</p> <p>I'm trying to distribute a customized UI. It seems I don't 'need' to run a full node to do so and everything is running ok.</p> <p>BUT I can't change the Dashboard as it doesn't display what I request. Can't find what am I missing ?</p> <p>Any help would be very much appreciated !</p> <p></p> <p></p> <p>I have allowed pairs in Store settings too so I am really puzzled here</p> <p>$0.00</p> <p>1 vote</p> <ul> <li>tatchcapital Reply   [-]teamsteem (74) 8 years ago </li> </ul> <p>Thank you @ihashfury for your recognition! Looking at that post you seem very knowledgeable in regard to Bitshares! It would be a real pleasure to talk to you in private. I just saw that your witness is doing really good. You can check me up on the Steemit official chat if you have time.</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honnor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 8 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 7 years ago </p> <p>Congratulations @ihashfury! You have completed some achievement on Steemit and have been rewarded with new badge(s) :</p> <p> Award for the number of upvotes</p> <p>Click on any badge to view your own Board of Honor on SteemitBoard.  </p> <p>For more information about SteemitBoard, click here</p> <p>If you no longer want to receive notifications, reply to this comment with the word <code>STOP</code></p> <p>By upvoting this notification, you can help all Steemit users. Learn how here!</p> <p>$0.00</p> <p>Reply   [-]steemitboard (66) 6 years ago </p> <p>Congratulations @ihashfury! You received a personal award!</p> Happy Birthday! - You are on the Steem blockchain for 3 years! <p>You can view your badges on your Steem Board and compare to others on the Steem Ranking</p> <p>Do not miss the last post from @steemitboard:</p> The Steem blockchain survived its first virus plague!"},{"location":"docs/nodes/distributed-access-to-the-bitshares-decentralised-exchange/#vote-for-steemitboard-as-a-witness-to-get-one-more-award-and-increased-upvotes","title":"Vote for @Steemitboard as a witness to get one more award and increased upvotes!","text":"<p>$0.00</p> <p>Reply   </p>"},{"location":"docs/other/blacklizard-app-finarch/","title":"Blacklizard app finarch","text":""},{"location":"docs/other/blacklizard-app-finarch/#financial-architecture-of-distributed-applications","title":"Financial architecture of distributed applications","text":"<p>This paper summarizes the organizational structure of Black Lizard, with a focus on how other DAC's (\"apps\") will use base services provided by the Black Lizard blockchain to enable unambiguous consensus (Byzantine generals problem), flexible ownership and monetization structures (completely centralized, completely decentralized, or many points in between), and effective operational integration with BitAssets.</p> <p>This paper is an incomplete draft, more of a starting point for discussion than a final product.</p>"},{"location":"docs/other/blacklizard-app-finarch/#black-lizard-be-the-platform-not-the-app","title":"Black Lizard:  Be the platform, not the app","text":"<p>The new business direction will point us directly to competing with Ethereum as a platform for smart organizations and smart contracts.</p> <p>Specifically, the architecture of the Ethereum blockchain as executing Turing-complete contracts is a weak point from a standpoint of scalability and flexibility:</p> <ul> <li>Scalability:  Patricia tries are (Dan claims) slow.</li> <li>Scalability:  Every node must execute every contract.</li> <li>Flexibility:  Giving resources to a particular piece of code means that code cannot be upgraded or bugfixed; the new version will be a different piece of code with no access to the old version's resources.</li> </ul> <p>Project Black Lizard involves a substantial rewrite of the BitShares blockchain database and transactions.</p> <p>From the business side, Project Black Lizard has two goals:</p> <ul> <li>Provide a platform layer with sufficient flexibility to enable many client applications.</li> <li>Use the platform to develop app(s) to provide Vote functionality.</li> </ul>"},{"location":"docs/other/blacklizard-app-finarch/#what-is-an-app","title":"What is an app?","text":"<p>A Black Lizard app is any DAC, other than Black Lizard itself, which is hosted on the Black Lizard blockchain.</p> <p>Entities on the Black Lizard blockchain that do not belong to any app are platform level entities.  For example, the core asset (Black Lizard equivalent of BTS), BitAssets and UIA's unassociated with an app are considered platform assets.</p>"},{"location":"docs/other/blacklizard-app-finarch/#what-are-the-hard-problems","title":"What are the hard problems?","text":"<ul> <li>Hard Problem 1:  Platform asset interaction problem.  Apps must interact with platform assets.  Thus, the platform must support a notion of \"platform assets controlled by an app\".</li> <li>Hard Problem 2:  State import problem.  Transactions may involve app-specific semantics (including arbitrary off-chain information).  Enough information about these arbitrary semantics must be \"imported\" to the blockchain to at least allow proper distribution of platform assets.</li> <li>Hard Problem 3:  Proof-of-broadcast problem.  The platform can provide timestamping of hashes of arbitrary data.  However, this is not sufficient.  Such a hash is meaningless without proof that some quorum of the app's validators have seen (and presumably archived) the data in question.  This is effectively providing a resource-efficient and sybil-resistant proof-of-broadcast.</li> <li>Hard Problem 4:  Dead validator problem.  Any mechanism which solves Hard Problem 3 must be resilient against dead validators.</li> <li>Hard Problem 5:  Monetization problem.  In order to incentivize development of apps, app developers need to have a mechanism to get paid.</li> </ul>"},{"location":"docs/other/blacklizard-app-finarch/#solution-overview","title":"Solution overview","text":"<p>The solution to the hard problems is to give apps a similar DPOS structure to the platform itself.  Each app should have an equity asset representing ownership, which votes for up to 101 trusted validators (\"app delegates\").  After transactions are published on the platform chain, app validators can ratify or veto them.  A transaction involving conditional transfer of platform assets dependent on app-specific off-chain conditions, requires a majority of app delegates to ratify what should actually happen before platform assets are transferred.</p> <p>This solves Hard Problem 1 (app's platform assets are controlled by a majority of app delegates), Hard Problem 2 (app delegates are responsible for importing all off-chain app state), Hard Problem 3 (app delegates don't ratify transactions that imply off-chain broadcasts unless a majority have seen and stored the data), Hard Problem 4 (dead app delegates can be replaced by equity asset holders' votes), and Hard Problem 5 (app's platform assets can be transferred to equity asset holders to \"pay a dividend\").</p>"},{"location":"docs/other/blacklizard-app-finarch/#oracle-invocation","title":"Oracle invocation","text":"<p>App delegates can have three actions:  Ratify, veto, or fail to reach consensus.  The general behavior for a transaction is to specify an operation for each of these paths.  I.e. a transaction needs to be able to say:</p> <pre><code>switch( state )\n{\ncase ratified:\n    op_pay_app_fee_to_implement_transaction;\n    op_transfer_resources_to_app;\n    op_transfer_resources_from_app;\n    break;\n\ncase vetoed:\n    op_pay_app_validation_fee;\n    break;\n\ncase fail_to_reach_consensus:\n    /* do nothing */\n    break;\n}\n</code></pre> <p>It is clear then that such a transaction should be published, but its execution deferred until the app delegates have reached consensus (or a specified expiration time has been reached without consensus), in which case one of several paths are taken.</p> <p>Since Black Lizard ops maintain all chain invariants, I think we should allow <code>switch</code> in the middle of a transaction, as well as the beginning.  This will enable a decentralized altcoin bridge algorithm:</p> <pre><code>op_lock_asset &lt;alice&gt; &lt;m&gt; &lt;bitbtc&gt;\nstate = op_invoke_oracle &lt;bridge_app_id&gt; &lt;return 0 if &lt;btc_txid&gt; exists and sends &lt;n&gt; BTC from &lt;btc_bob_addr&gt; to &lt;btc_alice_addr&gt;, return 1 if &lt;btc_txid&gt; exists but doesn't do that, or any other transaction spends &lt;btc_bob_addr&gt; &gt;\nswitch( state )\n{\ncase 0:\n    /* bob sent bitcoins to alice */\n    op_pay_app_fee;\n    op_send_locked_asset &lt;bob&gt; &lt;m&gt; &lt;bitbtc&gt;\n    break;\n\ncase 1:\n    /* bob spent bitcoins elsewhere */\n    op_pay_app_fee;\n    op_send_locked_asset &lt;alice&gt; &lt;m&gt; &lt;bitbtc&gt;\n    break;\n}\n</code></pre> <p>This is basically an escrow system.  We can add an expiration time and a <code>fail_to_reach_consensus</code> case, however this doesn't quite work -- Alice can end up with both BTC and BitBTC if the Bitcoin network is too slow confirming Bob's transaction!  Instead, before Alice publishes the above Black Lizard transaction, she should require Bob to send her a cancellation transaction locked in the future (while Bitcoin doesn't have the ability to expire transactions, it does have a field called <code>nLockTime</code> which makes a transaction invalid until some point in the future).  The cancellation transaction simply sends coins from <code>btc_bob_addr</code> to some other address <code>btc_bob_addr2</code> presumably controlled by Bob.  If Alice doesn't receive the BTC in time, she is able to broadcast the cancellation transaction, which triggers case 1 and unlocks Alice's BitBTC while returning the BTC to Bob.  (If the cancellation transaction travels over a broadcast medium, the transaction should be encrypted to Alice's public key.  This way, Alice has the option to give Bob an extension of time; she can simply wait to publish the cancellation transaction.  If the cancellation transaction was broadcast to e.g. the whole Black Lizard network unencrypted, arbitrary third parties can take away Alice's option by publishing the cancellation transaction to the Bitcoin network themselves.)</p> <p>N.b. the <code>op_invoke_oracle</code> is instructions to the bridge app, the platform does not need to know how to interpret it.  All the platform \"knows\" is that the oracle now has the ability to create a transaction saying either \"the result of the <code>op_invoke_asset</code> in block , transaction , operation  is 0\" or \"the result is 1\", which causes the platform to run the respective case.  The locked balance goes into a special account-like object belonging to this transaction, which is destroyed when the transaction finishes.  We should validate that if control reaches the end of the transaction, no locked assets remain (i.e. every control path results in spending all locked assets).  This is actually possible since operations establishing or disposing of locked balances always use literal amounts (i.e. you can't send an amount determined by a computation)."},{"location":"docs/other/blacklizard-app-finarch/#bond-markets-with-oracles","title":"Bond markets with oracles","text":"<p>Alice lending Bob platform assets:</p> <pre><code>op_lock_asset &lt;bob&gt; &lt;collateral&gt;\nop_transfer &lt;alice&gt; &lt;bob&gt; &lt;debt&gt;\nstate = op_invoke_oracle &lt;bond_app_id&gt; &lt;return 0 if &lt;bob&gt; sends &lt;debt_plus_fee&gt; to &lt;alice&gt;&gt;\nswitch( state )\n{\ncase 0:\n    /* loan repaid on time */\n    op_send_locked_asset &lt;bob&gt; &lt;collateral&gt;\n    break;\n\ncase fail_to_reach_consensus:\n    /* loan expired */\n    op_send_locked_asset &lt;alice&gt; &lt;collateral&gt;\n}\n</code></pre>"},{"location":"docs/other/blacklizard-app-finarch/#oracle-notes","title":"Oracle notes","text":"<p>Before the first <code>op_invoke_oracle</code> operation, the transaction can do any operations.  After <code>op_invoke_oracle</code>, it can only do ops that are guaranteed to be valid at any time in the future, i.e. only totally prefunded operations like distributing locked assets are allowed.</p> <p>Since <code>op_oracle_result</code> can cause </p>"},{"location":"docs/other/blacklizard-app-finarch/#app-operational-accounts","title":"App operational accounts","text":"<p>Each app has an <code>app_record</code>.  The <code>app_record</code> is similar to a user account structure, it has a name and controls balances (although withdrawing balances works differently from normal accounts).</p> <p>The <code>app_record</code> specifies an equity asset representing ownership in the DAC.  The equity asset is a normal UIA, it can be a decentralized asset with unrestricted transfer capabilities, or it can be centralized (the issuer can whitelist holders, it can have (relinquishable) owner permissions for freezing, revocation, issuing new shares, raising issuance cap, etc.)</p> <p>The <code>app_record</code> also specifies 1-101 app delegates.  The app delegates are effectively a multisig authority over the asset balance.  If the <code>app_equity_can_vote_for_delegates</code> flag is set in the app record, app equity shares can vote for app delegates.  If <code>app_equity_round_reward</code> is set to a number greater than zero, app delegates receive that much equity the first time they sign an app state in a platform-level round.</p> <p>A platform-level transaction is said to invoke an app if it contains an <code>invoke_app</code> operation.  The <code>invoke_app</code> operation has three fields:</p> <pre><code>struct op_invoke_app\n{\n    app_id app;\n    pair&lt;asset_id, amount&gt; app_fee_immediate;\n    pair&lt;asset_id, amount&gt; app_fee_on_accept;\n};\n</code></pre> <p>The </p> <p>An operational account has one or more app delegates which approve an app state using DPOS.</p>"},{"location":"docs/other/blacklizard-app-finarch/#financial-architecture-of-distributed-applications_1","title":"Financial architecture of distributed applications","text":"<p>When an app is created, it is given an app ID, and an account-like record.  The app ID controls the operational funds.</p> <p>An app has app delegates and app equity shares.  App equity shares are a UIA which represent the owners of an app (receive income generated by running the app), while app delegates represent the management of an app (responsible for operations including timely transfers of funds according to app semantics).</p> <p>If <code>app_equity_can_vote_for_delegates</code> flag is set in the app record, app equity shares can vote for app delegates.  If <code>app_equity_max_inflation</code> is set to a number greater than zero, app delegates can earn equity by signing off on app state.  The <code>app_num_delegates</code> field tells how many delegates the app has -- an app can have a single delegate.</p> <p>App delegates collectively have authority over the semantics of the app.  In particular, platform assets (i.e. the core asset, BitAssets or UIA's) sent to the app ID are redistributed among users of the app according to the consensus of the app delegates.  Thus you can have an app for e.g. a prediction market which takes BitUSD from some users and redistributes to other users based on arbitrary things.</p> <p>Any app delegate can initiate a transfer from the app's operational funds.  Such a transfer is included in the signed state as well.  This is the only way for funds to move out of an app's operational balance.</p> <p>A signed state consists of some set of transactions which have been included in blocks and are considered to be valid by an app delegate.  In order to update their app state, an app delegate can create a <code>sign_app_state</code> operation indicating a block height and veto set.  A transaction is included in the signed set if it is in a block at or below the indicated height, includes at least one transfer from the app ID, and is not in the veto set.  (Since the TaPoS-like inclusion of a block hash in the signature generation means the transaction cannot be replayed on a fork where the block in question has a different hash, noting the block height suffices).</p> <p>The app state is a signed state which a majority of app delegates have approved.  Transactions are no-ops except for fees and app fees until they are included in the app state.  If a majority of app delegates veto a transaction, it is never included in the app state and is always a no-op except for fees and app fees.</p> <p>There is a separate <code>pay_app_fee</code> operation.  The <code>pay_app_fee</code> operation has similar semantics as a transfer to the app account. except it remains active even if the block has been vetoed by the app in question.  For apps where fully evaluating a transaction is very expensive, <code>pay_app_fee</code> allows app delegates to be assured the transaction publisher will reimburse them for the evaluation costs even if they veto the transaction (by definition, app delegates don't know a transaction won't be vetoed until they evaluate it).</p> <p>In other words, once BitUSD or core shares are released from the app account's balance, it becomes fungible with all other BitUSD.  If a majority of app delegates later decide that the BitUSD shouldn't have been distributed after all, there's no way for the app to get the BitUSD back -- if the platform allowed them to do so, we could end up unwinding many unrelated transactions the BitUSD participated in, causing loss of funds to innocent third parties!  The only way to be sure the majority of app delegates will never decide in the future to veto it, is to wait until a majority have passed on their opportunity to veto.</p> <p>Notes:</p> <ul> <li>Transfers of app equity shares and updates of app delegate votes are not signed off by app delegate(s), thus equity holders retain the ability to fire app delegates even in the case where an app has a single delegate!</li> <li>The app state is the minimum amount of app semantics the platform needs to know about in order to distribute platform asset denominated operational funds.</li> <li>The app may have additional semantics that depend on other things in the Black Lizard blockchain, or indeed any external blockchain, or for that matter the actual world.  However, the platform need not know about these additional semantics to evaluate whether the app delegates have reached a consensus on how to distribute platform assets.</li> <li>The signed set of a particular app delegate must be monotonically increasing.  Thus, an app delegate cannot include a transaction in a veto set if it was included in a previous signed set for that app delegate.</li> <li>Transactions involving multiple apps need to be thoroughly specced and tested.</li> <li>App delegates need not sign in any particular order; there is no \"signing schedule.\"</li> </ul>"},{"location":"docs/other/blacklizard-app-finarch/#signing-efficiency-concerns","title":"Signing efficiency concerns","text":"<p>A <code>sign_app_state</code> operation can include signatures from any number of app delegates; a transaction can include any number of <code>sign_app_state</code> operations; any number of <code>sign_app_state</code> transactions can be included in a block (within network size limits).  As a consequence of the previous, including a transaction in the app state takes at least two blocks -- one block to include the transaction, a second block to include <code>sign_app_state</code> from the majority of delegates.  This is the fundamental limitation of the architecture.</p> <p>App delegates are free to defer publishing signatures indefinitely.  An app which recommends its delegates to wait for longer periods is essentially deliberately choosing to have a longer block interval.  The benefit of doing so is reducing transaction size and platform fees.</p> <p>It would be technically possible to allow a majority of delegates to sign particular txid's.  But that would open the door to app-level double spending attacks.  For most apps, the validity of an app transaction depends on the transaction history of that app.  So signing a particular txid would be something an app delegate acting in good faith could never do, because they can't know the tx won't become invalid between the time it's signed and the time it's included in a block.</p> <p>Allowing to sign a txid and app history is a viable approach, but seems overly complicated and limited scalability.</p>"},{"location":"docs/other/blacklizard-app-finarch/#distribution-of-app-income","title":"Distribution of app income","text":"<p>App delegates should regularly send operational funds designated as profits to the app's equity UIA address.  The platform will then distribute these proportionally to the equity holders.  Profits may come from fees or other sources depending on the app's business model.</p> <p>The question is how to efficiently distribute the equity -- which is effectively the same problem as distributing yield.  (I.e., yield could be viewed as the DAC sending BitUSD-denominated fees to the BitUSD asset's address for proportional distribution to BitUSD holders.)</p> <p>The simplest way is to iterate through all equity asset balances and increment them appropriately.  The problem with this approach is it places all the resource load for evaluation in a single block.  The solution is lazy evaluation.  For each balance, as well as the balance amount and asset ID, we should track when the balance last changed.  If the balance has been affected by a dividend since it last moved, it is marked as dirty.</p> <p>Any operation which touches a dirty balance results in placing the dirty balance in a list of balances with pending dividends, then restarting with a clean balance of zero.  Thus, senders can still send people money even if the recipient has a pending dividend.  Withdrawing from a balance with a pending dividend will fail!</p> <p>For this reason we have the <code>claim_dividend</code> and <code>disclaim_dividend</code> operations.  The <code>claim_dividend</code> will remove all balances of an asset from the list of balances with pending dividends; the claimed amount must be equal to the pending dividend.  The <code>claim_disclaim_dividend</code> operation has a claim amount which must be less than or equal to the pending dividend; and the sum of the claim and disclaim amount must be greater than or equal to the pending dividend.</p> <p>The purpose of <code>claim_disclaim_dividend</code> is to allow withdrawal transactions to be created by cold storage solutions which may have multi-hour turnaround time.  I.e. the cold storage might publish a withdrawal transaction claiming a dividend of $0.03 / share which fails to validate because the actual dividend was $0.0301 / share (<code>claim_dividend</code> must be exact).  The <code>claim_disclaim_dividend</code> can allow a margin of error, the wallet can publish \"I think the dividend is $0.03 / share, but I know this may be based on outdated information and the dividend may have increased.  So if additional dividends up to $0.0050 / share exist, proceed with the transaction anyway (I agree not to claim the excess).\"</p>"},{"location":"docs/other/blacklizard-app-ideas/","title":"Blacklizard app ideas","text":""},{"location":"docs/other/blacklizard-app-ideas/#introduction","title":"Introduction","text":"<p>This paper is an incomplete draft, more of a starting point for discussion than a final product.</p>"},{"location":"docs/other/blacklizard-app-ideas/#app-ideas","title":"App ideas","text":"<p>Here are some ideas for app use cases the platform should consider supporting.</p> <ul> <li>Vote feature:  ID verification</li> <li>Vote feature:  Commissioned polls</li> <li>Vote feature:  Secret ballot elections</li> <li>LMSR based prediction markets</li> <li>Custom UIA</li> <li>Equitable BitAssets</li> <li>Atomic cross-chain trading</li> <li>Bond market</li> <li>Decentralized joint ventures (\"equitable UIA\")</li> <li>Selling equity in sale of future software / music licenses (\"BitShares Play\")</li> <li>Crowdfunding</li> <li>Sweepstakes</li> <li>Market as an app?</li> </ul>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/","title":"Preface","text":"<p>This document is intended to assist with the testing of custom authorities (CA) per BSIP 40 Specifications that is available starting in the 4.0.0 Consensus Release.</p> <ul> <li>Testing<ul> <li>Blockchain Initialization</li> <li>Authorized Transfers</li> </ul> </li> </ul> <p>Additional custom authorities instructions can be found at Custom Authority Templates</p>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#testing-overview","title":"Testing Overview","text":"<p>These test instructions should be executed from a command line interface wallet (CLI) that has been built for your test environment.  For example, testing performed with the public testnet requires the CLI built for the BitShares Public Testnet.  The following instructions were executed on a private testing environment where TEST was the core token.  These exact instructions may differ on your test environment in the following ways:</p> <ul> <li>The core token may be different than \"TEST\" (e.g. \"BTS\").  Modify the commands to use your core token symbol.</li> <li>The account names that are created might already exist in your test environment.  Check for their existence by running <code>get_account &lt;ACCOUNT_NAME&gt;</code>.  Modify the commands to use alternate account names).</li> <li>The asset names that are created might already exist in your test environment.  Check for the existence by running <code>get_asset &lt;ACCOUNT_NAME&gt;</code>.  Modify the commands to use alternate asset names).</li> </ul>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#initialize-blockchain-for-custom-authorities","title":"Initialize blockchain for Custom Authorities","text":"<p>The instructions in this section are for configuring a blockchain that has not yet been initialized for custom authorites.  These instructions will likely need to be tailored for your particular blockchain.  You may alternatively test these instructions on the BitShares public testnet.</p>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#1-nathan-fund-the-committee-account","title":"1. Nathan: Fund the committee-account","text":"<p>Fund the committee-account so that it can pay for any proposal that is approved by committee members</p> <pre><code>transfer nathan committee-account 2000 TEST \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#2-nathan-fund-the-committee-account","title":"2. Nathan: Fund the committee-account","text":"<p>Create a dominating committee member (nathan)</p> <pre><code>create_committee_member nathan \"\" true\nvote_for_committee_member nathan nathan true true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#3-nathan-propose-the-ca-settings","title":"3. Nathan: Propose the CA settings","text":"<p>Propose the following example settings for CA</p> <pre><code>propose_parameter_change \"nathan\" \"2020-01-14T00:00:00\" {\"extensions\": {\"custom_authority_options\": {\"max_custom_authority_lifetime_seconds\": 3000000, \"max_custom_authorities_per_account\": 9, \"max_custom_authorities_per_account_op\": 4, \"max_custom_authority_restrictions\": 8}} } true\n</code></pre> Warning This proposed parameter change will also override the other setting in the <code>extensions</code> corresponding to HTLC (<code>updatable_htlc_options</code>).  To preserve the blockchains current settings for HTLC, the proposed parameter change should also include the blockchain's existing setting.  For example, it could be expressed as:<p><code>propose_parameter_change \"nathan\" \"2020-01-14T00:00:00\" {\"extensions\": {\"custom_authority_options\": {\"max_custom_authority_lifetime_seconds\": 3000000, \"max_custom_authorities_per_account\": 9, \"max_custom_authorities_per_account_op\": 4, \"max_custom_authority_restrictions\": 8}, \"updatable_htlc_options\": {\"max_timeout_secs\": 2419200, \"max_preimage_size\": 19200}} } true</code> <p>Identify the proposal ID by reviewing the last transaction in the proposing account's history</p> <pre><code>get_account_history nathan 5\n</code></pre> <p>The proposal ID will have an identifier such as 1.10.x.  The proposal can be reviewed with</p> <pre><code>get_object 1.10.x\n</code></pre> <p>The proposal can be approved with</p> <pre><code>approve_proposal \"nathan\" 1.10.x {\"active_approvals_to_add\":[\"nathan\"]} true\n</code></pre> <p>The settings will take effect when the proposal expires and will be reflected in the output of <code>get_global_properties</code>.</p>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#scenario-authorized-transfers","title":"Scenario: Authorized Transfers","text":"<p>This scenario involves one account (alice) authorizing another account (bob) to another funds from her account to any other account.</p>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#initialize-the-test-environment","title":"Initialize the Test Environment","text":"<p>The following test scenarios portray the interaction of four actors: an account registrar (\"faucet\"), and three regular accounts (\"alice\", \"bob\", \"charlie\").  Each actor will require their own wallet with their own keys to ensure that the keys for the authorizing account are not accidentally signing transactions for the authorized account.  Certain steps must be performed by specific actors from their respective wallet.  Each step of the instructions describe which actor is performing that step (e.g. \"Registrar: ...\" indicates that the action should be performed from the wallet of the registrar account).  The reader should use the respective actor's wallet.</p>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#1-create-and-fund-accounts","title":"1. Create and fund accounts","text":"Tip The example assumes that a \"faucet\" account exists and is a lifetime member that can register accounts.  The tester may choose to use another account under their control as a substitute for the \"faucet\" account."},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#alice","title":"Alice","text":""},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#alice-create-keys","title":"Alice: Create keys","text":"<pre><code>unlocked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"5Ki...\",\n  \"pub_key\": \"TEST8fur3fMGPat5ffGgTuMRstPEtE33FJZVJY6ciRr1Jr1EyowdyG\"\n}\n\nunlocked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"5Ja...\",\n  \"pub_key\": \"TEST6VEKPCcz6E27qcrTP2zAGk4EXJsK5y7RoukBmAJc3pwxLzB4hv\"\n}\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#faucet-register-alice","title":"Faucet: Register Alice","text":"<p>Register the account of alice</p> <pre><code>register_account alice TEST8fur3fMGPat5ffGgTuMRstPEtE33FJZVJY6ciRr1Jr1EyowdyG TEST6VEKPCcz6E27qcrTP2zAGk4EXJsK5y7RoukBmAJc3pwxLzB4hv faucet faucet 60 true\n</code></pre> <p>Transfer core tokens to alice</p> <pre><code>transfer faucet alice 500 TEST \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#alice-import-active-key-into-alices-wallet","title":"Alice: Import active key into Alice's wallet","text":"<pre><code>import_key alice 5Ja...\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#bob","title":"Bob","text":""},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#bob-create-keys","title":"Bob: Create keys","text":"<pre><code>unlocked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"5JC...\",\n  \"pub_key\": \"TEST8cNcBs8ra3AWeRFQ6RfYSVsmby5cpRVuXAfg4Hj8XoXVXdD1io\"\n}\n\nunlocked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"5J6...\",\n  \"pub_key\": \"TEST59nKbp4fb1aYxdxMkuALPkjMV4b4iDuWenivjwTjyE3pM3wE3H\"\n}\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#faucet-register-bob","title":"Faucet: Register Bob","text":"<p>Register the account of bob</p> <pre><code>register_account bob TEST8cNcBs8ra3AWeRFQ6RfYSVsmby5cpRVuXAfg4Hj8XoXVXdD1io TEST59nKbp4fb1aYxdxMkuALPkjMV4b4iDuWenivjwTjyE3pM3wE3H faucet faucet 60 true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#bob-import-active-key-into-bobs-wallet","title":"Bob: Import active key into Bob's wallet","text":"<pre><code>import_key alice 5J6...\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#charlie","title":"Charlie","text":""},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#charlie-create-keys","title":"Charlie: Create keys","text":"<pre><code>unlocked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"5JY...\",\n  \"pub_key\": \"TEST6WacA9VfxetmDTYDuzuBNyEQYf4pqWMjCpxtZ47swKH3iPUcPY\"\n}\n\nunlocked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"5KV...\",\n  \"pub_key\": \"TEST8S3K1dwwUk8N886AHxcewrQEsT1qyHRH5cCsbmpxpYMqfrBNPh\"\n}\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#faucet-register-charlie","title":"Faucet: Register Charlie","text":"<p>Register the account of charlie</p> <pre><code>register_account charlie TEST6WacA9VfxetmDTYDuzuBNyEQYf4pqWMjCpxtZ47swKH3iPUcPY TEST8S3K1dwwUk8N886AHxcewrQEsT1qyHRH5cCsbmpxpYMqfrBNPh charlie charlie 60 true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#charlie-import-active-keys-into-wallet","title":"Charlie: Import active keys into wallet","text":"<pre><code>import_key alice 5KV...\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#2-alice-authorizes-bob-to-transfer-funds-from-her-account","title":"2. Alice authorizes Bob to transfer funds from her account","text":"<p>Alice authorizes Bob to transfer funds from her account to Charlie's account.  Authorizing this transaction will require building a transaction in the CLI Wallet.</p> <p>The <code>custom_authority_create_operation</code> has an identifier of 54.  In this example, Alice has an account identifier of 1.2.19, Bob has an account identifier of 1.2.20, and Charlie has an account identifier of 1.2.21.</p> Tip Each custom authority is limited to a finite timespan that is bounded between <code>valid_from</code> and <code>valid_to</code>.  Custom authorities are further limited by the blockchain's Committee to a maximum lifetime durations (<code>max_custom_authority_lifetime_seconds</code>).  This duration can be querying the blockchain's global properties with <code>get_global_properties</code>.  Therefore, when creating an authority for a test, the tester should set the <code>valid_to</code> date-time to be within the duration of the current date-time.  For example, on January 1, 2020 a tester learns that that maximum lifetime for a custom authority is 15 days.  Consequently the <code>valid_to</code> should be set to before January 16, 2020. <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction 0 [54, {\"account\":\"1.2.19\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2020-01-31T00:00:00\",\"operation_type\":0,\"auth\":{\"weight_threshold\":1,\"account_auths\":[[\"1.2.20\",1]],\"key_auths\":[],\"address_auths\":[]},\"restrictions\":[{\"member_index\":2,\"restriction_type\":0,\"argument\":[7,\"1.2.21\"]}]}]\nset_fees_on_builder_transaction 0 1.3.0\n</code></pre> <p>Optionally preview the transaction before signing.</p> <pre><code>preview_builder_transaction 0\n</code></pre> <p>which will produce an output similar to</p> <pre><code>{\n  \"ref_block_num\": 0,\n  \"ref_block_prefix\": 0,\n  \"expiration\": \"1970-01-01T00:00:00\",\n  \"operations\": [[\n      54,{\n        \"fee\": {\n          \"amount\": 260000,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"account\": \"1.2.19\",\n        \"enabled\": true,\n        \"valid_from\": \"1970-01-01T00:00:00\",\n        \"valid_to\": \"2030-01-01T00:17:20\",\n        \"operation_type\": 0,\n        \"auth\": {\n          \"weight_threshold\": 1,\n          \"account_auths\": [[\n              \"1.2.20\",\n              1\n            ]\n          ],\n          \"key_auths\": [],\n          \"address_auths\": []\n        },\n        \"restrictions\": [{\n            \"member_index\": 2,\n            \"restriction_type\": 0,\n            \"argument\": [\n              7,\n              \"1.2.21\"\n            ],\n            \"extensions\": []\n          }\n        ],\n        \"extensions\": []\n      }\n    ]\n  ],\n  \"extensions\": []\n}\n</code></pre> <p>Sign and broadcast the transaction.</p> <pre><code>sign_builder_transaction 0 true\n</code></pre> <p>Identify the custom authority ID by reviewing the last transaction in the authorizing account's history</p> <pre><code>get_account_history alice 5\n</code></pre> <p>The custom authority ID will have an identifier such as 1.17.x.  The custom authority can be reviewed with</p> <pre><code>get_object 1.17.x\n</code></pre> <p>For example, </p> <pre><code>[{\n    \"id\": \"1.17.0\",\n    \"account\": \"1.2.19\",\n    \"enabled\": true,\n    \"valid_from\": \"1970-01-01T00:00:00\",\n    \"valid_to\": \"2020-01-31T00:00:00\",\n    \"operation_type\": 0,\n    \"auth\": {\n      \"weight_threshold\": 1,\n      \"account_auths\": [[\n          \"1.2.20\",\n          1\n        ]\n      ],\n      \"key_auths\": [],\n      \"address_auths\": []\n    },\n    \"restrictions\": [[\n        0,{\n          \"member_index\": 2,\n          \"restriction_type\": 0,\n          \"argument\": [\n            7,\n            \"1.2.21\"\n          ],\n          \"extensions\": []\n        }\n      ]\n    ],\n    \"restriction_counter\": 1\n  }\n]\n</code></pre>"},{"location":"docs/testing/Testing-BSIP40%3A-Custom-Authorities/#3-bob-transfers-funds-from-alice-to-charlie","title":"3. Bob: Transfers funds from Alice to Charlie","text":"<p>Bob uses the CLI Wallet's transacation builder to transfer funds from Alice to Charlie</p> <p>Bob's active key, as determined by <code>get_account</code>, is TEST59nKbp4fb1aYxdxMkuALPkjMV4b4iDuWenivjwTjyE3pM3wE3H</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction 0 [0, {\"from\":\"1.2.19\",\"to\":\"1.2.21\",\"amount\": {\"amount\":\"10\",\"asset_id\":\"1.3.0\"} } ]\nset_fees_on_builder_transaction 0 1.3.0\nsign_builder_transaction2 0 [\"TEST59nKbp4fb1aYxdxMkuALPkjMV4b4iDuWenivjwTjyE3pM3wE3H\"] true\n</code></pre> Note In order for an authorized party to use CA in the CLI wallet requires using the \"builder transaction\" and the specific command <code>sign_builder_transaction2</code> but not <code>sign_builder_transaction</code>.  <code>sign_builder_transaction2</code> requires an extra parameter where optional public keys may be specified for signing a transaction.  This should be used by the authorized account (e.g. Bob) to include their authorized public key which should have been previously imported into the wallet for the signing to be successful. <p>The successful transfer can be confirmed by checking Charlie's account history</p> <pre><code>get_account charlie 5\n</code></pre> <p>and by inspecting Charlie's balances</p> <pre><code>list_account_balances charlie\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/","title":"Preface","text":"<p>This document is intended to assist with the testing of simple maker-taker fees per BSIP 81 Specifications.</p> <p>These test instructions should be executed from a command line interface wallet (CLI) that has been built for your test environment.  For example, testing performed with the public testnet requires the CLI built for the BitShares Public Testnet.  The following instructions were executed on a private testing environment where TEST was the core token.  These exact instructions may differ on your test environment in the following ways:</p> <ul> <li>The core token may be different than \"TEST\" (e.g. \"BTS\").  Modify the commands to use your core token symbol.</li> <li>The account names that are created might already exist in your test environment.  Check for their existence by running <code>get_account &lt;ACCOUNT_NAME&gt;</code>.  Modify the commands to use alternate account names).</li> <li>The asset names that are created might already exist in your test environment.  Check for the existence by running <code>get_asset &lt;ACCOUNT_NAME&gt;</code>.  Modify the commands to use alternate account names).</li> </ul>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#overview","title":"Overview","text":"<p>From BSIP-81:</p> <p>\"This BSIP proposes a protocol change to enable asset owners to specify different market fee rate for maker orders and taker orders.\"</p> <p>All trades that are filled on the DEX are charged a fee called the \"market fee\".  For an asset without any market fee reward, the market fee equals the amount of an asset that is being received by an account (<code>filled_trade</code>) multiplied by the market fee % (<code>market_fee_percent</code>), which is set by the asset owner; this amount is capped by the maximum market fee which is also set by the asset owner.</p> <p>The formula for calculating the fee (<code>market_fee</code>) that is distributed to the asset owner is</p> <p>market_fee = filled_trade \u00d7 market_fee_percent</p> <p>This BSIP introduces a market fee % that is different if the filled order is a maker order or a taker order.</p> <p> Example 1 </p> <p>100 units of an asset, called XRAY, is traded and filled on the DEX.  The asset's market fee percent is 2% for a maker order, and is 4% for a taker order.  The resulting market fee for a maker order is</p> <p>market_fee = 100 XRAY \u00d7 2% = 2 XRAY</p> <p>The resulting market fee for a taker order is</p> <p>market_fee = 100 XRAY \u00d7 5% = 5 XRAY</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#test-scenario-simple-maker-taker-fees-for-two-user-issued-assets","title":"Test Scenario: Simple Maker Taker Fees for Two User-Issued Assets","text":"<p>This test scenario will demonstrate the charging of different market fees based on whether the filled order is a maker or a taker order.</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#initialize-accounts","title":"Initialize Accounts","text":"<p>The following test scenario portrays the interaction of four actors: a faucet account (\"faucet\"), an asset owner (\"asset-owner\"), and two trading accounts (\"alice\" and \"bob\").  Each will require their own wallet with their own keys (see Tips for Creating New Keys).  Certain steps must be performed by specific actors from their respective wallet.  Each step of the instructions describe which actor is performing that step (e.g. \"Alice: ...\" indicates that the action should be performed from the wallet of the \"alice\" account).  The reader should use the respective actor's wallet.</p> Tip Testers who prefer convenience over strict separation of keys may prefer to keep the private keys of every actor in a single wallet."},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#faucet-create-the-actors","title":"Faucet: Create the actors","text":"<p>Create the accounts of the asset owner, alice, and bob from the faucet account (or any other LTM account)</p> <pre><code>register_account asset-owner TEST... TEST... faucet faucet 0 true\nregister_account alice TEST... TEST... faucet faucet 0 true\nregister_account bob TEST... TEST... faucet faucet 0 true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#faucet-fund-the-accounts-with-core-token","title":"Faucet: Fund the accounts with core token","text":"<pre><code>transfer faucet asset-owner 1000000 TEST \"\" true\ntransfer faucet alice 5000 TEST \"\" true\ntransfer faucet bob 5000 TEST \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#create-and-issue-the-xray-uia","title":"Create and Issue the XRAY UIA","text":""},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#asset-owner-create-the-asset-type","title":"Asset Owner: Create the Asset Type","text":"<p>The asset, called XRAY, will be created to be consistent with Example 1 with a 2% maker market fee (expressed as 200 in terms of hundredths of a percent) and a 5% taker market fee (expressed as 400 in terms of the hundredths of a percent) that is paid to the asset owner.</p> <pre><code>create_asset asset-owner XRAY 2 {\"max_supply\":\"1000000000000000\",\"market_fee_percent\":200,\"max_market_fee\":\"1000000000000000\",\"issuer_permissions\":1,\"flags\":1,\"core_exchange_rate\":{\"base\":{\"amount\":1,\"asset_id\":\"1.3.0\"},\"quote\":{\"amount\":1,\"asset_id\":\"1.3.1\"}},\"whitelist_authorities\":[],\"blacklist_authorities\":[],\"whitelist_markets\":[],\"blacklist_markets\":[],\"description\":\"\",\"extensions\":{\"taker_fee_percent\":500}} null true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#asset-owner-issue-the-asset","title":"Asset Owner: Issue the Asset","text":"<p>The asset will be issued to one of the trading accounts, \"alice\".</p> <pre><code>issue_asset alice 5000 XRAY \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#create-and-issue-the-zulu-uia","title":"Create and Issue the ZULU UIA","text":""},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#asset-owner-create-the-asset-type_1","title":"Asset Owner: Create the Asset Type","text":"<p>The asset, called ZULU, will be created with a 1% maker market fee (expressed as 100 in terms of hundredths of a percent) and a 3% taker market fee (expressed as 400 in terms of the hundredths of a percent) that is paid to the asset owner.</p> <pre><code>create_asset asset-owner ZULU 2 {\"max_supply\":\"1000000000000000\",\"market_fee_percent\":100,\"max_market_fee\":\"1000000000000000\",\"issuer_permissions\":1,\"flags\":1,\"core_exchange_rate\":{\"base\":{\"amount\":1,\"asset_id\":\"1.3.0\"},\"quote\":{\"amount\":1,\"asset_id\":\"1.3.1\"}},\"whitelist_authorities\":[],\"blacklist_authorities\":[],\"whitelist_markets\":[],\"blacklist_markets\":[],\"description\":\"\",\"extensions\":{\"taker_fee_percent\":300}} null true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#asset-owner-issue-the-asset_1","title":"Asset Owner: Issue the Asset","text":"<p>The asset will be issued to one of the trading accounts, \"bob\".</p> <pre><code>issue_asset bob 5000 ZULU \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#place-orders","title":"Place Orders","text":""},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#overview_1","title":"Overview","text":"<p>Two orders will be constructed such that ZULU should receive 100 XRAY minus the market fee that is dictated by Example 1.</p> <p>Alice will first offer to sell 100 XRAY in exchange for 50 ZULU.  This should make Alice's order the maker in the exchange in a future match and fill of her order.</p> <p>Bob will next offer to sell 50 ZULU in exchange for 100 XRAY.  This should match Alice's pre-existing limit order to make Bob's order the taker in the match.</p> <p>Those orders should be matched and filled.</p> <p>Alice should be charged a maker market fee of 1% for her received asset type ZULU.  She should ultimately receive</p> <p>50 ZULU \u00d7 (100% - 1%) = 50 ZULU \u00d7 (99%) = 49.5 ZULU</p> <p>Bob should be charged a taker market fee of 5% for his received asset type XRAY.</p> <p>100 XRAY \u00d7 (100% - 5%) = 50 ZULU \u00d7 (95%) = 95 XRAY</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#alice-sell-100-xray","title":"Alice: Sell 100 XRAY","text":"<p>Place an order to sell 100 XRAY for at least 50 ZULU.  Set the order to expire after 600 seconds.</p> <pre><code>sell_asset alice 100 XRAY 50 ZULU 600 false true\n</code></pre> <p>Check the order book to find the newly placed order.</p> <pre><code>get_order_book XRAY ZULU 1\n</code></pre> <p>The order will be waiting on the books for a match.</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#bob-sell-50-zulu","title":"Bob: Sell 50 ZULU","text":"<p>Place an order to sell 50 ZULU for at least 100 XRAY.  Set the order to expire after 600 seconds.</p> <pre><code>sell_asset bob 50 ZULU 100 XRAY 600 false true\n</code></pre> <p>Check the order book and find the order</p> <pre><code>get_order_book XRAY ZULU 1\n</code></pre> <p>The original order by alice will no longer be in the book because it was matched and filled with the order from bob.</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#alice-check-balances-and-history","title":"Alice: Check balances and history","text":"<p>Check the account history for more details</p> <pre><code>get_account_history alice 2\n</code></pre> <p>The fee for the filled transaction should be 1% of the filled order of 50 ZULU = 0.5 ZULU.</p> <p>Check the balance of Alice to confirm reception of 49.5 ZULU.</p> <pre><code>list_account_balances alice\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#bob-check-balances-and-history","title":"Bob: Check balances and history","text":"<p>Check the account history for more details</p> <pre><code>get_account_history bob 2\n</code></pre> <p>The fee for the filled transaction should be 5% of the filled order of 100 XRAY = 5 XRAY.</p> <p>Check the balance of Bob to confirm reception of 95 XRAY.</p> <pre><code>list_account_balances bob\n</code></pre>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#check-the-distribution-of-the-market-fees","title":"Check the Distribution of the Market Fees","text":""},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#check-the-distribution-of-the-market-fee-of-xray","title":"Check the Distribution of the Market Fee of XRAY","text":"<p>The market fee of 5 XRAY should be distributed to the asset owner.</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#any-wallet-check-the-fees-distributed-to-the-asset-owner","title":"Any Wallet: Check the fees distributed to the Asset Owner","text":"<p>First find the <code>dynamic_asset_data_id</code> of the asset</p> <pre><code>get_asset XRAY\n</code></pre> <p>Use the value for <code>dynamic_asset_data_id</code> field in an invocation of <code>get_object</code></p> <pre><code>get_object 2.3.x\n</code></pre> <p>Inspect the value found in the output for <code>accumulated_fees</code> which will be listed in satoshis.  This asset has a precision of 2 which means that the actual fees collected should be divided by 10<sup>2</sup>.  The result should be 5.00 XRAY which is expressed as 500 XRAY satoshis.</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#check-the-distribution-of-the-market-fee-of-zulu","title":"Check the Distribution of the Market Fee of ZULU","text":"<p>The market fee of 0.5 ZULU should be distributed to the asset owner.</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#any-wallet-check-the-fees-distributed-to-the-asset-owner_1","title":"Any Wallet: Check the fees distributed to the Asset Owner","text":"<p>First find the <code>dynamic_asset_data_id</code> of the asset</p> <pre><code>get_asset ZULU\n</code></pre> <p>Use the value for <code>dynamic_asset_data_id</code> field in an invocation of <code>get_object</code></p> <pre><code>get_object 2.3.x\n</code></pre> <p>Inspect the value found in the output for <code>accumulated_fees</code> which will be listed in satoshis.  This asset has a precision of 2 which means that the actual fees collected should be divided by 10<sup>2</sup>.  The result should be 0.5 ZULU which is expressed as 50 ZULU satoshis</p>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#reference","title":"Reference","text":"<ul> <li>Creating New Keys</li> <li>Claiming Accumulated Fees</li> </ul>"},{"location":"docs/testing/Testing-BSIP81%3A-Simple-Maker-Taker-Fees/#unit-tests","title":"Unit Tests","text":"<p>The following unit tests that have been prepared to test the new functionality (2136) for the BSIP (BSIP-81).</p> <ul> <li>setting taker fees for a user-issued asset</li> <li>setting taker fees for a smart asset</li> <li>default taker fees after hardfork</li> <li>different maker and taker fees charged when filling limit orders after HF for a user-issued asset</li> <li>different maker and taker fees charged when filling limit orders after HF for a user-issued asset when the maker fee % is zero</li> <li>different maker and taker fees charged when filling limit orders after HF for a user-issued asset when the taker fee % is zero</li> <li>different maker and taker fees charged when filling limit orders after HF for a smart asset</li> <li>different maker and taker fees charged when partially filling limit orders</li> </ul>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/","title":"Preface","text":"<p>The instructions below are intended to assist with manual testing of changes made to share market fees between an asset owner and a trader's registrar and referrer in BitShares Core v.3.0.0.</p> <p>These test instructions should be executed from a command line interface wallet (CLI) that has been built for your test environment.  For example, testing performed with the public testnet requires the CLI built for the BitShares Public Testnet.  The following instructions were executed on a private testing environment where TEST was the core token.  These exact instructions may differ on your test environment in the following ways:</p> <ul> <li>The core token may be different than \"TEST\" (e.g. \"BTS\").  Modify the commands to use your core token symbol.</li> <li>The account names that are created might already exist in your test environment.  Check for their existence by running <code>get_account &lt;ACCOUNT_NAME&gt;</code>.  Modify the commands to use alternate account names).</li> <li>The asset names that are created might already exist in your test environment.  Check for the existence by running <code>get_asset &lt;ACCOUNT_NAME&gt;</code>.  Modify the commands to use alternate account names).</li> </ul>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#overview","title":"Overview","text":"<p>From BSIP-43:</p> <p>\"At this time unfortunately an assets owner is not able to share market fees with registrars and referrers to stimulate them to market the asset trading, so we suggest to add this possibility. Furthermore, enabling this feature for MPAs (e.g. bitCNY or bitUSD) can provide additional bounty for Bitshares registrars and referrals which can lead to more traders joining to the ecosystem.</p> <p>An asset owner defines the market_fee_reward_percent  in asset options - what percentage of the market fee he wants to share with the registrar. market_fee * market_fee_reward_percent goes the registrar. market_fee * (1 - market_fee_reward_percent) goes to the asset owner.</p> <p>Registrar splits the reward between itself and its referrers by defining reward_percent, which defines referrer's percentage.  It is defined per each other using the already existing BitShares mechanism.</p> <p>Market fee reward is accumulated on the user account.</p> <p>Each user decides when he wants to claim the market fee reward and move it to their active balance.\"</p> <p>The distribution variables are summarized in the table below.</p> Distribution Variable Determined by Distributed to Description market_fee_percent Asset Owner Asset Owner Portion of the market trade that is collected as a fee market_fee_reward_percent Asset Owner Registrar of trader that is receiving the asset from the filled order Portion of the market_fee that is shared with the registrar reward_percent Registrar of trader that is receiving the asset from the filled order Referrer of trader that is receiving the asset from the filled order Portion of the registrar's portion that is shared with referrers <p>The formulas for calculating the fee distribution are in the table below.</p> Distribution Recipient  Formula for Distribution Amount Asset Owner filled_trade \u00d7 market_fee_percent \u00d7 (1 - market_fee_reward_percent) Registrar filled_trade \u00d7 market_fee_percent \u00d7 market_fee_reward_percent \u00d7 (1 - reward_percent) Referrer filled_trade \u00d7 market_fee_percent \u00d7 market_fee_reward_percent \u00d7 reward_percent <p> Example 1 </p> <p>100 units of an asset, called ASSET, is traded and filled on the DEX.  The market fee percent for the asset is 2%.  The resulting market fee is 2 ASSET.</p> <p>The market_fee_reward_percent is 40%, and the reward_percent is 80%.</p> Distribution Recipient Distribution Calculation per Formula Distribution Amount Asset Owner 100 ASSET \u00d7 0.02 \u00d7 (1 - 0.40) 1.20 ASSET Registrar 100 ASSET \u00d7 0.02 \u00d7 0.40 \u00d7 (1 - 0.80) 0.16 ASSET Referrer 100 ASSET \u00d7 0.02 \u00d7 0.40 \u00d7 0.80 0.64 ASSET Total - 2.00 ASSET"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#test-scenario-shared-market-fees-for-a-uia","title":"Test Scenario: Shared Market Fees for a UIA","text":"<p>This test scenario will demonstrate the sharing of market fees of a user-issued asset (UIA) by using the same settings that are described in Example 1.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#initialize-accounts","title":"Initialize Accounts","text":"<p>The following test scenario portrays the interaction of six actors: a faucet account (\"faucet\"), an account registrar (\"registrar\"), a referrer (\"referrer\"), an asset owner (\"asset-owner\"), and two trading accounts (\"trader-80\" and \"trader-30\").  Each will require their own wallet with their own keys (see Tips for Creating New Keys).  Certain steps must be performed by specific actors from their respective wallet.  Each step of the instructions describe which actor is performing that step (e.g. \"Registrar: ...\" indicates that the action should be performed from the wallet of the registrar account).  The reader should use the respective actor's wallet.</p> Tip Testers who prefer convenience over strict separation of keys may prefer to keep the private keys of every actor in a single wallet."},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#faucet-register-the-registrar-and-referrers","title":"Faucet: Register the registrar and referrers","text":"<p>Create the accounts of the registrar, and the referrers from the faucet account (or any other LTM account)</p> <pre><code>register_account registrar TEST... TEST... faucet faucet 0 true\ntransfer faucet registrar 20000 TEST \"\" true\n\nregister_account referrer TEST... TEST... faucet faucet 0 true\ntransfer faucet referrer 1000 TEST \"\" true\n\nregister_account asset-owner TEST... TEST... faucet faucet 0 true\ntransfer faucet asset-owner 50000 TEST \"\" true\n\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#referrer-upgrade-to-lifetime-membership","title":"Referrer: Upgrade to Lifetime Membership","text":"<pre><code>upgrade_account referrer true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#registrar-upgrade-to-lifetime-membership","title":"Registrar: Upgrade to Lifetime Membership","text":"<pre><code>upgrade_account registrar true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#asset-owner-upgrade-to-lifetime-membership","title":"Asset Owner: Upgrade to Lifetime Membership","text":"<pre><code>upgrade_account asset-owner true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#registrar-create-the-trader-accounts","title":"Registrar: Create the trader accounts","text":"<p>Trader 80 will be created to be consistent with Example 1 such that 80% of all registrar-destined fees are distributed to the referrer.</p> <pre><code>register_account trader-80 TEST... TEST... registrar referrer 80 true\n</code></pre> <p>Trader 30 will be created as another trader such that 30% of all registrar-destined fees are distributed to the referrer.</p> <pre><code>register_account trader-30 TEST... TEST... registrar referrer 30 true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#faucet-fund-the-trader-accounts","title":"Faucet: Fund the trader accounts","text":"<pre><code>transfer faucet trader-80 5000 TEST \"\" true\ntransfer faucet trader-30 5000 TEST \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#create-and-issue-the-uia","title":"Create and Issue the UIA","text":""},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#asset-owner-create-the-asset-type","title":"Asset Owner: Create the Asset Type","text":"<p>The asset, called ASSET, will be created to be consistent with Example 1 with a 20% market fee (expressed as 2000 in terms of hundredths of a percent) and a 40% reward fee (expressed as 4000 in terms of the hundredths of a percent) that is shared with the registrar of the trading account that receives the asset.</p> <pre><code>create_asset asset-owner ASSET 2 {\"max_supply\":\"1000000000000000\",\"market_fee_percent\":2000,\"max_market_fee\":\"1000000000000000\",\"issuer_permissions\":1,\"flags\":1,\"core_exchange_rate\":{\"base\":{\"amount\":1,\"asset_id\":\"1.3.0\"},\"quote\":{\"amount\":1,\"asset_id\":\"1.3.1\"}},\"whitelist_authorities\":[],\"blacklist_authorities\":[],\"whitelist_markets\":[],\"blacklist_markets\":[],\"description\":\"\",\"extensions\":{\"reward_percent\":4000}} null \n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#asset-owner-issue-the-asset","title":"Asset Owner: Issue the Asset","text":"<p>The asset will be issued to one of the trading accounts, \"trader-30\".</p> <pre><code>issue_asset trader-30 5000 ASSET \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#place-orders","title":"Place Orders","text":"<p>Two orders will be constructed such that Trader 80 should receive 100 ASSET minus the market fee that is dictated by Example 1.</p> <p>Trader 30 will offer to sell 100 ASSET in exchange for 50 TEST.</p> <p>Trader 80 will offer to sell 50 TEST in exchange for 100 ASSET.</p> <p>Those orders will be matched and filled and the market fee of 2% will be deducted such that Trader 80 will finally receive 98 ASSET.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#trader-30-sell-100-asset","title":"Trader 30: Sell 100 ASSET","text":"<p>Place an order to sell 100 ASSET for at least 50 TEST.</p> <pre><code>sell_asset trader-30 100 ASSET 50 TEST 600 false true\n</code></pre> <p>Check the order book to find the newly placed order.</p> <pre><code>get_order_book ASSET TEST 1\n</code></pre> <p>The order will be waiting on the books for a match.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#trader-80-sell-50-test","title":"Trader 80: Sell 50 TEST","text":"<p>Place an order to sell 50 TEST for at least 100 ASSET.</p> <pre><code>sell_asset trader-80 50 TEST 100 ASSET 600 false true\n</code></pre> <p>Check the order book and find the order</p> <pre><code>get_order_book ASSET TEST 1\n</code></pre> <p>The original order by trader-30 will no longer be in the book because it was matched and filled against the order from trader-80.</p> <p>Check the account history for more details</p> <pre><code>get_account_history trader-80 2\n</code></pre> <p>The fee for the filled transaction should be 2% of the filled order of 100 ASSET = 2 ASSET.</p> <p>Check the balance of Trader 80 to confirm reception of 98 ASSET.</p> <pre><code>list_account_balances trader-80\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#check-the-distribution-of-the-market-fee","title":"Check the Distribution of the Market Fee","text":"<p>The market fee of 2 ASSET should now be distributed between the asset owner, the registrar, and the referrer per the description from Example 1.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#any-wallet-check-the-fees-distributed-to-the-asset-owner","title":"Any Wallet: Check the fees distributed to the Asset Owner","text":"<p>First find the <code>dynamic_asset_data_id</code> of the asset</p> <pre><code>get_asset ASSET\n</code></pre> <p>Use the value for <code>dynamic_asset_data_id</code> field in an invocation of <code>get_object</code></p> <pre><code>get_object 2.3.x\n</code></pre> <p>Inspect the value found in the output for <code>accumulated_fees</code> which will be listed in satoshis.  This asset has a precision of 2 which means that the actual fees collected should be divided by 10<sup>2</sup>.  The result should be 1.20 ASSET.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#any-wallet-check-the-fees-distributed-to-the-registrar","title":"Any Wallet: Check the fees distributed to the Registrar","text":"<pre><code>get_vesting_balances registrar\n</code></pre> <p>There might be many vesting balances listed.  Find the vesting balance of type <code>market_fee_sharing</code> with <code>asset_id</code> that matches the <code>id</code> of ASSET (Call <code>get_asset ASSET</code> to identify its <code>id</code> which will be of the form \"1.3.x\").</p> <p>Inspect the value for the <code>balance</code> field for the ASSET.  This asset has a precision of 2 which means that the actual fees collected should be divided by 10<sup>2</sup>.  The result should be 0.16 ASSET.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#any-wallet-check-the-fees-distributed-to-the-referrer","title":"Any Wallet: Check the fees distributed to the Referrer","text":"<pre><code>get_vesting_balances referrer\n</code></pre> <p>There might be many vesting balances listed.  Find the vesting balance of type <code>market_fee_sharing</code> with <code>asset_id</code> that matches the <code>id</code> of ASSET (Call <code>get_asset ASSET</code> to identify its <code>id</code> which will be of the form \"1.3.x\").</p> <p>Inspect the value for the <code>balance</code> field for the ASSET.  This asset has a precision of 2 which means that the actual fees collected should be divided by 10^2.  The result should be 0.64 ASSET.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#optional-withdraw-the-distributed-fees","title":"(Optional) Withdraw the Distributed Fees","text":"<p>Withdrawal of fees may optionally be tested by following these instructions.</p>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#reference-unit-tests","title":"Reference: Unit Tests","text":"<p>For reference, the following unit tests that have been prepared to test the new functionality (1419) for the issue (BSIP-43, 1268).</p> <ul> <li>Market Fee Rewards<ul> <li>asset_rewards_test for Smart Asset</li> <li>asset_claim_reward_test for UIA</li> </ul> </li> <li>Asset Configuration<ul> <li>cannot_create_asset_with_additional_options_before_hf</li> <li>create_asset_with_additional_options_after_hf</li> <li>cannot_update_additional_options_before_hf</li> <li>update_additional_options_after_hf</li> </ul> </li> <li>Tests with no rewards for registrar and referrer<ul> <li>white_list_asset_rewards_test</li> <li>white_list_is_empty_test</li> <li>white_list_doesnt_contain_registrar_test</li> <li>white_list_contains_referrer_test</li> </ul> </li> <li>Sanity checks<ul> <li>create_vesting_balance_object_test</li> <li>issue_asset</li> </ul> </li> <li>Blockchain Integration Tests<ul> <li>create_asset_via_proposal_test</li> <li>update_asset_via_proposal_test</li> <li>create_vesting_balance_with_instant_vesting_policy_before_hf1268_test</li> <li>create_vesting_balance_with_instant_vesting_policy_after_hf1268_test</li> <li>create_vesting_balance_with_instant_vesting_policy_via_proposal_test</li> </ul> </li> <li>Asset Fee accumulation<ul> <li>accumulated_fees_before_hf_test</li> <li>accumulated_fees_after_hf_test</li> <li>accumulated_fees_with_additional_options_after_hf_test</li> </ul> </li> </ul>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#reference-creating-new-keys","title":"Reference: Creating New Keys","text":"<p>Registering a new account in BitShares requires the provision of at least two public keys to the registrar: one for the owner key and another for the active key.  Some registrars require a third public key for the memo.</p> <p>Random keys for a BitShares account can be created by using the CLI Wallet command <code>suggest_brain_key</code>.</p> <pre><code>locked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"XXXXXX ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ......\",\n  \"wif_priv_key\": \"5......\",\n  \"pub_key\": \"TEST......\"\n}\n</code></pre> <p>The public key is provided to a registrar during account registration.  The WIF private key should be securely archived.</p> <p>After account registration, a key can be imported into a CLI wallet with the command <code>import_key</code>.</p> <pre><code>locked &gt;&gt;&gt; gethelp import_key\n\nusage: import_key ACCOUNT_NAME_OR_ID  WIF_PRIVATE_KEY\n\nexample: import_key \"1.3.11\" 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\nexample: import_key \"usera\" 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#reference-withdraw-the-distributed-fees","title":"Reference: Withdraw the Distributed Fees","text":""},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#registrar-and-referrer-withdraw-from-vesting-balances","title":"Registrar and Referrer: Withdraw from Vesting Balances","text":"<p>The vesting balances for either the registrar or the referrer can be withdrawn with the following steps.</p> <p>Three identifiers will be needed to withdraw the vesting balance.</p> <ul> <li>The identifier of the account</li> <li>The identifier of the asset</li> <li>The identifier of the vesting balance</li> </ul> <p>The identifier of the account can be found by inspecting the <code>id</code> (\"1.3.x\") in the output of <code>get_account</code></p> <pre><code>get_account &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>The identifier of the asset can be found by inspecting the <code>id</code> in the output of <code>get_asset</code> (\"1.2.y\").</p> <pre><code>get_asset &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>The identifier of the vesting balance can be found by inspecting the <code>id</code> in the output of <code>get_vesting_balances</code> (\"1.13.z\").</p> <pre><code>get_vesting_balances &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>There might be many vesting balances listed.  Find the vesting balance of type <code>market_fee_sharing</code> with <code>asset_id</code> that matches the <code>id</code> of ASSET.   Note the <code>id</code> of the vesting balance (e.g. \"1.13.z\") to use in the next step.</p> <p>Withdraw the vesting balance with the <code>vesting_balance_withdraw_operation</code> which has an operation identifier of 33.  This will require building a transaction in the CLI Wallet.</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction 0 [33, {\"vesting_balance\":\"1.13.z\", \"owner\":\"1.2.x\", \"amount\":{\"amount\":16, \"asset_id\":\"1.3.y\"}}]\nset_fees_on_builder_transaction 0 1.3.0\n</code></pre> <p>Optionally preview the transaction before signing.</p> <pre><code>preview_builder_transaction 0\n</code></pre> <p>Sign and broadcast the transaction.</p> <pre><code>sign_builder_transaction 0 true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1268%3A-Market-Fee-Sharing/#asset-owner-withdraw-from-accumulated-fees","title":"Asset Owner: Withdraw from Accumulated Fees","text":"<p>The vesting balances for either the registrar or the referrer can be withdrawn with the following steps.</p> <p>Three identifiers will be needed to withdraw the vesting balance.</p> <ul> <li>The identifier of the account</li> <li>The identifier of the asset</li> </ul> <p>The identifier of the account can be found by inspecting the <code>id</code> (\"1.3.x\") in the output of <code>get_account</code></p> <pre><code>get_account &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>The identifier of the asset can be found by inspecting the <code>id</code> in the output of <code>get_asset</code> (\"1.2.y\").</p> <pre><code>get_asset &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>Withdraw the vesting balance with the <code>asset_claim_fees_operation</code> which has an operation identifier of 43.  This will require building a transaction in the CLI Wallet.</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction 0 [43, {\"issuer\":\"1.2.x\", \"amount_to_claim\":{\"amount\":N, \"asset_id\":\"1.3.y\"}}]\nset_fees_on_builder_transaction 0 1.3.0\n</code></pre> <p>Optionally preview the transaction before signing.</p> <pre><code>preview_builder_transaction 0\n</code></pre> <p>Sign and broadcast the transaction.</p> <pre><code>sign_builder_transaction 0 true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/","title":"Overview","text":"<p>The instructions below are intended to assist with manual testing of changes made to address the issue of inconsistent call price when MCR is changed in BitShares Core v.3.0.0.</p> <p>These test instructions should be executed from a command line interface wallet (CLI) that has been built for your test environment.  For example, testing performed with the public testnet requires the CLI built for the BitShares Public Testnet.  The following instructions were executed on a private testing environment where BTS was the core token.  These exact instructions may differ on your test environment in the following ways:</p> <ul> <li>The core token may be different than \"BTS\" (e.g. \"TEST\").  Modify the commands to use your core token symbol.</li> <li>The account names that are created might already exist in your test environment.  Check for their existence by running <code>get_account ACCOUNT_NAME</code>.  Modify the commands to use alternate account names).</li> <li>the asset names that are created might already exist in your test environment.  Check for the existence by running <code>get_asset ACCOUNT_NAME</code>.  Modify the commands to use alternate account names).</li> <li>The output shown in the results below are from a testnet from before HF-1270. The sample output often contains the undesired behavior that is being fixed. Testing in a \"fixed\" environment should display the results that reflect the changed MCR as suggested at the end of Step 3 of Scenario 1 and Scenario 2.</li> </ul>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#unit-tests","title":"Unit Tests","text":"<p>For reference, the following unit tests that have been prepared to test the fixes (1324,1469,1493) for  the issue (1270,1423).</p> <ul> <li>mcr_bug_increase_before1270</li> <li>mcr_bug_increase_after1270</li> <li>mcr_bug_decrease_before1270</li> <li>mcr_bug_decrease_after1270</li> </ul>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#initialize-the-test-environment","title":"Initialize the Test Environment","text":"<p>The following test scenarios portray the interaction of five actors: an account registrar issuer (\"nathan\"), an asset issuer (\"nathan\"), a feed publisher (\"publisher-a\"), and two asset borrowers/traders (\"trader-a\" and \"trader-b\").  Each will require their own wallet with their own keys.  Certain steps must be performed by specific actors from their respective wallet.  Each step of the instructions describe which actor is performing that step.  The reader should use the respective actor's wallet.</p> Tip Testers who prefer convenience over strict separation of keys may prefer to keep the private keys of every actor in a single wallet."},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#1-registrar-create-a-feed-publisher","title":"1. Registrar: Create a feed publisher","text":"Note This step assumes that the registrar account is already created, and that the tester already has the keys of the registrar. <p>Create the account of a publisher called \"publisher-a\"</p> <pre><code>unlocked &gt;&gt;&gt; suggest_brain_key\nsuggest_brain_key \n{\n\"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"...,\n  \"pub_key\": \"BTS5RP4bVx2utcnoq1J9eSDFFZu3izmMqvZtGors4ctL1ar9Hy8q9\"\n}\nunlocked &gt;&gt;&gt; suggest_brain_key \nsuggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"...\",\n  \"pub_key\": \"BTS7HbpzSg89bKkuWhyCpd3V57QBTtRRWupLgVgDGwisikd9W4XD2\"\n}\n\nregister_account(string name, public_key_type owner, public_key_type active, string registrar_account, string referrer_account, uint32_t referrer_percent, bool broadcast)\n\nregister_account publisher-a BTS5RP4bVx2utcnoq1J9eSDFFZu3izmMqvZtGors4ctL1ar9Hy8q9 BTS7HbpzSg89bKkuWhyCpd3V57QBTtRRWupLgVgDGwisikd9W4XD2 nathan nathan 0 true\n</code></pre> <p>Give the single feed publisher some core tokens</p> <pre><code>transfer nathan publisher-a 1000 BTS \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#2-issuer-create-the-asset","title":"2. Issuer: Create the asset","text":"<p>Create a bitasset as described in the reference instructions</p> <pre><code>create_asset \"nathan\" \"TESTUSDA\" 4 {\"max_supply\":\"1000000000000000\",\"market_fee_percent\":0,\"max_market_fee\":\"1000000000000000\",\"issuer_permissions\":161,\"flags\":0,\"core_exchange_rate\":{\"base\":{\"amount\":1,\"asset_id\":\"1.3.0\"},\"quote\":{\"amount\":1,\"asset_id\":\"1.3.1\"}},\"whitelist_authorities\":[],\"blacklist_authorities\":[],\"whitelist_markets\":[],\"blacklist_markets\":[],\"description\":\"\",\"extensions\":[]} {} false\n</code></pre> <p>Specify who can publish feeds</p> <pre><code>update_asset_feed_producers TESTUSDA [\"publisher-a\"] false\n\nunlocked &gt;&gt;&gt; update_asset_feed_producers TESTUSDA [\"publisher-a\"] true\nupdate_asset_feed_producers TESTUSDA [\"publisher-a\"] true\n{\n  \"ref_block_num\": 23131,\n  \"ref_block_prefix\": 1301299163,\n  \"expiration\": \"2019-03-12T21:18:55\",\n  \"operations\": [[\n      13,{\n        \"fee\": {\n          \"amount\": 50000000,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"issuer\": \"1.2.17\",\n        \"asset_to_update\": \"1.3.1\",\n        \"new_feed_producers\": [\n          \"1.2.22\"\n        ],\n        \"extensions\": []\n      }\n    ]\n  ],\n  \"extensions\": [],\n  \"signatures\": [\n        \"201cd18934e5bfece04ca2f88f66e7832998db8f9214810eefdb6662d2519b17b73a469a5d404c90f3df1eacdcdb219882039756ea2e1ffdcc2ab52f9dccbde052\"\n  ]\n}\n\n\nunlocked &gt;&gt;&gt; get_bitasset_data TESTUSDA\nget_bitasset_data TESTUSDA\n{\n  \"id\": \"2.4.0\",\n  \"feeds\": [[\n      \"1.2.22\",[\n        \"1970-01-01T00:00:00\",{\n          \"settlement_price\": {\n            \"base\": {\n              \"amount\": 0,\n              \"asset_id\": \"1.3.0\"\n            },\n            \"quote\": {\n              \"amount\": 0,\n              \"asset_id\": \"1.3.0\"\n            }\n          },\n          \"maintenance_collateral_ratio\": 1750,\n          \"maximum_short_squeeze_ratio\": 1500,\n          \"core_exchange_rate\": {\n            \"base\": {\n              \"amount\": 0,\n              \"asset_id\": \"1.3.0\"\n            },\n            \"quote\": {\n              \"amount\": 0,\n              \"asset_id\": \"1.3.0\"\n            }\n          }\n        }\n      ]\n    ]\n  ],\n  \"current_feed\": {\n    \"settlement_price\": {\n      \"base\": {\n        \"amount\": 0,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 0,\n        \"asset_id\": \"1.3.0\"\n      }\n    },\n    \"maintenance_collateral_ratio\": 1750,\n    \"maximum_short_squeeze_ratio\": 1500,\n    \"core_exchange_rate\": {\n      \"base\": {\n        \"amount\": 0,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 0,\n        \"asset_id\": \"1.3.0\"\n      }\n    }\n  },\n  \"current_feed_publication_time\": \"2019-03-12T21:18:25\",\n  \"options\": {\n    \"feed_lifetime_sec\": 86400,\n    \"minimum_feeds\": 1,\n    \"force_settlement_delay_sec\": 86400,\n    \"force_settlement_offset_percent\": 0,\n    \"maximum_force_settlement_volume\": 2000,\n    \"short_backing_asset\": \"1.3.0\",\n    \"extensions\": []\n  },\n  \"force_settled_volume\": 0,\n  \"is_prediction_market\": false,\n  \"settlement_price\": {\n    \"base\": {\n      \"amount\": 0,\n      \"asset_id\": \"1.3.0\"\n    },\n    \"quote\": {\n      \"amount\": 0,\n      \"asset_id\": \"1.3.0\"\n    }\n  },\n  \"settlement_fund\": 0\n}\n\n\nunlocked &gt;&gt;&gt; get_object 2.4.0\nget_object 2.4.0\n[{\n    \"id\": \"2.4.0\",\n    \"asset_id\": \"1.3.1\",\n    \"feeds\": [[\n        \"1.2.22\",[\n          \"1970-01-01T00:00:00\",{\n            \"settlement_price\": {\n              \"base\": {\n                \"amount\": 0,\n                \"asset_id\": \"1.3.0\"\n              },\n              \"quote\": {\n                \"amount\": 0,\n                \"asset_id\": \"1.3.0\"\n              }\n            },\n            \"maintenance_collateral_ratio\": 1750,\n            \"maximum_short_squeeze_ratio\": 1500,\n            \"core_exchange_rate\": {\n              \"base\": {\n                \"amount\": 0,\n                \"asset_id\": \"1.3.0\"\n              },\n              \"quote\": {\n                \"amount\": 0,\n                \"asset_id\": \"1.3.0\"\n              }\n            }\n          }\n        ]\n      ]\n    ],\n    \"current_feed\": {\n      \"settlement_price\": {\n        \"base\": {\n          \"amount\": 0,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"quote\": {\n          \"amount\": 0,\n          \"asset_id\": \"1.3.0\"\n        }\n      },\n      \"maintenance_collateral_ratio\": 1750,\n      \"maximum_short_squeeze_ratio\": 1500,\n      \"core_exchange_rate\": {\n        \"base\": {\n          \"amount\": 0,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"quote\": {\n          \"amount\": 0,\n          \"asset_id\": \"1.3.0\"\n        }\n      }\n    },\n    \"current_feed_publication_time\": \"2019-03-12T21:18:25\",\n    \"options\": {\n      \"feed_lifetime_sec\": 86400,\n      \"minimum_feeds\": 1,\n      \"force_settlement_delay_sec\": 86400,\n      \"force_settlement_offset_percent\": 0,\n      \"maximum_force_settlement_volume\": 2000,\n      \"short_backing_asset\": \"1.3.0\",\n      \"extensions\": []\n    },\n    \"force_settled_volume\": 0,\n    \"is_prediction_market\": false,\n    \"settlement_price\": {\n      \"base\": {\n        \"amount\": 0,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 0,\n        \"asset_id\": \"1.3.0\"\n      }\n    },\n    \"settlement_fund\": 0,\n    \"asset_cer_updated\": false,\n    \"feed_cer_updated\": false\n  }\n]\n\nunlocked &gt;&gt;&gt; get_object 2.3.1\nget_object 2.3.1\n[{\n    \"id\": \"2.3.1\",\n    \"current_supply\": 0,\n    \"confidential_supply\": 0,\n    \"accumulated_fees\": 0,\n    \"fee_pool\": 250000000\n  }\n]\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#3-feed-publisher-publish-initial-feed","title":"3. Feed Publisher: Publish initial feed","text":"<p>20 BTS per 1 USD, MCR 1.75, MSSR of 1.10 (mimicing mcr_bug_increase_before1270)</p> <p>= 20*10^5 satoshis of BTS per 1 * 10^4 satoshis of USD = 2000000 BTS-satoshis per 10000 USD-satoshis</p> <p>asset.cpp price_feed::is_for() insists that the prices have the asset as the base asset</p> <pre><code>publish_asset_feed publisher-a TESTUSDA {\"settlement_price\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":2000000,\"asset_id\":\"1.3.0\"}},\"maintenance_collateral_ratio\":1750,\"maximum_short_squeeze_ratio\":1100,\"core_exchange_rate\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":1900000,\"asset_id\":\"1.3.0\"}}} true\n{\n\"ref_block_num\": 23950,\n\"ref_block_prefix\": 437340707,\n\"expiration\": \"2019-03-12T22:34:10\",\n\"operations\": [[\n      19,{\n        \"fee\": {\n          \"amount\": 100000,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"publisher\": \"1.2.22\",\n        \"asset_id\": \"1.3.1\",\n        \"feed\": {\n          \"settlement_price\": {\n            \"base\": {\n              \"amount\": 10000,\n              \"asset_id\": \"1.3.1\"\n            },\n            \"quote\": {\n              \"amount\": 2000000,\n              \"asset_id\": \"1.3.0\"\n            }\n          },\n          \"maintenance_collateral_ratio\": 1750,\n          \"maximum_short_squeeze_ratio\": 1100,\n          \"core_exchange_rate\": {\n            \"base\": {\n              \"amount\": 10000,\n              \"asset_id\": \"1.3.1\"\n            },\n            \"quote\": {\n              \"amount\": 1900000,\n              \"asset_id\": \"1.3.0\"\n            }\n          }\n        },\n        \"extensions\": []\n      }\n    ]\n  ],\n  \"extensions\": [],\n  \"signatures\": [\n        \"1f7190ea8b60a9c3c22d43917c426abbd4134a5b7a95e65353eaa2b46d57c452916e9f1db9ffe4f7b81506e5eb0b01b6f163061c49ba8b477027c201d1b10443a6\"\n  ]\n}\n\nunlocked &gt;&gt;&gt; get_bitasset_data TESTUSDA\nget_bitasset_data TESTUSDA\n{\n\"id\": \"2.4.0\",\n\"feeds\": [[\n      \"1.2.22\",[\n        \"2019-03-12T22:33:40\",{\n          \"settlement_price\": {\n            \"base\": {\n              \"amount\": 10000,\n              \"asset_id\": \"1.3.1\"\n            },\n            \"quote\": {\n              \"amount\": 2000000,\n              \"asset_id\": \"1.3.0\"\n            }\n          },\n          \"maintenance_collateral_ratio\": 1750,\n          \"maximum_short_squeeze_ratio\": 1100,\n          \"core_exchange_rate\": {\n            \"base\": {\n              \"amount\": 10000,\n              \"asset_id\": \"1.3.1\"\n            },\n            \"quote\": {\n              \"amount\": 1900000,\n              \"asset_id\": \"1.3.0\"\n            }\n          }\n        }\n      ]\n    ]\n],\n  \"current_feed\": {\n    \"settlement_price\": {\n      \"base\": {\n        \"amount\": 10000,\n        \"asset_id\": \"1.3.1\"\n      },\n      \"quote\": {\n        \"amount\": 2000000,\n        \"asset_id\": \"1.3.0\"\n      }\n    },\n    \"maintenance_collateral_ratio\": 1750,\n    \"maximum_short_squeeze_ratio\": 1100,\n    \"core_exchange_rate\": {\n      \"base\": {\n        \"amount\": 10000,\n        \"asset_id\": \"1.3.1\"\n      },\n      \"quote\": {\n        \"amount\": 1900000,\n        \"asset_id\": \"1.3.0\"\n      }\n    }\n  },\n  \"current_feed_publication_time\": \"2019-03-12T22:33:40\",\n  \"options\": {\n    \"feed_lifetime_sec\": 86400,\n    \"minimum_feeds\": 1,\n    \"force_settlement_delay_sec\": 86400,\n    \"force_settlement_offset_percent\": 0,\n    \"maximum_force_settlement_volume\": 2000,\n    \"short_backing_asset\": \"1.3.0\",\n    \"extensions\": []\n  },\n  \"force_settled_volume\": 0,\n  \"is_prediction_market\": false,\n  \"settlement_price\": {\n    \"base\": {\n      \"amount\": 0,\n      \"asset_id\": \"1.3.0\"\n    },\n    \"quote\": {\n      \"amount\": 0,\n      \"asset_id\": \"1.3.0\"\n    }\n  },\n  \"settlement_fund\": 0\n}\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#4-create-borrowerstraders","title":"4. Create Borrowers/Traders","text":"<p>Give some accounts enough collateral asset to borrow the asset into existence, and to place orders for the asset</p>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#trader-a","title":"Trader A","text":""},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#trader-a-create-keys","title":"Trader A: Create keys","text":"<pre><code>unlocked &gt;&gt;&gt; suggest_brain_key \nsuggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"...\",\n  \"pub_key\": \"BTS7B52d2ToTbG7hLqtCXznCrHfB1uHj1tfi3RnPX39MXDVcQvaxY\"\n}\nunlocked &gt;&gt;&gt; suggest_brain_key \nsuggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"...\",\n  \"pub_key\": \"BTS7ubVaqr9sCcEn7RRE714UriqMXWxouu5AteEcYzgBg2XDJrWL1\"\n}\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#registrar-register-trader-a","title":"Registrar: Register Trader A","text":"<p>Register the account of trader-a</p> <pre><code>register_account trader-a BTS7B52d2ToTbG7hLqtCXznCrHfB1uHj1tfi3RnPX39MXDVcQvaxY BTS7ubVaqr9sCcEn7RRE714UriqMXWxouu5AteEcYzgBg2XDJrWL1 nathan nathan 0 true\n</code></pre> <p>Transfer core tokens to trader-a</p> <pre><code>transfer nathan trader-a 10000 BTS \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#create-trader-b","title":"Create Trader B","text":""},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#trader-b-create-keys","title":"Trader B: Create keys","text":"<pre><code>unlocked &gt;&gt;&gt; suggest_brain_key \nsuggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"...\",\n  \"pub_key\": \"BTS6fBqA4pGBXoorHQMcikspLwuZDRMdoXuZeUgsuRx6Ui6Rd3oVw\"\n}\n\nunlocked &gt;&gt;&gt; suggest_brain_key \nsuggest_brain_key \n{\n  \"brain_priv_key\": \"...\",\n  \"wif_priv_key\": \"...\",\n  \"pub_key\": \"BTS5ez6PFW7gSnZmX2x18cX5swKL4S2TH3zPH51HUKXhVbNVD9UCk\"\n}\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#registrar-register-trader-b","title":"Registrar: Register Trader B","text":"<p>Register the account of trader-b</p> <pre><code>register_account trader-b BTS6fBqA4pGBXoorHQMcikspLwuZDRMdoXuZeUgsuRx6Ui6Rd3oVw BTS5ez6PFW7gSnZmX2x18cX5swKL4S2TH3zPH51HUKXhVbNVD9UCk nathan nathan 0 true\n</code></pre> <p>Transfer core tokens to trader-b</p> <pre><code>transfer nathan trader-b 5000 BTS \"\" true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#scenario-1-increased-mcr-should-initiate-a-margin-call","title":"Scenario 1: Increased MCR should initiate a margin call","text":"<p>This scenario is similar to mcr_bug_increase_before1270 and mcr_bug_increase_after1270 where an increase of the MCR should make outstanding loans, which were initially well collateralized, to become undercollateralized and available for automatic sale of the collateral by the blockchain.</p>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#1-trader-a-trader-a-borrows-at-cr-of-18","title":"1. Trader A: Trader A Borrows at CR of 1.8","text":"<p>Trader A will borrow at CR of 1.8 using 1000 BTS.  Given the published feed price of 20 BTS for 1 USD, 1000 BTS can purchase 27.78 USD --&gt; 1000000 BTS-satoshis for 277800 USD-satoshis.</p> <pre><code>unlocked &gt;&gt;&gt; borrow_asset trader-a 27.78 TESTUSDA 1000 true\nborrow_asset trader-a 27.78 TESTUSDA 1000 true\n1517481ms th_a       wallet.cpp:1975               borrow_asset         ] broadcast: true \n{\n  \"ref_block_num\": 24514,\n  \"ref_block_prefix\": 3807515098,\n  \"expiration\": \"2019-03-12T23:25:45\",\n  \"operations\": [[\n      3,{\n        \"fee\": {\n          \"amount\": 2000000,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"funding_account\": \"1.2.23\",\n        \"delta_collateral\": {\n          \"amount\": 100000000,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"delta_debt\": {\n          \"amount\": 277800,\n          \"asset_id\": \"1.3.1\"\n        },\n        \"extensions\": []\n      }\n    ]\n  ],\n  \"extensions\": [],\n  \"signatures\": [\n\"1f5cec798432e5297f1b26023506a77a1af6e6d7c8c63223adcb633d59e8f9e3706294f25b85a9e88b00ac10f2a18a91a3f312db56ce526a02e2f016a1a6c44593\"\n  ]\n}\n\nunlocked &gt;&gt;&gt; list_account_balances trader-a\n\nlist_account_balances trader-a\n8980 BTS\n27.7800 TESTUSDA\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#2-trader-b-trader-b-borrows-at-cr-of-20","title":"2. Trader B: Trader B Borrows at CR of 2.0","text":"<p>Trader B will borrow at CR of 2.0 using 200 BTS.  Given the published feed price of 20 BTS for 1 USD, 200 BTS can purchase 5 USD --&gt; 1000000 BTS-satoshis for 277800 USD-satoshis.</p> <pre><code>unlocked &gt;&gt;&gt; borrow_asset trader-b 5.0 TESTUSDA 200 true\nborrow_asset trader-b 5.0 TESTUSDA 200 true\n2139269ms th_a       wallet.cpp:1975               borrow_asset         ] broadcast: true \n{\n  \"ref_block_num\": 24628,\n  \"ref_block_prefix\": 1706587157,\n  \"expiration\": \"2019-03-12T23:36:05\",\n  \"operations\": [[\n  3,{\n    \"fee\": {\n      \"amount\": 2000000,\n      \"asset_id\": \"1.3.0\"\n    },\n    \"funding_account\": \"1.2.24\",\n    \"delta_collateral\": {\n      \"amount\": 20000000,\n      \"asset_id\": \"1.3.0\"\n    },\n    \"delta_debt\": {\n      \"amount\": 50000,\n      \"asset_id\": \"1.3.1\"\n    },\n    \"extensions\": []\n  }\n]\n  ],\n  \"extensions\": [],\n\"signatures\": [\n\"1f4ee4b7bfb12db78c4f11554c5234613d73aca4439e11023cd84a1398d1e492d4604712a60cce8afffaac937c12b014e4fc4db5d253da7acb3c5d80761c320328\"\n]\n}\n\nunlocked &gt;&gt;&gt; list_account_balances trader-b\nlist_account_balances trader-b\n4780 BTS\n5 TESTUSDA\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#3-feed-publisher-changes-mcr-to-20","title":"3. Feed Publisher: Changes MCR to 2.0","text":"<p>The feed producer changes the MCR to 2.0 while not changing the price feed</p> <pre><code>publish_asset_feed publisher-a TESTUSDA {\"settlement_price\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":2000000,\"asset_id\":\"1.3.0\"}},\"maintenance_collateral_ratio\":2000,\"maximum_short_squeeze_ratio\":1100,\"core_exchange_rate\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":1900000,\"asset_id\":\"1.3.0\"}}} true\n</code></pre> <p>No changes will be visible by inspecting the order book with <code>get_order_book</code></p> <p>Before HF1270, no changes to the debt nor collateral of loans will be apparent by inspecting the loans with <code>get_call_orders</code>.</p> <p>After post-HF1270, no changes to the debt nor collateral of loans will be apparent by inspecting the loans with <code>get_call_orders</code>.  The <code>call_price</code> field of every loan will always appear with an effective price of 1.0 after the hardfork.  The call_price of the bitasset is now left as a calculation to client software to calculate.  The call price of the bitasset denominated in the collateral token (e.g. bitCNY/BTS) should be calculated as</p> <p>call_price = (collateral \u00d7 MCR) \u00f7 debt</p>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#4-feed-publisher-reset-the-mcr-to-175","title":"4. Feed Publisher: Reset the MCR to 1.75","text":"<pre><code>publish_asset_feed publisher-a TESTUSDA {\"settlement_price\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":2000000,\"asset_id\":\"1.3.0\"}},\"maintenance_collateral_ratio\":1750,\"maximum_short_squeeze_ratio\":1100,\"core_exchange_rate\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":1900000,\"asset_id\":\"1.3.0\"}}} true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#scenario-2-triggered-margin-calls-should-disappear-because-of-mcr-decrease","title":"Scenario 2: Triggered Margin Calls Should Disappear because of MCR decrease","text":""},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#overview_1","title":"Overview","text":"<p>Decreasing the MPA-price of the collateral is the same as increasing the Collateral-Price of the MPA</p> <p>This scenario is similar to mcr_bug_decrease_before1270 and mcr_bug_decrease_after1270: the example calls for a two-steps:</p> <ol> <li>The original to change from 1 USD exchanging for 1 BTS to 1 USD exchanging for 1.5 BTS (i.e. the collateral loses 50% of its original USD-value).  This should trigger the initiation of a margin call.</li> </ol> <p>Example</p> <p>If the original price is 20 BTS for 1 TESTUSDA then decreasing the collateral by 50% means that the new price feed should be 30 BTS for 1 TESTUSDA.</p> <p>The first loan from the blockchain had a CR of (1000 BTS * {1 TESTUSDA / 20 BTS}) / (27.78 TESTUSDA) = 1.80.  After the price feed up from Step 1, it will only have a collateral ratio of (1000 BTS * {1 TESTUSDA / 30 BTS}) / (27.78 TESTUSDA) = 1.20.  Since the CR &lt; Stage 1 MCR of 1.75, a margin call should be triggered.</p> <p>The second loan from the blockchain had a CR of (200 BTS * {1 TESTUSDA / 20 BTS}) / (5 TESTUSDA) = 2.00.  After the price feed up from Step 1, it will only have a collateral ratio of (200 BTS * {1 TESTUSDA / 30 BTS}) / (5 TESTUSDA) = 1.33.  Since the CR &lt; Stage 1 MCR of 1.75, a margin call should be triggered.</p> <ol> <li>The original MCR is reduced from 1.75 to 1.1.  This should cancel the initiated margin call.</li> </ol> <p>Example</p> <p>The first loan's CR of 1.20 &gt; Stage 2 MCR which should cancel the unfilled margin call.</p> <p>The second loan's CR of 1.33 &gt; Stage 2 MCR which should cancel the unfilled margin call.</p>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#1-feed-publisher-change-the-feed-price","title":"1. Feed Publisher: Change the feed price","text":"<p>The initial published price is 20 BTS for 1 TESTUSDA.  This should be changed such that the collateral is worth 50% less which means that the new price feed should be 30 BTS for 1 TESTUSDA.</p> <p>30 BTS per 1 USD = 30*10^5 satoshis of BTS per 1 * 10^4 satoshis of USD = 3000000 BTS-satoshis per 10000 USD-satoshis</p> <p>The CER will also be adjusted to 95% of the feed price: 28.5 BTS per 1 USD = 2850000 BTS-satoshis per 10000 USD-satoshis</p> <pre><code>publish_asset_feed publisher-a TESTUSDA {\"settlement_price\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":3000000,\"asset_id\":\"1.3.0\"}},\"maintenance_collateral_ratio\":1750,\"maximum_short_squeeze_ratio\":1100,\"core_exchange_rate\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":2850000,\"asset_id\":\"1.3.0\"}}} true\n</code></pre> <p>Check the order book to see for order arising from the initiation of margin calls on the two loans</p> <pre><code>unlocked &gt;&gt;&gt; get_call_orders TESTUSDA 3\nget_call_orders TESTUSDA 3\n[{\n    \"id\": \"1.8.0\",\n    \"borrower\": \"1.2.23\",\n    \"collateral\": 100000000,\n    \"debt\": 277800,\n    \"call_price\": {\n      \"base\": {\n        \"amount\": 2000000,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 9723,\n        \"asset_id\": \"1.3.1\"\n      }\n    }\n  },{\n    \"id\": \"1.8.1\",\n    \"borrower\": \"1.2.24\",\n    \"collateral\": 20000000,\n    \"debt\": 50000,\n    \"call_price\": {\n      \"base\": {\n        \"amount\": 1600,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 7,\n        \"asset_id\": \"1.3.1\"\n      }\n    }\n  }\n]\n</code></pre> <p>Before</p> <pre><code>list_account_balances trader-a\n8980 BTS\n27.7800 TESTUSDA\n\n\nunlocked &gt;&gt;&gt; list_account_balances trader-b\nlist_account_balances trader-b\n4780 BTS\n5 TESTUSDA\n</code></pre> <p>After</p> <pre><code>list_account_balances trader-a\n8980 BTS\n27.7800 TESTUSDA\n\n\nlist_account_balances trader-b\n4940 BTS\n0 TESTUSDA\n\n\nget_call_orders TESTUSDA 5\n[{\n    \"id\": \"1.8.0\",\n    \"borrower\": \"1.2.23\",\n    \"collateral\": 83500000,\n    \"debt\": 227800,\n    \"call_price\": {\n      \"base\": {\n        \"amount\": 1670000,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 7973,\n        \"asset_id\": \"1.3.1\"\n      }\n    }\n  },{\n    \"id\": \"1.8.1\",\n    \"borrower\": \"1.2.24\",\n    \"collateral\": 20000000,\n    \"debt\": 50000,\n    \"call_price\": {\n      \"base\": {\n        \"amount\": 1600,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 7,\n        \"asset_id\": \"1.3.1\"\n      }\n    }\n</code></pre> <p>The order had a fee of 5 BTS</p> <pre><code>2019-03-13T12:54:05 fill_order_operation trader-b fee: 0 BTS \n2019-03-13T12:54:05 limit_order_create_operation trader-b fee: 5 BTS   result: 1.7.0\n\n\n100000000 BTS-satoshis - 83500000 BTS-satoshis = 1000.00000 - 835.00000 BTS = 165 BTS --&gt; 33 BTS per 1 USD which is the median published price of 30 BTS per 1 USD times the MSSR of 1.1\n</code></pre> <p>The sale completed and is not sitting on the book.  Trader B sold his MPA (5 TESTUSDA) in exchange for 160 BTS + 5 BTS (fee).</p>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#2-feed-publisher-change-the-mcr-ratio","title":"2. Feed Publisher: Change the MCR ratio","text":"<pre><code>publish_asset_feed publisher-a TESTUSDA {\"settlement_price\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":3000000,\"asset_id\":\"1.3.0\"}},\"maintenance_collateral_ratio\":1100,\"maximum_short_squeeze_ratio\":1100,\"core_exchange_rate\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":2850000,\"asset_id\":\"1.3.0\"}}} true\n</code></pre>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#3-trader-b-place-an-order","title":"3. Trader B: Place an order","text":"<pre><code>unlocked &gt;&gt;&gt; list_account_balances trader-a\nlist_account_balances trader-a\n8980 BTS\n27.7800 TESTUSDA\n\nunlocked &gt;&gt;&gt; list_account_balances trader-b\nlist_account_balances trader-b\n4720 BTS\n5 TESTUSDA\n</code></pre> <p>Place a 25-second fill-or-kill order to sell 5 USD at the current feed price of 30 BTS for 1 USD</p> <pre><code>sell_asset trader-b 5 TESTUSDA 150 BTS 25 true false\n</code></pre> <p>Checking the account history of trader-b</p> <pre><code>get_account_history trader-b 5\n2019-03-13T12:54:05 fill_order_operation trader-b fee: 0 BTS \n2019-03-13T12:54:05 limit_order_create_operation trader-b fee: 5 BTS   result: 1.7.0\n</code></pre> <p>The limit order, which had a fee of 5 BTS, was filled immediately.  Yet this alone does not indicate how much of the order was filled.</p> <p>Check the balances after the sell order is placed.</p> <pre><code>unlocked &gt;&gt;&gt; list_account_balances trader-a                      \nlist_account_balances trader-a\n8980 BTS\n27.7800 TESTUSDA\n</code></pre> <p>There is no change to the liquid balance of <code>trader-a</code>.</p> <pre><code>unlocked &gt;&gt;&gt; list_account_balances trader-b\nlist_account_balances trader-b\n4880 BTS\n0 TESTUSDA\n</code></pre> <p>The account of trader-b has 0 TESTUSDA and his balance of BTS has increased to 4880.  The net increase of BTS is 160 after accounting for the order fee fee of 5 BTS.  The sale was for 165 BTS for 5 TESTUSDA which is equivalent to 33 BTS for 1 TESTUSDA.  That 33 BTS per 1 TESTUSDA is the MSSR price which equals the median feed price of 30 BTS per 1 TESTUSDA multiplied by the MSSR of 1.1.  The 165 BTS were withdrawn not from the liquid account of tester-a but instead from tester-a's loan collateral which was previously at 835 BTS and backing 22.78 TESTUSDA.  Its equivalent is 83500000 BTS-satoshis and 227800 TESTUSDA-satoshis.  After the margin call is partly filled by matching with the limit order that was introduced by tester-b, that loan collateral is reduced to 670 BTS and with the outstanding debt reduced to 17.78 TESTUSDA.  See  Loan 1.8.0 in the output of <code>get_call_orders</code>.</p> <pre><code>unlocked &gt;&gt;&gt; get_call_orders TESTUSDA 5                          \nget_call_orders TESTUSDA 5\n[{\n    \"id\": \"1.8.1\",\n    \"borrower\": \"1.2.24\",\n    \"collateral\": 40000000,\n    \"debt\": 100000,\n    \"call_price\": {\n    \"base\": {\n        \"amount\": 1600,\n        \"asset_id\": \"1.3.0\"\n    },\n    \"quote\": {\n        \"amount\": 7,\n        \"asset_id\": \"1.3.1\"\n    }\n    }\n},{\n    \"id\": \"1.8.0\",\n    \"borrower\": \"1.2.23\",\n    \"collateral\": 67000000,\n    \"debt\": 177800,\n    \"call_price\": {\n      \"base\": {\n        \"amount\": 3350000,\n        \"asset_id\": \"1.3.0\"\n      },\n      \"quote\": {\n        \"amount\": 9779,\n        \"asset_id\": \"1.3.1\"\n      }\n    }\n  }\n]\n</code></pre> <p>Under pre-HF1270 code, the order by trader-b was matched against an open margin call order against trader-a's loan even though it should not have been margin called because the MCR had been reduced and should have cancelled the margin call for that loan.  If it had been cancelled it would not have been matched against trader-b's limit order.</p> <p>Under post-HF1270 code, the order by trader-b should not be matched against trader-a's loan because trader-a's loan should no longer be callable.</p>"},{"location":"docs/testing/Testing-HF-1270%3A-Effects-of-MCR-Change-on-Call-Price/#4-feed-publisher-reset-the-mcr-to-175-and-the-feed-price-to-the-initial-feed-price","title":"4. Feed Publisher: Reset the MCR to 1.75 and the feed price to the initial feed price","text":"<p>Before exiting this scenario, clean up the state of the blockchain by re-publishing the initial feed price and MCR values.</p> <pre><code> publish_asset_feed publisher-a TESTUSDA {\"settlement_price\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":2000000,\"asset_id\":\"1.3.0\"}},\"maintenance_collateral_ratio\":1750,\"maximum_short_squeeze_ratio\":1100,\"core_exchange_rate\":{\"base\":{\"amount\":10000,\"asset_id\":\"1.3.1\"},\"quote\":{\"amount\":1900000,\"asset_id\":\"1.3.0\"}}} true\n</code></pre> <p>Note that the loans by tester-a and tester-b are still outstanding.  Cleaning them up will require the paying back of their loans.</p>"},{"location":"docs/testing/Testing/","title":"Testing","text":""},{"location":"docs/testing/Testing/#code-coverage-testing","title":"Code coverage testing","text":"<p>Check how much code is covered by unit tests, using gcov/lcov (see http://ltp.sourceforge.net/coverage/lcov.php ).</p> <pre><code>cmake -D ENABLE_COVERAGE_TESTING=true -D CMAKE_BUILD_TYPE=Debug .\nmake\nlcov --capture --initial --directory . --output-file base.info --no-external\nlibraries/fc/bloom_test\nlibraries/fc/task_cancel_test\nlibraries/fc/api\nlibraries/fc/blind\nlibraries/fc/ecc_test test\nlibraries/fc/real128_test\nlibraries/fc/lzma_test README.md\nlibraries/fc/ntp_test\ntests/intense_test\ntests/app_test\ntests/chain_bench\ntests/chain_test\ntests/performance_test\nlcov --capture --directory . --output-file test.info --no-external\nlcov --add-tracefile base.info --add-tracefile test.info --output-file total.info\nlcov -o interesting.info -r total.info libraries/fc/vendor/\\* libraries/fc/tests/\\* tests/\\*\nmkdir -p lcov\ngenhtml interesting.info --output-directory lcov --prefix `pwd`\n</code></pre> <p>Now open <code>lcov/index.html</code> in a browser.</p>"},{"location":"docs/testing/Testing/#unit-testing","title":"Unit testing","text":"<p>We use the Boost unit test framework for unit testing.  Most unit tests reside in the <code>chain_test</code> build target.</p>"},{"location":"docs/testing/Testing/#witness-node","title":"Witness node","text":"<p>The role of the witness node is to broadcast transactions, download blocks, and optionally sign them.</p> <pre><code>./witness_node --rpc-endpoint 127.0.0.1:8090 --enable-stale-production -w '\"1.6.0\"' '\"1.6.1\"' '\"1.6.2\"' '\"1.6.3\"' '\"1.6.4\"' '\"1.6.5\"' '\"1.6.6\"' '\"1.6.7\"' '\"1.6.8\"' '\"1.6.9\"' '\"1.6.10\"' '\"1.6.11\"' '\"1.6.12\"' '\"1.6.13\"' '\"1.6.14\"' '\"1.6.15\"' '\"1.6.16\"' '\"1.6.17\"' '\"1.6.18\"' '\"1.6.19\"' '\"1.6.20\"' '\"1.6.21\"' '\"1.6.22\"' '\"1.6.23\"' '\"1.6.24\"' '\"1.6.25\"' '\"1.6.26\"' '\"1.6.27\"' '\"1.6.28\"' '\"1.6.29\"' '\"1.6.30\"' '\"1.6.31\"' '\"1.6.32\"' '\"1.6.33\"' '\"1.6.34\"' '\"1.6.35\"' '\"1.6.36\"' '\"1.6.37\"' '\"1.6.38\"' '\"1.6.39\"' '\"1.6.40\"' '\"1.6.41\"' '\"1.6.42\"' '\"1.6.43\"' '\"1.6.44\"' '\"1.6.45\"' '\"1.6.46\"' '\"1.6.47\"' '\"1.6.48\"' '\"1.6.49\"' '\"1.6.50\"' '\"1.6.51\"' '\"1.6.52\"' '\"1.6.53\"' '\"1.6.54\"' '\"1.6.55\"' '\"1.6.56\"' '\"1.6.57\"' '\"1.6.58\"' '\"1.6.59\"' '\"1.6.60\"' '\"1.6.61\"' '\"1.6.62\"' '\"1.6.63\"' '\"1.6.64\"' '\"1.6.65\"' '\"1.6.66\"' '\"1.6.67\"' '\"1.6.68\"' '\"1.6.69\"' '\"1.6.70\"' '\"1.6.71\"' '\"1.6.72\"' '\"1.6.73\"' '\"1.6.74\"' '\"1.6.75\"' '\"1.6.76\"' '\"1.6.77\"' '\"1.6.78\"' '\"1.6.79\"' '\"1.6.80\"' '\"1.6.81\"' '\"1.6.82\"' '\"1.6.83\"' '\"1.6.84\"' '\"1.6.85\"' '\"1.6.86\"' '\"1.6.87\"' '\"1.6.88\"' '\"1.6.89\"' '\"1.6.90\"' '\"1.6.91\"' '\"1.6.92\"' '\"1.6.93\"' '\"1.6.94\"' '\"1.6.95\"' '\"1.6.96\"' '\"1.6.97\"' '\"1.6.98\"' '\"1.6.99\"' '\"1.6.100\"'\n</code></pre>"},{"location":"docs/testing/Testing/#running-specific-tests","title":"Running specific tests","text":"<ul> <li><code>tests/chain_test -t block_tests/name_of_test</code></li> </ul>"},{"location":"docs/to_sort/Creating-a-new-FBA/","title":"Creating a new FBA","text":"<p>Creating a new FBA involves some manual steps, as well as a hardfork which sends the fees to the FBA.</p> <ul> <li>Create the FBA asset issuer account (or use existing account).</li> <li>Create the FBA asset.</li> <li>Issue FBA initial distribution.</li> <li>If decentralized governance of the asset is desired, FBA issuer uses the <code>account_update_operation</code> with  <code>owner_special_authority</code> and <code>active_special_authority</code> extensions to set its owner/active authorities to <code>top_holders_special_authority</code>. #516</li> <li>FBA issuer creates buyback account for FBA with <code>account_create_operation</code> including <code>buyback_options</code> extension. #538</li> </ul> <p>Note, the steps with issue numbers cannot be done until the corresponding hardfork date has passed, which (as of this writing) is planned for February 2016.</p> <p>The asset ID of the FBA is then included in the hardfork which implements the fee redirection.  Fees are then directed to the asset's buyback account, provided the asset has a buyback account; otherwise the fees go to the network.  (So in the case of the first FBA in February 2016, when the hardfork to enable the above-mentioned extensions launches, any fees gathered between the redirection hardfork and the buyback account being created will go to the network.  For this reason perhaps the redirection hardfork should be ~3 hours behind the extension hardforks to allow time for the final manual setup.)</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/","title":"Restricting the Power of Custom Authorities","text":"<p>Custom Authorities, which were introduced with BSIP-40, allow any account to authorize another key, account, or authority to submit an operation on behalf of the account.  This powerful feature carries some risk because some operations are so powerful or flexible that it may be undesirable to delegate its power to another entity.  For example, Alice may not wish to authorize Bob to transfer everything from her account; instead Alice may desire to authorize transfers if and only if the asset is Asset A and it is being sent to Charlie.</p> <p>Restrictions are available with Custom Authorities that place restrictions on the use of an operation that are conditioned on various members of that operation.  For example, Alice's desired authorization can be achieved by authorizing Bob to submit a <code>transfer_operation</code> on her behalf if and only if Charlie is specified as the <code>to</code> member, and the <code>amount</code>'s <code>asset_id</code> corresponds to Asset A.  If Bob constructs a transfer operation that satisfies all of the restrictions, he may also set any of the other unrestricted members.</p> <p>Restrictions may be placed on all of the available members to safeguard against this.  It is up to the designer of the custom authority to consider every available member of an operation to safeguard the authorizing account.</p> <p>There are, however, certain challenges or weaknesses with restricting the custom authorities.</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/#precautions","title":"Precautions","text":""},{"location":"docs/to_sort/Custom-Authority-Precautions/#restricting-extensions-in-operations","title":"Restricting Extensions in Operations","text":"<p>Some operations have an <code>extension</code> type member which is intended to carry supplemental information.  When an authorizing party wishes to restrict the extension member from being used by an authorized party, it is not technically possible as of BitShares 4.0, to enforce the <code>extension</code> type member be set to <code>void_t</code> as is possible with other <code>optional&lt;&gt;</code> members.  Instead each member of the <code>extension</code> type must be have restrictions placed on them such that the extension member is effectively prohibited from being set.</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/#restricting-optional-members-in-operations","title":"Restricting Optional Members in Operations","text":"<p>Every optional member in an operation which should not be set by an authorized party needs to have a restriction placed on it such that the member is set equal to <code>void_t</code> .</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/#restricting-optional-members-in-operations_1","title":"Restricting Optional Members in Operations","text":"<p>Every mandatory member in an operation which should be restricted, in the opinion of the authorizing party, should have an appropriate restriction placed on it.</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/#new-members-in-old-operations","title":"New Members in Old Operations","text":"<p>If future releases add a new member to an old operation, existing custom authorities for that operation will be unaware of them and will not be able to restrict authorized parties from specifying that value.  Therefore such an addition should be cautiously implemented by future BitShares developers.</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/#new-operations","title":"New Operations","text":"<p>New operations will be better suited for use with custom operations if they have a narrow focus.  For example, any account that wishes to update its voting slate may only do so, as of BitShares 4.0, by using an authorized voting key which makes use of the <code>account_update_operation</code>.  That custom authority must be tightly restricted because that operation is both broad and flexible.  In contrast, the proposed <code>account_update_votes_operation</code> from BSIP-47 is a narrowly defined and narrowly interpreted operation which is ideally suited for custom authorities.</p>"},{"location":"docs/to_sort/Custom-Authority-Precautions/#sample-restrictions","title":"Sample Restrictions","text":"<p>Further examples of restrictions on custom authorities may be found in Custom Authority Templates and in the custom authority unit tests.</p> <p>When designing a new custom authority for a particular use case it is recommended to create an additional unit test for it.  This will test the new custom authority, and one can optionally generate the JSON template for it, with the use of <code>wdump((&lt;NEW_CUSTOM_AUTHORIZATION_OPERATION&gt;));</code>, which may subsequently be signed and broadcast with the CLI Wallet as is demonstrated in the Custom Authority Templates.</p>"},{"location":"docs/to_sort/Custom-Authority-Templates/","title":"Preface","text":"<p>This document is intended to assist with the use of custom authorities (CA) per BSIP 40 Specifications in the 4.0.0 Consensus Release.</p> <ul> <li>Templates for Creating a Custom Authority<ul> <li>Authorized Restricted Transfers</li> <li>Authorized Unrestricted Trading</li> <li>Authorized Restricted Trading</li> <li>Authorized Feed Publishing by an Account</li> <li>Authorized Feed Publishing by a Key</li> <li>Authorized Account Registration</li> <li>Authorized Voting by a Key</li> <li>Authorized Changing of a Witness Signing Key</li> </ul> </li> <li>Updating a Custom Authority<ul> <li>Updating the Authorization Period</li> <li>Disabling a Custom Authority</li> <li>Enabling a Custom Authority</li> <li>Deleting a Custom Authority</li> <li>Changing the Authorized Account</li> <li>Adding Restrictions to a Custom Authority</li> <li>Removing a Restriction from a Custom Authority</li> </ul> </li> </ul>"},{"location":"docs/to_sort/Custom-Authority-Templates/#custom-authority-json-templates","title":"Custom Authority JSON Templates","text":"<p>One way for an account to create a custom authority is with the CLI Wallet's <code>add_operation_to_builder_transaction</code> command.  This command is used as one step of the of \"builder transaction\" sequence.</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [54, &lt;JSON_template&gt;]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre> <p>where the <code>&lt;builder_handle&gt;</code> is the integer \"handle\" output (e.g. 0, 1, 2, etc.) from the first command in the sequence <code>begin_builder_transaction</code>.   is the JSON encoding of the <code>custom_authority_create_operation</code> (Operation 54) that can be broadcast to the network. <p>Different authorizations require different templates.  This section contains the JSON-encoded templates for various authorizations.  Each of the templates have validity period from <code>valid_from</code> through <code>valid_to</code> that should be tailored for your use case and which must be compatible with the existing limitations on custom authorites (<code>custom_authority_options</code>) that may be queried by invoking the <code>get_global_properties</code> command in the CLI Wallet or on an RPC-API node.</p> <p>Every custom authority has a unique identifier.  This identifier can most easily be tracked immediately after the authorization is created by inspecting the authorizing account's history.</p> <pre><code>get_account_history &lt;account_name&gt; 1\n</code></pre> <p>The custom authority ID will have an identifier such as 1.17.x.  The custom authority can be reviewed with</p> <pre><code>get_object 1.17.x\n</code></pre> <p>For example, </p> <pre><code>[{\n    \"id\": \"1.17.0\",\n    \"account\": \"1.2.19\",\n    \"enabled\": true,\n    \"valid_from\": \"1970-01-01T00:00:00\",\n    \"valid_to\": \"2020-01-31T00:00:00\",\n    \"operation_type\": 0,\n    \"auth\": {\n      \"weight_threshold\": 1,\n      \"account_auths\": [[\n          \"1.2.20\",\n          1\n        ]\n      ],\n      \"key_auths\": [],\n      \"address_auths\": []\n    },\n    \"restrictions\": [[\n        0,{\n          \"member_index\": 2,\n          \"restriction_type\": 0,\n          \"argument\": [\n            7,\n            \"1.2.21\"\n          ],\n          \"extensions\": []\n        }\n      ]\n    ],\n    \"restriction_counter\": 1\n  }\n]\n</code></pre> <p>The properties of these custom authority can be updated after creation.</p>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-restricted-transfers","title":"Template: Authorized Restricted Transfers","text":"<p>Alice (1.2.19) authorizes Bob (1.2.20) to transfer any amount of any asset from her account to Charlie's account (1.2.21).  <code>transfer_operation</code> is Operation 0.</p> <pre><code>{\"account\":\"1.2.19\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2020-01-31T00:00:00\",\"operation_type\":0,\"auth\":{\"weight_threshold\":1,\"account_auths\":[[\"1.2.20\",1]],\"key_auths\":[],\"address_auths\":[]},\"restrictions\":[{\"member_index\":2,\"restriction_type\":0,\"argument\":[7,\"1.2.21\"]}]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-unrestricted-trading","title":"Template: Authorized Unrestricted Trading","text":"<p>Alice (1.2.17) authorizes Bob (1.2.18) to create limit orders for her account without any restrictions.  <code>limit_order_create_operation</code> is Operation 1.</p> <pre><code>{\"account\":\"1.2.17\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:25\",\"operation_type\":1,\"auth\":{\"weight_threshold\":1,\"account_auths\":[[\"1.2.18\",1]],\"key_auths\":[],\"address_auths\":[]},\"restrictions\":[]}\n</code></pre> <p>Alice (1.2.17) authorizes Bob (1.2.18) to cancel limit orders for her account without any restrictions.  <code>limit_order_cancel_operation</code> is Operation 2.</p> <pre><code>{\"account\":\"1.2.17\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:25\",\"operation_type\":2,\"auth\":{\"weight_threshold\":1,\"account_auths\":[[\"1.2.18\",1]],\"key_auths\":[],\"address_auths\":[]},\"restrictions\":[]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-restricted-trading","title":"Template: Authorized Restricted Trading","text":"<p>Alice (1.2.17) authorizes a public key (BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8) to create limit orders for her account but is restricted to trading ACOIN1 (1.3.2) against BCOIN1 (1.3.4), BCOIN2 (1.3.5), or BCOIN3 (1.3.6).</p> <p>These operations are combined into a single custom authority by using a \"logical or\" branch.  The first branch authorizes the selling of ACOIN1 for ACOIN1 for BCOIN1, BCOIN2, or BCOIN3.  The second branch authorizes selling of BCOIN1, BCOIN2, or BCOIN3 for ACOIN1.  <code>limit_order_create_operation</code> is Operation 1.</p> <pre><code>{\"account\":\"1.2.17\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:25\",\"operation_type\":1,\"auth\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[[\"BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8\",1]],\"address_auths\":[]},\"restrictions\":[{\"member_index\":999,\"restriction_type\":11,\"argument\":[40,[[{\"member_index\":2,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":6,\"argument\":[27,[\"1.3.2\"]]}]]},{\"member_index\":3,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":6,\"argument\":[27,[\"1.3.3\",\"1.3.4\",\"1.3.5\"]]}]]}],[{\"member_index\":2,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":6,\"argument\":[27,[\"1.3.3\",\"1.3.4\",\"1.3.5\"]]}]]},{\"member_index\":3,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":6,\"argument\":[27,[\"1.3.2\"]]}]]}]]]}]}\n</code></pre> <p>_It is not possible to restrict the cancellation of orders as a function of the the assets that are involved.  Therefore the authorization to cancel limit orders will be unrestricted.  <code>limit_order_cancel_operation</code> is Operation 2.</p> <pre><code>{\"account\":\"1.2.17\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:25\",\"operation_type\":2,\"auth\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[[\"BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8\",1]],\"address_auths\":[]},\"restrictions\":[]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-feed-publishing-by-an-account","title":"Template: Authorized Feed Publishing by an Account","text":"<p>A feed publisher (1.2.16) authorizes/delegates Bob (1.2.17) to publish feeds for an asset.  <code>asset_publish_feed_operation</code> is Operation 19.</p> <pre><code>{\"account\":\"1.2.16\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:30\",\"operation_type\":19,\"auth\":{\"weight_threshold\":1,\"account_auths\":[[\"1.2.17\",1]],\"key_auths\":[],\"address_auths\":[]},\"restrictions\":[]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-feed-publishing-by-a-key","title":"Template: Authorized Feed Publishing by a Key","text":"<p>A feed publisher (1.2.16) authorizes/delegates a public key (BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8) to publish feeds for an asset.  <code>asset_publish_feed_operation</code> is Operation 19.</p> <pre><code>{\"account\":\"1.2.16\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:25\",\"operation_type\":19,\"auth\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[[\"BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8\",1]],\"address_auths\":[]},\"restrictions\":[]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-account-registration","title":"Template: Authorized Account Registration","text":"<p>A faucet account (1.2.16) authorizes a public key (BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8) to register accounts on its behalf.  <code>account_create_operation</code> is Operation 5.</p> <pre><code>{\"account\":\"1.2.16\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-01T00:17:20\",\"operation_type\":5,\"auth\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[[\"BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8\",1]],\"address_auths\":[]},\"restrictions\":[]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-voting-by-a-key","title":"Template: Authorized Voting by a Key","text":"<p>Alice (1.2.19) authorizes a public key (BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8) to update her voting slate.  This requires authorizing the <code>account_update_operation</code> with several restrictions that prohibits updating the owner key, the active key, the special owner authority, and the special active authority, and requires the memo key to be specified as Alice's current memo key (BTS7zsqi7QUAjTAdyynd6DVe8uv4K8gCTRHnAoMN9w9CA1xLCTDVv).  <code>account_update_operation</code> is Operation 6.</p> <pre><code>{\"account\":\"1.2.16\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-02T00:00:40\",\"operation_type\":6,\"auth\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[[\"BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8\",1]],\"address_auths\":[]},\"restrictions\":[{\"member_index\":2,\"restriction_type\":0,\"argument\":[0,{}]},{\"member_index\":3,\"restriction_type\":0,\"argument\":[0,{}]},{\"member_index\":5,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":0,\"argument\":[0,{}]}]]},{\"member_index\":5,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":2,\"restriction_type\":0,\"argument\":[0,{}]}]]},{\"member_index\":4,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":0,\"restriction_type\":0,\"argument\":[5,\"BTS7zsqi7QUAjTAdyynd6DVe8uv4K8gCTRHnAoMN9w9CA1xLCTDVv\"]}]]}]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#template-authorized-changing-of-a-witness-signing-key-by-a-key","title":"Template: Authorized Changing of a Witness Signing Key by a Key","text":"<p>A witness account (1.2.16) authorizes a public key (BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8) to update its signing key.  This requires authorizing the <code>witness_update_operation</code> with one restriction that prohibits updating the witness URL.  <code>witness_update_operation</code> is Operation 21.</p> <pre><code>{\"account\":\"1.2.16\",\"enabled\":true,\"valid_from\":\"1970-01-01T00:00:00\",\"valid_to\":\"2030-01-02T00:00:50\",\"operation_type\":21,\"auth\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[[\"BTS74YKubbAGUpihj1BP9cCNfdtUbiAhathRs92Ai5EvEQegbpTm8\",1]],\"address_auths\":[]},\"restrictions\":[{\"member_index\":3,\"restriction_type\":0,\"argument\":[0,{}]}]}\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#updating-a-custom-authority","title":"Updating a Custom Authority","text":""},{"location":"docs/to_sort/Custom-Authority-Templates/#updating-the-authorization-period","title":"Updating the Authorization Period","text":"<p>Grants of custom authorities are limited in duration by the authorizing account.  When a custom authority expires it is removed from an existence an can no longer be updated.  The time period of authorization can be updated while the authorization is still active.</p> <p>The <code>custom_authority_update_operation</code> has an identifier of 55.  In this example, the original authorizing account (1.2.17) will build a transaction to update to change the time period (<code>valid_from</code> and <code>valid_to</code>) of the original custom authority (1.17.5) to be valid from July 1, 2020 through July 30, 2020.  Naturally this attempted change must be compatible with the existing limitations on custom authorites (<code>custom_authority_options</code>) that may be queried by invoking the <code>get_global_properties</code> command in the CLI Wallet or on an RPC-API node.</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [55, {\"account\":\"1.2.17\",\"authority_to_update\":\"1.17.5\",\"valid_from\":\"2020-07-01T00:00:00\",\"valid_to\":\"2020-07-30T00:00:00\"}]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#disabling-a-custom-authority","title":"Disabling a Custom Authority","text":"<p>Grants of custom authorities may be disabled while the custom authority has not yet expired.</p> <p>The <code>custom_authority_update_operation</code> has an identifier of 55.  In this example, the original authorizing account (1.2.17) will build a transaction to disable the original custom authority (1.17.5).</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [55, {\"account\":\"1.2.17\",\"authority_to_update\":\"1.17.5\",\"new_enabled\":\"false\"}]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#enabling-a-custom-authority","title":"Enabling a Custom Authority","text":"<p>Grants of custom authorities may be enabled while the custom authority has not yet expired.</p> <p>The <code>custom_authority_update_operation</code> has an identifier of 55.  In this example, the original authorizing account (1.2.17) will build a transaction to enable the original custom authority (1.17.5).</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [55, {\"account\":\"1.2.17\",\"authority_to_update\":\"1.17.5\",\"new_enabled\":\"true\"}]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#deleting-a-custom-authority","title":"Deleting a Custom Authority","text":"<p>Grants of custom authorities may be permanently deleted while the custom authority has not yet expired.</p> <p>The <code>custom_authority_delete_operation</code> has an identifier of 56.  In this example, the original authorizing account (1.2.17) will build a transaction to delete the original custom authority (1.17.5).</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [56, {\"account\":\"1.2.17\",\"authority_to_delete\":\"1.17.5\"}]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#changing-the-authorized-account","title":"Changing the Authorized Account","text":"<p>Grants of custom authorities may be changed while the custom authority has not yet expired.</p> <p>The <code>custom_authority_update_operation</code> has an identifier of 55.  In this example, the original authorizing account (1.2.17) will build a transaction to change the authorization (1.17.5) to another account (1.2.22).</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [55, {\"account\":\"1.2.17\",\"authority_to_update\":\"1.17.5\",\"new_auth\":{\"weight_threshold\":1,\"account_auths\":[[\"1.2.22\",1]],\"key_auths\":[],\"address_auths\":[]}}]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#adding-restrictions-to-a-custom-authority","title":"Adding Restrictions to a Custom Authority","text":"<p>Restrictions to an existing custom authority may be added while the custom authority has not yet expired.  The additional restriction is directly dependent on the custom authority's operation type.</p> <p>In this example, Alice (1.2.17) had previously authorized Bob to create limit orders for her account without any restrictions.  Alice has decided to restrict the trading to only permit selling the core asset (1.3.0) to buy another asset (1.3.2).</p> <p>The <code>custom_authority_update_operation</code>, which has an identifier of 55, will be used to update the original custom authority (1.17.5).</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [55, {\"account\":\"1.2.17\",\"authority_to_update\":\"1.17.5\",\"restrictions_to_add\":[{\"member_index\":2,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":0,\"argument\":[8,\"1.3.0\"]}]]},{\"member_index\":3,\"restriction_type\":10,\"argument\":[39,[{\"member_index\":1,\"restriction_type\":0,\"argument\":[8,\"1.3.2\"]}]]}]} ]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/Custom-Authority-Templates/#removing-a-restriction-from-a-custom-authority","title":"Removing a Restriction from a Custom Authority","text":"<p>Restrictions to an existing custom authority may be removed while the custom authority has not yet expired.  The restriction is identified by its 0-indexed position among the existing restrictions.</p> <p>The <code>custom_authority_update_operation</code> has an identifier of 55.  In this example, the original authorizing account (1.2.17) will build a transaction to change the authorization (1.17.5) by removing the first restriction (0).</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction &lt;builder_handle&gt; [55, {\"account\":\"1.2.17\",\"authority_to_update\":\"1.17.5\",\"restrictions_to_remove\":[0]} ]\nset_fees_on_builder_transaction &lt;builder_handle&gt; 1.3.0\npreview_builder_transaction &lt;builder_handle&gt;\nsign_builder_transaction &lt;builder_handle&gt; true\n</code></pre>"},{"location":"docs/to_sort/ElasticSearch-Plugin/","title":"ElasticSearch Plugins Suite","text":"<p>Store full account and object data into indexed elastisearch database.</p> <ul> <li>Motivation</li> <li>Database Selection</li> <li>Technical</li> <li>Hardware needed</li> <li>Installation</li> <li>Running</li> <li>Checking if is working</li> <li>Arguments</li> <li>Kibana</li> </ul>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#motivation","title":"Motivation","text":"<p>There are 3 main problems this plug-in tries to solve:</p> <ul> <li>The amount of RAM needed to run a full node with all the account history. Huge.</li> <li>Fast search inside operation fields directly querying the ES database.</li> <li>Fast each inside objects by any field.</li> </ul>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#the-database-selection","title":"The database selection","text":"<p>Elastic search was selected for the main following reasons:</p> <ul> <li>Open source.</li> <li>Fast.</li> <li>Index oriented.</li> <li>Easy to install and start using.</li> <li>Send data from c++ using curl.</li> <li>Scalable and decentralized nodes of data possibilities.</li> </ul>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#technical","title":"Technical","text":"<p>The <code>elasticsearch</code> plugin when active is connected to each block the node receives. Operations are extracted in a similar logic of the classic <code>account_history_plugin</code> but sent to the ES database instead of storing internally. All fields from the operation are indexed for fast search.</p> <p>The <code>es_objects</code> plugin when active is connected to config specified objects types(limit order objects, asset objects, etc).</p> <p>Both plugins work in a similar way, data is collected in plugin internal database until a good amount of them(configurable) is available, then is sent as a <code>_bulk</code> operation to ES. <code>_bulk</code> needs to be big when replaying but much more smaller when we are in sync to display real time data to end users.</p> <p>Optimal numbers for speed/performance can depend on hardware, default values are provided. </p>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#hardware-needed","title":"Hardware needed","text":"<p>It is very recommended that you use SSD disks in your node if you are trying to synchronize bitshares mainnet. It will make the task a lot faster. Still, the process of synchronizing the mainnet can take a few days.</p> <p>You need 1T of space to be safe for a while, 32G or more of RAM is recommended.</p> <p>After elasticsearch is installed increase heap size depending in your RAM: </p> <p><code>$ vi config/jvm.options</code> </p> <pre><code>..\n# Xms represents the initial size of total heap space\n# Xmx represents the maximum size of total heap space\n\n-Xms12g\n-Xmx12g\n...\n</code></pre>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#installation","title":"Installation","text":"<p>You need to have bitshares-core and its dependencies installed(https://github.com/bitshares/bitshares-core#getting-started).</p> <p>In ubuntu 18.04 all the dependencies for elasticsearch database are installed by default. Just get the last version(or desired version) at:</p> <p>https://www.elastic.co/downloads/elasticsearch</p> <pre><code>$ tar xvzf elasticsearch-7.4.0-linux-x86_64.tar.gz\n$ cd elasticsearch-7.4.0/\n$./bin/elasticsearch\n</code></pre> <p>ES will listen in <code>127.0.0.1:9200</code>. Try http://127.0.0.1:9200/ in your browser and you should see some info about the database if the service started correctly.</p> <p>You can put the binary as a service, program haves a <code>--daemonize</code> option, can run inside <code>screen</code> or any other option that suits you in order to keep the database running. </p> <p>Please note ES does not run as root, make a normal user account by and proceed after:</p> <p><code>adduser elastic</code></p>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#running","title":"Running","text":"<p>Clone the bitshares repo and install bitshares:</p> <pre><code>git clone https://github.com/bitshares/bitshares-core\ncd bitshares-core\ngit checkout -t origin/develop\ngit submodule update --init --recursive\ncmake -DCMAKE_BUILD_TYPE=RelWithDebInfo .\nmake\n</code></pre> <p>Start node with elasticsearch plugins enabled with default options. Make sure ES is running in localhost:9200</p> <p><code>./programs/witness_node/witness_node --plugins \"elasticsearch es_objects\"</code></p>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#checking-if-is-working","title":"Checking if is working","text":"<p>By default you should see the following messages in the witness console while the node is loading:</p> <pre><code>...\n572387ms th_a       elasticsearch_plugin.cpp:516  plugin_startup       ] elasticsearch ACCOUNT HISTORY: plugin_startup() begin\n572387ms th_a       application.cpp:1235          startup_plugins      ] Plugin elasticsearch started\n572395ms th_a       es_objects.cpp:405            plugin_startup       ] elasticsearch OBJECTS: plugin_startup() begin\n572395ms th_a       application.cpp:1235          startup_plugins      ] Plugin es_objects started\n...\n575659ms th_a       es_objects.cpp:82             genesis              ] elasticsearch OBJECTS: inserting data from genesis\n595710ms th_a       application.cpp:603           handle_block         ] Got block: #10000 00002710c3894322c3a33dabdcb4020c2918db6e time: 2015-10-13T23:15:42 transaction(s): 0 latency: 126190453710 ms from: cyrano  irreversible: 9789 (-211)\n602395ms th_a       application.cpp:603           handle_block         ] Got block: #20000 00004e2032e9ec266a4eb088a5e0aa05bb24ff0c time: 2015-10-14T07:37:33 transaction(s): 0 latency: 126160349395 ms from: bitcube  irreversible: 19785 (-215)\n...\n</code></pre> <p>In a new window can check the total rows in the bitshares index you have, the count number should be increasing as we sync:</p> <pre><code>$ curl -X GET 'http://localhost:9200/bitshares-*/data/_count?pretty=true' -H 'Content-Type: application/json' -d '\n{\n    \"query\" : {\n        \"bool\" : { \"must\" : [{\"match_all\": {}}] }\n    }\n}\n'\n{\n  \"count\" : 35000,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  }\n}\n$ \n</code></pre> <p>Replace <code>bitshares-*</code> to <code>objects-*</code> to make sure you have items also in the objects indexes.</p> <p>Note: If you see that you just have to wait to sync, you can execute this queries often to check progress, as long as the numbers are moving to the up side you are generally going fine.</p> <p>You can also check your indexes with:</p> <pre><code>$ curl -X GET 'http://localhost:9200/_cat/indices'\nyellow open objects-bitasset  CyYgodyOS3OzPCC9ED6K_Q 1 1    33   0  73.4kb  73.4kb\nyellow open objects-balance   TCWc24MDSPG2PwxTGSLbNQ 1 1  1760   0 256.1kb 256.1kb\nyellow open objects-asset     4TkUeOdwRnSeDUtqOs3B2g 1 1   457   0 171.5kb 171.5kb\nyellow open objects-account   Tv-7TI_rTLSMqrDEj3FGYw 1 1 95405 652  75.5mb  75.5mb\nyellow open objects-proposal  J5ok-YqNQyqW5psAxVARqQ 1 1     6   6  38.1kb  38.1kb\nyellow open bitshares-2015-10 IBDfO9wqR5qtmY5_g4f81Q 1 1 35000   0  18.5mb  18.5mb\n$ \n</code></pre>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#arguments","title":"Arguments","text":"<p>The ES plugin have the following parameters passed by command line or config file:</p> <ul> <li><code>elasticsearch-node-url</code> - Database url, default: http://localhost:9200/</li> <li><code>elasticsearch-bulk-replay</code> - Number of bulk documents to dump to the database on replay, default: 10000</li> <li><code>elasticsearch-bulk-sync</code> - Number of bulk documents to index on a  synchronized chain, default: 100</li> <li><code>elasticsearch-visitor</code> - Use visitor to index additional data - almost deprecated and off by default.</li> <li><code>elasticsearch-basic-auth</code> - Username and password for a protected database,  default: empty</li> <li><code>elasticsearch-index-prefix</code> - Prefix for the indexes (bitshares-)</li> <li><code>elasticsearch-operation-object</code> - Save operation as object. Very important feature to search inside operation fields, default: on</li> <li><code>elasticsearch-start-es-after-block</code> - Start doing ES job after block. An important maintenance option that will help if your node crash to restart the ES dumping only after the specifying block. By default this is 0 so all blocks will be saved but this is only to start from scratch.</li> <li><code>elasticsearch-operation-string</code> - Save operation as string. Needed to serve history api calls. This is turned off by defualt as default <code>elasticsearch-mode</code> is to only save. If enabled will allow bitshares-core api call <code>get_account_history</code> to use ES instead of internal storage limited database.</li> <li><code>elasticsearch-mode</code> - Mode of operation: only_save(0), only_query(1), all(2). Default: 0</li> </ul> <p>Options for the <code>es_objects</code> plugins are:</p> <ul> <li><code>es-objects-elasticsearch-url</code> - Database url, default: http://localhost:9200/</li> <li><code>es-objects-auth</code> - username:password, empty by default.</li> <li><code>es-objects-bulk-replay</code> - Bulk documents to send in replay, default: 10000</li> <li><code>es-objects-bulk-sync</code> - Bulk documents to send when in sync, default: 100</li> <li><code>es-objects-proposals</code> - Save proposal objects, on by default.</li> <li><code>es-objects-accounts</code> - Store account objects, on by default.</li> <li><code>es-objects-assets</code> - Store asset objects, on by default.</li> <li><code>es-objects-balances</code> - Store balances objects, on by default.</li> <li><code>es-objects-limit-orders</code> - Store limit order objects, off by default.</li> <li><code>es-objects-asset-bitasset</code> - Store feed data, on by default.</li> <li><code>es-objects-index-prefix</code> - Add a prefix to the index, default: objects-</li> <li><code>es-objects-keep-only-current</code> - Keep only current state of the objects, if enabled will save all the object changes as different database entries.</li> <li><code>es-objects-start-es-after-block</code> - Start doing ES job after block. Useful for synchronization after a crash.</li> </ul>"},{"location":"docs/to_sort/ElasticSearch-Plugin/#kibana","title":"Kibana","text":"<p>In order to run kibana you need to download the same version as the ES database. As i have the last stable version i can download from:</p> <p>https://www.elastic.co/downloads/kibana</p> <p>After extracted:</p> <p><code>./bin/kibana</code></p> <p>Kibana will listen by default in http://localhost:5601</p>"},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/","title":"Howto import an existing delegate as witness in BitShares 2.0","text":""},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/#preparations-in-bitshares-09-network","title":"Preparations in BitShares 0.9 network","text":"<p>We need to Extract the signing public and private key from BitShares 0.9.</p> <p>Let's obtain the <code>&lt;publickey&gt;</code>:</p> <pre><code>&gt;&gt;&gt; get_account &lt;delegatename&gt;\n[...]\nBlock Signing Key: &lt;publickey&gt;\n[...]\n</code></pre> <p>Remark: Public keys in the BitShares network have the prefix <code>BTS</code>. Hence, in the case of the Graphene testnet you should replace <code>BTS</code> by <code>GPH</code>.</p> <p>and the corresponding <code>&lt;wifkey&gt;</code>:</p> <pre><code>&gt;&gt;&gt; wallet_dump_account_private_key &lt;delegatename&gt; signing_key\n\"&lt;wifkey&gt;\"\n</code></pre>"},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/#bitshares-20-network-or-graphene-testnet","title":"BitShares 2.0 network (or Graphene testnet)","text":""},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/#download-the-genesis-block-only-for-testnet","title":"Download the genesis block (only for testnet)","text":"<p>For the testnet we need to download the proper genesis block. Eventually, the genesis block will be part of the client so that this step will not be required for the real network later. The genesis block can be downloaded (here)[https://drive.google.com/open?id=0B_GVo0GoC_v_S3lPOWlUbFJFWTQ].</p>"},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/#run-the-witness-as-a-node-in-the-network","title":"Run the witness as a node in the network","text":"<p>We first run the witness node without block production and connect it to the P2P network with the following command:</p> <pre><code>$ programs/witness_node/witness_node -s 104.200.28.117:61705 --rpc-endpoint 127.0.0.1:8090 --genesis-json aug-14-test-genesis.json\n</code></pre> <p>The address <code>104.200.28.117</code> is one of the public seed nodes.</p>"},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/#retreiving-witness_id","title":"Retreiving witness_id","text":"<p>We now open up the <code>cli_wallet</code> and connect to our plain and stupid witness node:</p> <pre><code>$ programs/cli_wallet/cli_wallet -s ws://127.0.0.1:8090\n</code></pre> <p>The witness_id can be obtain from the blockchain:</p> <pre><code>locked &gt;&gt;&gt; get_witness &lt;delegatename&gt;\n</code></pre> <p>where <code>&lt;delegatename</code> is the name of the account used as delegate in BitShares0.9. This delegate is a \"witness\" in BitShares 2.0.</p>"},{"location":"docs/to_sort/Howto-import-an-existing-delegate-as-witness-in-BitShares-2.0/#running-a-block-producing-witness","title":"Running a block producing witness","text":"<p>Now we need to start the witness, so shut down the wallet (ctrl-d),  and shut down the witness (ctrl-c).  Re-launch the witness, now mentioning the new witness 1.6.10 and its keypair:</p> <pre><code>./witness_node --rpc-endpoint=127.0.0.1:8090 \\\n               --witness-id '\"&lt;witnessid&gt;\"' \\\n               --private-key '[\"&lt;publickey&gt;\", \"&lt;wifkey&gt;\"]' \\\n               --genesis-json aug-14-test-genesis.json \\\n               -s 104.200.28.117:61705\n</code></pre> <p>Alternatively, you can also add this line into yout config.ini:</p> <pre><code>witness-id = \"&lt;witnessid&gt;\"\nprivate-key = [\"&lt;publickey&gt;\", \"&lt;wifkey&gt;\"]\n</code></pre> <p>If you monitor the output of the <code>witness_node</code>, you should see it generate  blocks signed by your witness:</p> <pre><code>Witness 1.6.10 production slot has arrived; generating a block now...\nGenerated block #367 with timestamp 2015-07-05T20:46:30 at time 2015-07-05T20:46:30\n</code></pre>"},{"location":"docs/to_sort/Howto-propose-committee-actions/","title":"Howto propose committee actions","text":"<p>This page shows how the committee account can act using the proposed transaction system.  Specifically, as an example I'm using the creation of BitShares proposal 1.10.21, a proposal to update a committee-controlled BitAsset to reduce <code>maximum_force_settlement_volume</code> for asset <code>CNY</code> from 2000 (20%) to 200 (2%).</p> <p>First check the asset to see what its current configuration is:</p> <pre><code>&gt;&gt;&gt; get_asset CNY\n{\n  ...\n  \"bitasset_data_id\": \"2.4.13\"\n}\n</code></pre> <p>Then check its bitasset object to get the currently active options:</p> <pre><code>&gt;&gt;&gt; get_object 2.4.13\n{\n  ...\n    \"options\": {\n      \"feed_lifetime_sec\": 86400,\n      \"minimum_feeds\": 7,\n      \"force_settlement_delay_sec\": 86400,\n      \"force_settlement_offset_percent\": 0,\n      \"maximum_force_settlement_volume\": 2000,\n      \"short_backing_asset\": \"1.3.0\",\n      \"extensions\": []\n    },\n  ...\n}\n</code></pre> <p>Then do <code>update_bitasset</code> to update the options.  Note we copy-paste other fields from above; there is no way to selectively update only one field.</p> <pre><code>&gt;&gt;&gt; update_bitasset \"CNY\" {\"feed_lifetime_sec\" : 86400, \"minimum_feeds\" : 7, \"force_settlement_delay_sec\" : 86400, \"force_settlement_offset_percent\" : 0, \"maximum_force_settlement_volume\" : 200, \"short_backing_asset\" : \"1.3.0\", \"extensions\" : []} false\n</code></pre> <p>If this was a privatized BitAsset (i.e. a user-issued asset with feed), you could simply set the <code>broadcast</code> parameter of the above command to <code>true</code> and be done.</p> <p>However this is a committee-issued asset, so we have to use a proposed transaction to update it.  To create the proposed transaction, we use the transaction builder API.  Create a transaction builder transaction with <code>begin_builder_transaction</code> command:</p> <pre><code>&gt;&gt;&gt; begin_builder_transaction\n</code></pre> <p>This returns a numeric handle used to refer to the transaction being built. In the following commands you need to replace <code>$HANDLE</code> with the number returned by <code>begin_builder_transaction</code> above.</p> <pre><code>&gt;&gt;&gt; add_operation_to_builder_transaction $HANDLE [12,{\"fee\": {\"amount\": 100000000, \"asset_id\": \"1.3.0\"}, \"issuer\": \"1.2.0\", \"asset_to_update\": \"1.3.113\", \"new_options\": { \"feed_lifetime_sec\": 86400, \"minimum_feeds\": 7, \"force_settlement_delay_sec\": 86400, \"force_settlement_offset_percent\": 0, \"maximum_force_settlement_volume\": 200, \"short_backing_asset\": \"1.3.0\", \"extensions\": []}, \"extensions\": []}]\n&gt;&gt;&gt; propose_builder_transaction2 $HANDLE init0 \"2015-12-04T14:55:00\" 3600 false\n</code></pre> <p>The <code>propose_builder_transaction</code> command is broken and deprecated.  You need to recompile with this patch in order to use the new <code>propose_builder_transaction2</code> command which allows you to set the proposing account.</p> <p>Then set fees, sign and broadcast the transaction:</p> <pre><code>&gt;&gt;&gt; set_fees_on_builder_transaction $HANDLE BTS\n&gt;&gt;&gt; sign_builder_transaction $HANDLE true\n</code></pre> <p>Notes:</p> <ul> <li><code>propose_builder_transaction2</code> modifies builder transaction in place.  It is not idempotent, running it once will get you a proposal to execute the transaction, running it twice will cause you to get a proposal to propose the transaction!</li> <li>Remember to transfer enough to cover the fee to committee account and set review period to at least <code>committee_proposal_review_period</code></li> <li>Much of this could be automated by a better wallet command.</li> </ul>"},{"location":"docs/to_sort/README-debug_node/","title":"README debug node","text":""},{"location":"docs/to_sort/README-debug_node/#introduction","title":"Introduction","text":"<p>The <code>debug_node</code> is a tool to allow developers to run many interesting sorts of \"what-if\" tests using state from a production blockchain. Like \"what happens if I produce enough blocks for the next hardfork time to arrive?\" or \"what would happen if this account (which I don't have a private key for) did this transaction?\"</p>"},{"location":"docs/to_sort/README-debug_node/#setup","title":"Setup","text":"<p>Be sure you've built the right build targets:</p> <pre><code>$ make get_dev_key debug_node cli_wallet witness_node\n</code></pre> <p>Use the <code>get_dev_key</code> utility to generate a keypair:</p> <pre><code>$ programs/genesis_util/get_dev_key \"\" nathan\n[{\"private_key\":\"5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\",\"public_key\":\"BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV\",\"address\":\"BTSFAbAx7yuxt725qSZvfwWqkdCwp9ZnUama\"}]\n</code></pre> <p>Obtain a copy of the blockchain in <code>block_db</code> directory:     $ programs/witness_node/witness_node --data-dir data/mydatadir     # ... wait for chain to sync     ^C     $ cp -Rp data/mydatadir/blockchain/database/block_num_to_block ./block_db</p> <p>Set up a new datadir with the following <code>config.ini</code> settings:</p> <pre><code># setup API endpoint\nrpc-endpoint = 127.0.0.1:8090\n# setting this to empty effectively disables the p2p network\nseed-nodes = []\n# set apiaccess.json so we can set up\napi-access = \"data/debug_datadir/api-access.json\"\n</code></pre> <p>Then set up <code>data/debug_datadir/api-access.json</code> to allow access to the debug API like this:</p> <pre><code>{\n   \"permission_map\" :\n   [\n      [\n         \"bytemaster\",\n         {\n            \"password_hash_b64\" : \"9e9GF7ooXVb9k4BoSfNIPTelXeGOZ5DrgOYMj94elaY=\",\n            \"password_salt_b64\" : \"INDdM6iCi/8=\",\n            \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\", \"network_node_api\", \"debug_api\"]\n         }\n      ],\n      [\n         \"*\",\n         {\n            \"password_hash_b64\" : \"*\",\n            \"password_salt_b64\" : \"*\",\n            \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\"]\n         }\n      ]\n   ]\n}\n</code></pre> <p>See here for more detail on the <code>api-access.json</code> format.</p> <p>Once that is set up, run <code>debug_node</code> against your newly prepared datadir:</p> <pre><code>programs/debug_node/debug_node --data-dir data/debug_datadir\n</code></pre> <p>Run <code>cli_wallet</code> to connect to the <code>debug_node</code> port, using the username and password to access the new <code>debug_api</code> (and also a different wallet file):</p> <pre><code>programs/cli_wallet/cli_wallet -s 127.0.0.1:8090 -w debug.wallet -u bytemaster -p supersecret\n</code></pre>"},{"location":"docs/to_sort/README-debug_node/#example-usage","title":"Example usage","text":"<p>Load some blocks from the datadir:</p> <pre><code>dbg_push_blocks block_db 20000\n</code></pre> <p>Note, when pushing a very large number of blocks sometimes <code>cli_wallet</code> hangs and you must Ctrl+C and restart it (leaving the <code>debug_node</code> running).</p> <p>Generate (fake) blocks with our own private key:</p> <pre><code>dbg_generate_blocks 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3 1000\n</code></pre> <p>Update <code>angel</code> account to be controlled by our own private key and generate a (fake) transfer:</p> <pre><code>dbg_update_object {\"_action\":\"update\", \"id\":\"1.2.1090\", \"active\":{\"weight_threshold\":1,\"key_auths\":[[\"BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV\",1]]}}\nimport_key angel 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\ntransfer angel init0 999999 BTS \"\" true\n</code></pre>"},{"location":"docs/to_sort/README-debug_node/#how-it-works","title":"How it works","text":"<p>The commands work by creating diff(s) from the main chain that are applied to the local chain at specified block height(s).  It lets you easily check out \"what-if\" scenarios in a fantasy debug toy world forked from the real chain, e.g. \"if we take all of the blocks until today, then generate a bunch more until a hardfork time in the future arrives, does the chain stay up?  Can I do transactions X, Y, and Z in the wallet after the hardfork?\"  Anyone connecting to this node sees the same fantasy world, so you can e.g. make changes with the <code>cli_wallet</code> and see them exist in other <code>cli_wallet</code> instances (or GUI wallets or API scripts).</p>"},{"location":"docs/to_sort/README-debug_node/#limitations","title":"Limitations","text":"<p>The main limitations are:</p> <ul> <li>No export format for the diffs, so you can't really [1] connect multiple <code>debug_node</code> to each other.</li> <li>Once faked block(s) or tx(s) have been produced on your chain, you can't really [1] stream blocks or tx's from the main network to your chain.</li> </ul> <p>[1] It should theoretically be possible, but it's non-trivial and totally untested.</p>"},{"location":"docs/to_sort/Scripting-websockets-easy/","title":"Scripting websockets easy","text":"<p>The bitshares developer community use different ways to interact with the core api mainly by the use of the websocket.</p> <p>Some of this methods are curl, pybitshares, wscat and many others.</p> <p>The most used tool is wscat, this is a great tool but it is not scriptable. I found myself pasting the same commands like login and subscribe to database, crypto and other apis over and over again.</p> <p>I was after scripting wscat since a while until @gdfbacchus asked in telegram for the same thing.</p> <p>Ptython is the choice as it is probably the most used language in the bitshares community.</p> <p>https://pypi.python.org/pypi/websocket-client</p> <p>Simply install by:</p> <p><code>pip install websocket-client</code></p> <p>Confirm the install by using the wsdump.py tool. This should do the same as wscat:</p> <pre><code>root@NC-PH-1346-07:~# wsdump.py ws://localhost:8090\nPress Ctrl+C to quit\n&gt; {\"method\": \"call\", \"params\": [1, \"login\", [\"\", \"\"]], \"id\": 2}\n\n&lt; {\"id\":2,\"result\":true}\n&gt; {\"method\": \"call\", \"params\": [1, \"database\", []], \"id\": 3}\n\n&lt; {\"id\":3,\"result\":2}\n\n&gt; {\"method\": \"call\", \"params\": [2, \"get_objects\", [[\"1.11.8799012\"]]], \"id\": 4}\n&lt; {\"id\":4,\"result\":[{\"id\":\"1.11.8799012\",\"op\":[14,{\"fee\":{\"amount\":281946,\"asset_id\":\"1.3.0\"},\"issuer\":\"1.2.89940\",\"asset_to_issue\":{\"amount\":100,\"asset_id\":\"1.3`\n`.1276\"},\"issue_to_account\":\"1.2.142352\",\"memo\":{\"from\":\"BTS8LWkZLmsnWjgtT1PNHT5XGAu1z1ueQkBHBQTVfECFVQfD3s7CF\",\"to\":\"BTS6F1ZetzyG5FvjRiPjSkAjJfCqfr8AGbnGfH9FAGWZ`\nM3SGVumj5\",\"nonce\":\"380763353028914\",\"message\":\"912991d1bb5bccccbd41dbad533836e667e5c5e9a31290c857ed6c5ea01756dd4d5893f1644c16c019170a4d0de346a2\"},\"extensions\":[\n]}],\"result\":[0,{}],\"block_num\":14086551,\"trx_in_block\":0,\"op_in_trx\":0,\"virtual_op\":48819}]}\n&gt;\n</code></pre> <p>Create a python script that will execute the commands one after the other and get the output:</p> <pre><code>from websocket import create_connection\nws = create_connection(\"ws://localhost:8090\")\nws.send('{\"method\": \"call\", \"params\": [1, \"login\", [\"\", \"\"]], \"id\": 2}')\nresult =  ws.recv()\nprint result\n\n\nws.send('{\"method\": \"call\", \"params\": [1, \"database\", []], \"id\": 3}')\nresult =  ws.recv()\nprint result\n\nws.send('{\"method\": \"call\", \"params\": [2, \"get_objects\", [[\"1.11.8799012\"]]], \"id\": 4}')\nresult =  ws.recv()\nprint result\n\nws.close()\n</code></pre> <p>Execute as:</p> <pre><code>root@NC-PH-1346-07:~# python testws.py \n{\"id\":2,\"result\":true}\n{\"id\":3,\"result\":2}\n{\"id\":4,\"result\":[{\"id\":\"1.11.8799012\",\"op\":[14,{\"fee\":{\"amount\":281946,\"asset_id\":\"1.3.0\"},\"issuer\":\"1.2.89940\",\"asset_to_issue\":{\"amount\":100,\"asset_id\":\"1.3.1\n`276\"},\"issue_to_account\":\"1.2.142352\",\"memo\":{\"from\":\"BTS8LWkZLmsnWjgtT1PNHT5XGAu1z1ueQkBHBQTVfECFVQfD3s7CF\",\"to\":\"BTS6F1ZetzyG5FvjRiPjSkAjJfCqfr8AGbnGfH9FAGWZM3\nSGVumj5\",\"nonce\":\"380763353028914\",\"message\":\"912991d1bb5bccccbd41dbad533836e667e5c5e9a31290c857ed6c5ea01756dd4d5893f1644c16c019170a4d0de346a2\"},\"extensions\":[]}\n],\"result\":[0,{}],\"block_num\":14086551,\"trx_in_block\":0,\"op_in_trx\":0,\"virtual_op\":48819}]}\nroot@NC-PH-1346-07:~#\n</code></pre> <p>You get the results of the 3 calls inside the python script. </p> <p>Check the \"Long-lived connection\" sample of the websocket-client documentation in order to make a script that can receive updates.</p>"},{"location":"docs/to_sort/Websocket-Subscriptions/","title":"Websocket Subscriptions","text":"<p>Before we can subscribe to any changes, we first need to ask for access to the <code>database</code>-api with</p> <pre><code>&gt; {\"id\":2,\"method\":\"call\",\"params\":[0,\"database\",[]]}\n&lt; {\"id\":2,\"result\":1}\n</code></pre> <p>The <code>result</code> will be our <code>DATABASE_API_ID</code>!</p> <p>In Graphene, we have the following subscriptions available:</p> <ul> <li><code>set_subscribe_callback( cb, bool clear_filter )</code>:      To simplify development a global subscription callback can be registered.</li> <li><code>set_pending_transaction_callback(  cb )</code>:      Notifications for incoming unconfirmed transactions.</li> <li><code>set_block_applied_callback( blockid )</code>:      Gives a notification whenever the block <code>blockid</code> is applied to the      blockchain.</li> </ul> <p>Let's first get a global scubscription callback to disctinguish our notifications from regular RPC calls:</p> <pre><code>&gt; {\"id\":4,\"method\":\"call\",\"params\":[DATABASE_API_ID,\"set_subscribe_callback\",[SUBSCRIPTION_ID]]}\n</code></pre> <p>This call above will register <code>SUBSCRIPTION_ID</code> as id for notifications.</p> <p>Now, whenever you get an object from the witness (e.g. via <code>get_objects</code>) you will automatically subscribe to any future changes of that object.</p> <p>After calling <code>set_subscribe_callback</code> the witness will start to send notices every time the object changes:</p> <pre><code>&lt; {\n    \"method\": \"notice\"\n    \"params\": [\n        SUBSCRIPTION_ID, \n        [[\n            { \"id\": \"2.1.0\", ...  },\n            { \"id\": ...  },\n            { \"id\": ...  },\n            { \"id\": ...  }\n        ]]\n    ], \n}\n</code></pre> <p>Here is an example of a full session:</p> <pre><code>&gt; {\"id\":1,\"method\":\"call\",\"params\":[0,\"login\",[\"\",\"\"]]}\n&lt; {\"id\":1,\"result\":true}\n&gt; {\"id\":2,\"method\":\"call\",\"params\":[0,\"database\",[]]}\n&lt; {\"id\":2,\"result\":1}\n&gt; {\"id\":3,\"method\":\"call\",\"params\":[1,\"set_subscribe_callback\",[200]]}\n&lt; {\"id\":3,\"result\":true}\n&lt; {\"method\":\"notice\",\"params\":[200,[[{\"id\":\"2.1.0\",\"random\":\"2033120557c36e278db2eaad818494f791ff4d7b0418858a7ab9b5a8\",\"head_block_number\":5,\"head_block_id\":\"00000005171f82f1b6bd948e7d58d95e572001fd\",\"time\":\"2015-05-01T13:05:50\",\"current_witness\":\"1.7.5\",\"next_maintenance_time\":\"2015-05-02T00:00:00\"}]]]}\n&lt; {\"method\":\"notice\",\"params\":[200,[[{\"id\":\"2.1.0\",\"random\":\"9d5ff7e453db4815005eb42ddd040e3afb459950f75f4440deb3dec0\",\"head_block_number\":6,\"head_block_id\":\"000000060e3369d6feaf330ea9114cd855c93aab\",\"time\":\"2015-05-01T13:05:55\",\"current_witness\":\"1.7.3\",\"next_maintenance_time\":\"2015-05-02T00:00:00\"}]]]}\n&lt; {\"method\":\"notice\",\"params\":[200,[[{\"id\":\"2.1.0\",\"random\":\"cb8686582c40634a0c0834d0f2c4ad19f8ca80598cc3eee2b93c124d\",\"head_block_number\":7,\"head_block_id\":\"000000071d0bc8db55d7da75d1d880818d1930fd\",\"time\":\"2015-05-01T13:06:00\",\"current_witness\":\"1.7.0\",\"next_maintenance_time\":\"2015-05-02T00:00:00\"}]]]}\n</code></pre>"},{"location":"docs/to_sort/egenesis/","title":"Egenesis","text":""},{"location":"docs/to_sort/egenesis/#embedded-genesis","title":"Embedded genesis","text":"<p>Compile executable which references a specific genesis state.  The full genesis state can be included by linking with <code>egensis_full</code>, or only hashes (chain ID and hash of JSON) can be included by linking with <code>egenesis_brief</code>.</p> <p>The <code>GRAPHENE_EGENESIS_JSON</code> parameter specifies the <code>genesis.json</code> to be included.  Note, you will have to delete your <code>cmake</code> leftovers with</p> <pre><code>make clean\nrm -f CMakeCache.txt\nfind . -name CMakeFiles | xargs rm -Rf\n</code></pre> <p>The embedded data can be accessed by functions in <code>egenesis.hpp</code>.</p> <p>Note, if your <code>genesis.json</code> contains newlines, you should be aware there are newline translation issues and should keep in mind this advice:</p> <ul> <li>If you're creating a new chain, run your genesis file through <code>canonical_format.py</code> before publishing it.  It should get rid of line translation issues and has the added benefit of making the file smaller.</li> <li>If you're creating a new chain, and you want to show a pretty genesis file with newlines and whitespace in your Github, you can create the ugly file by running <code>canonical_format.py</code> as part of the build process by editing <code>CMakeLists.txt</code>.  If you do this, your build will then depend on having a working Python installation (which is why we don't do this).</li> <li>If you have an existing chain with a pretty genesis, or want to disregard the above advice and create a new chain with a pretty genesis, and you're using Git to distribute your genesis file, you should add a <code>.gitattributes</code> file to your repository as discussed here.</li> </ul>"},{"location":"docs/to_sort/private-testnet/","title":"Private testnet","text":""},{"location":"docs/to_sort/private-testnet/#setting-up-private-testnet","title":"Setting up private testnet","text":""},{"location":"docs/to_sort/private-testnet/#genesis-creation","title":"Genesis creation","text":"<p>First, create a subdirectory named <code>genesis</code> and create a file within it named <code>my-genesis.json</code>. This file dictates the initial state of the network.</p> <p>You can use the existing developer <code>genesis.json</code> file as an example. That file can be found at  https://github.com/bitshares/bitshares-core/blob/master/libraries/egenesis/genesis-dev.json</p> <p>The rest of these instructions assume you create your <code>my-genesis.json</code>  file in a subdirectory named <code>genesis</code>.</p>"},{"location":"docs/to_sort/private-testnet/#genesis-editing","title":"Genesis editing","text":"<p>If you want to customize the network's initial state, edit <code>my-genesis.json</code>. This allows you to control things such as:</p> <ul> <li>The accounts that exist at genesis, their names and public keys</li> <li>Assets and their initial distribution (including core asset)</li> <li>The initial values of chain parameters</li> <li>The account / signing keys of the <code>init</code> witnesses (or in fact any account at all).</li> </ul> <p>The chain ID is a hash of the genesis state.  All transaction signatures are only valid for a single chain ID.  So editing the genesis file will change your chain ID, and make you unable to sync with all existing chains (unless one of them has exactly the same genesis file you do).</p> <p>For testing purposes, the <code>--dbg-init-key</code> option will allow you to quickly create a new chain against any genesis file, by replacing the witnesses' block production keys.</p>"},{"location":"docs/to_sort/private-testnet/#embedding-genesis-optional","title":"Embedding genesis (optional)","text":"<p>Once you have <code>genesis.json</code>, you may set a <code>cmake</code> variable like so:</p> <pre><code>cmake -DGRAPHENE_EGENESIS_JSON=\"$(pwd)/genesis/my-genesis.json\"\n</code></pre> <p>and then rebuild.  Note, sometimes I've had to clean the build and CMake cache variables in order for <code>GRAPHENE_EGENESIS_JSON</code> to take effect:</p> <pre><code>make clean\nfind . -name \"CMakeCache.txt\" | xargs rm -f\nfind . -name \"CMakeFiles\" | xargs rm -Rf\ncmake -DGRAPHENE_EGENESIS_JSON=\"$(pwd)/genesis/my-genesis.json\" .\n</code></pre> <p>Deleting caches will reset all <code>cmake</code> variables, so if you have used instructions like build-ubuntu which tells you to set other <code>cmake</code> variables, you will have to add those variables to the <code>cmake</code> line above.</p> <p>Embedding the genesis copies the entire content of <code>genesis.json</code> into the <code>witness_node</code> binary, and additionally copies the chain ID into the <code>cli_wallet</code> binary.  Embedded genesis allows the following simplifications to the subsequent instructions:</p> <ul> <li> <p>You need not specify the <code>genesis.json</code> file on the witness node command line, or in the witness node configuration file.</p> </li> <li> <p>You need not specify the chain ID on the <code>cli_wallet</code> command line when starting a new wallet.</p> </li> </ul> <p>Embedded genesis is a feature designed to make life easier for consumers of pre-compiled binaries, in exchange for slight, optional complication of the process for producing binaries.</p>"},{"location":"docs/to_sort/private-testnet/#creating-data-directory","title":"Creating data directory","text":"<p>We will a new data directory for our witness as follows:</p> <pre><code>programs/witness_node/witness_node --data-dir data/my-blockprod --genesis-json genesis/my-genesis.json --seed-nodes \"[]\"\n</code></pre> <p>The <code>data/my-blockprod</code> directory does not exist, it will be created by the witness node.</p> <p>Several messages will go to the console.  When you see messages like these:</p> <pre><code>3501235ms th_a       main.cpp:165                  main                 ] Started witness node on a chain with 0 blocks.\n3501235ms th_a       main.cpp:166                  main                 ] Chain ID is cf307110d029cb882d126bf0488dc4864772f68d9888d86b458d16e6c36aa74b\n</code></pre> <p>the initialization is complete, and you can press Ctrl+C to quit the witness node. (Note:  Initialization will complete nearly instantaneously with the tiny example genesis, unless you added a ton of balances.)</p> <p>The reason for running the witness node:  It tells us the chain ID, and it initializes the <code>data/my-blockprod</code> directory.</p>"},{"location":"docs/to_sort/private-testnet/#starting-block-production","title":"Starting block production","text":"<p>Open <code>data/my-blockprod/config.ini</code> in your favorite text editor, and set the following settings, uncommenting them if necessary:</p> <pre><code>p2p-endpoint = 127.0.0.1:11010\nrpc-endpoint = 127.0.0.1:11011\n\ngenesis-json = genesis/my-genesis.json\n\nprivate-key = [\"GPH6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV\",\"5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\"]\n\nrequired-participation = 0\n\nwitness-id = \"1.6.1\"\nwitness-id = \"1.6.2\"\nwitness-id = \"1.6.3\"\nwitness-id = \"1.6.4\"\nwitness-id = \"1.6.5\"\nwitness-id = \"1.6.6\"\nwitness-id = \"1.6.7\"\nwitness-id = \"1.6.8\"\nwitness-id = \"1.6.9\"\nwitness-id = \"1.6.10\"\nwitness-id = \"1.6.11\"\n</code></pre> <p>This authorizes the <code>witness_node</code> to produce blocks on behalf of the listed <code>witness-id</code>'s, and specifies the private key needed to sign those blocks.  Normally each witness would be on a different node, but for the purposes of this testnet, we will start out with all witnesses signing blocks on a single node.</p> <p>Now run <code>witness_node</code> again:</p> <pre><code>programs/witness_node/witness_node --data-dir data/my-blockprod --enable-stale-production --seed-nodes \"[]\"\n</code></pre> <p>Note that we need not specify <code>genesis.json</code> on the command line, since we now specify it in the config file.  The <code>--enable-stale-production</code> flag tells the <code>witness_node</code> to produce on a chain with zero blocks or very old blocks.  We specify the <code>--enable-stale-production</code> parameter on the command line as we will not normally need it (although it can also be specified in the config file). The empty <code>--seed-nodes</code> is added to avoid connecting to the default seed nodes hardcoded for production.</p> <p>Subsequent runs which connect to an existing witness node over the p2p network, or which get blockchain state from an existing data directory, need not have the <code>--enable-stale-production</code> flag.</p>"},{"location":"docs/to_sort/private-testnet/#obtaining-the-chain-id","title":"Obtaining the chain ID","text":"<p>Each wallet is specifically associated with a single chain, specified by its chain ID.  This is to protect the user from e.g. unintentionally using a testnet wallet on the real chain.</p> <p>The chain ID is printed at witness node startup.  It can also be obtained by using the API to query a running witness node with the <code>get_chain_properties</code> API call:</p> <pre><code>curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"get_chain_properties\", \"params\": [], \"id\": 1}' http://127.0.0.1:11011/rpc &amp;&amp; echo\n</code></pre> <p>This <code>curl</code> command will return a short JSON object including the <code>chain_id</code>.</p>"},{"location":"docs/to_sort/private-testnet/#creating-a-wallet","title":"Creating a wallet","text":"<p>In order to create a wallet, you must specify a chain ID and server. With the witness node's default access control settings, a blank username and password will suffice:</p> <pre><code>programs/cli_wallet/cli_wallet --wallet-file my-wallet.json --chain-id cf307110d029cb882d126bf0488dc4864772f68d9888d86b458d16e6c36aa74b --server-rpc-endpoint ws://127.0.0.1:11011 -u '' -p ''\n</code></pre> <p>Note, since the genesis timestamp will likely be different, your chain ID will be different!  Instead of <code>cf3071110...</code> you should use the chain ID reported by your <code>witness_node</code>.  (See TODO:link for instructions.)</p> <p>Before continuing, we should set a password.  This password is used to encrypt the private keys in the wallet.  We will use the word <code>supersecret</code> in this example.</p> <pre><code>set_password supersecret\n</code></pre>"},{"location":"docs/to_sort/private-testnet/#gaining-access-to-stake","title":"Gaining access to stake","text":"<p>In Graphene, balances are contained in accounts.  To claim an account that exists in the Graphene genesis, use the <code>import_key</code> command:</p> <pre><code>unlock supersecret\nimport_key nathan \"5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\"\n</code></pre> <p>Funds are stored in genesis balance objects.  These funds can be claimed, with no fee, using the <code>import_balance</code> command.</p> <pre><code>import_balance nathan [\"5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\"] true\n</code></pre>"},{"location":"docs/to_sort/private-testnet/#creating-accounts","title":"Creating accounts","text":"<p>Creating an account requires lifetime member (LTM) status.  To upgrade to LTM, use the <code>upgrade_account</code> command:</p> <pre><code>upgrade_account nathan true\n</code></pre> <p>We can now register an account.  The <code>register_account</code> command allows you to register an account using only a public key:</p> <pre><code>register_account alpha BTS4zSJHx7D84T1j6HQ7keXWdtabBBWJxvfJw72XmEyqmgdoo1njF BTS4zSJHx7D84T1j6HQ7keXWdtabBBWJxvfJw72XmEyqmgdoo1njF nathan nathan 0 true\ntransfer nathan alpha 100000 BTS \"here is the cash\" true\n</code></pre> <p>We can now open a new wallet for <code>alpha</code> user:</p> <pre><code>import_key alpha 5HuCDiMeESd86xrRvTbexLjkVg2BEoKrb7BAA5RLgXizkgV3shs\nupgrade_account alpha true\ncreate_witness alpha \"http://www.alpha\" true\n</code></pre> <p>The <code>get_private_key</code> command allows us to obtain the public key corresponding to the block signing key:</p> <pre><code>get_private_key GPH6viEhYCQr8xKP3Vj8wfHh6WfZeJK7H9uhLPDYWLGCRSj5kHQZM\n</code></pre>"},{"location":"docs/to_sort/private-testnet/#creating-committee-members","title":"Creating committee members","text":"<pre><code>create_account_with_brain_key com0 com0 nathan nathan true\ncreate_account_with_brain_key com1 com1 nathan nathan true\ncreate_account_with_brain_key com2 com2 nathan nathan true\ncreate_account_with_brain_key com3 com3 nathan nathan true\ncreate_account_with_brain_key com4 com4 nathan nathan true\ncreate_account_with_brain_key com5 com5 nathan nathan true\ncreate_account_with_brain_key com6 com6 nathan nathan true\ntransfer nathan com0 100000 CORE \"some cash\" true\ntransfer nathan com1 100000 CORE \"some cash\" true\ntransfer nathan com2 100000 CORE \"some cash\" true\ntransfer nathan com3 100000 CORE \"some cash\" true\ntransfer nathan com4 100000 CORE \"some cash\" true\ntransfer nathan com5 100000 CORE \"some cash\" true\ntransfer nathan com6 100000 CORE \"some cash\" true\nupgrade_account com0 true\nupgrade_account com1 true\nupgrade_account com2 true\nupgrade_account com3 true\nupgrade_account com4 true\nupgrade_account com5 true\nupgrade_account com6 true\ncreate_committee_member com0 \"http://www.com0\" true\ncreate_committee_member com1 \"http://www.com1\" true\ncreate_committee_member com2 \"http://www.com2\" true\ncreate_committee_member com3 \"http://www.com3\" true\ncreate_committee_member com4 \"http://www.com4\" true\ncreate_committee_member com5 \"http://www.com5\" true\ncreate_committee_member com6 \"http://www.com6\" true\nvote_for_committee_member nathan com0 true true\nvote_for_committee_member nathan com1 true true\nvote_for_committee_member nathan com2 true true\nvote_for_committee_member nathan com3 true true\nvote_for_committee_member nathan com4 true true\nvote_for_committee_member nathan com5 true true\nvote_for_committee_member nathan com6 true true\n\npropose_parameter_change com0 {\"block_interval\" : 6} true\n</code></pre>"},{"location":"docs/to_sort/public-testnet/","title":"Public testnet","text":""},{"location":"docs/to_sort/public-testnet/#purpose-of-this-document","title":"Purpose of this document","text":"<p>This document is internal notes for the Graphene developers on how to start up a new public testnet.</p>"},{"location":"docs/to_sort/public-testnet/#updating-previous-testnet-genesis","title":"Updating previous testnet genesis","text":"<p>Starting genesis file:</p> <pre><code>8ff86468d7da87ae73a0a1fdc8adbf6353c427aacba7e27d33772afddabb5b07  genesis/aug-17-test-genesis-c.json\n</code></pre> <p>Run following commands:</p> <pre><code>cp genesis/aug-17-test-genesis-c.json genesis/gnew1.json\nsed -i -e 's/\"block_interval\": 1/\"block_interval\": 5/' genesis/gnew1.json\nsed -i -e 's/\"\\(block_signing_key\\|owner\\|owner_key\\|active_key\\)\": \"BTS/\"\\1\": \"GPH/' genesis/gnew1.json\n\nPREFIX=aaaa\nprograms/genesis_util/genesis_update -g genesis/gnew1.json -o genesis/gnew2.json --dev-account-count=1000 --dev-balance-count=200 --dev-key-prefix \"$PREFIX\"\n</code></pre>"},{"location":"docs/to_sort/public-testnet/#starting-the-network","title":"Starting the network","text":"<p>Create data dir:     programs/witness_node/witness_node --genesis-timestamp 10 --genesis-json genesis/gnew2.json --enable-stale-production --data-dir data/gnew</p> <p>Display witness keys and ID's for copy-pasting:     programs/genesis_util/get_dev_key \"$PREFIX\" wit-block-signing-0:101 | python3 -c 'import json; import sys; print(\"\\n\".join(\"\"\"private-key = [\"{public_key}\", \"{private_key}\"]\"\"\".format(**d) for d in json.load(sys.stdin)))' | sh -c 'cat &gt;&gt; data/gnew/config.ini'     python3 -c 'print(\"\\n\".join(\"witness-id = \\\"1.6.{}\\\"\".format(i) for i in range(1, 102)))' | sh -c 'cat &gt;&gt; data/gnew/config.ini'</p> <p>Also set p2p and rpc endpoints.</p> <p>NB you have to go into config.ini and move them around to the main section, it does not play nicely with appending because of sections.</p>"},{"location":"docs/to_sort/public-testnet/#witness-node-startup","title":"Witness node startup","text":"<p>We need to blow away the previous blockchain so we can rewrite the genesis timestamp:</p> <pre><code>rm -Rf data/gnew/blockchain\n</code></pre> <p>Open up a new file in a text editor to take some notes. Run the witness node like this:</p> <pre><code>programs/witness_node/witness_node --genesis-timestamp 10 --genesis-json genesis/gnew2.json --enable-stale-production --data-dir data/gnew\n</code></pre> <p>You should copy-paste a line like this into your notes:</p> <pre><code>Used genesis timestamp:  2015-08-31T18:36:45 (PLEASE RECORD THIS)\n</code></pre> <p>You should also copy-paste the printed chain ID since you will need it in the next step.</p>"},{"location":"docs/to_sort/public-testnet/#writing-final-genesis","title":"Writing final genesis","text":"<p>The genesis timestamp needs to be pasted into <code>genesis.json</code> file in the <code>initial_timestamp</code> field.  If you do not do this, nodes using the genesis will have a different chain ID and be unable to connect. (Essentially the <code>--genesis-timestamp</code> option in the previous step tells the node to overwrite the time in the file with a timestamp after startup.)</p>"},{"location":"docs/to_sort/public-testnet/#running-the-wallet","title":"Running the wallet","text":"<pre><code>programs/cli_wallet/cli_wallet --wallet-file wallet/mywallet.json --server-rpc-endpoint ws://127.0.0.1:8091 -u abc -p xyz --chain-id 58903336bc82c0baa7ad0a0a0e12f4ecaff6a0e3826c4e9fb3b79a5034d69c17\n\nprograms/genesis_util/get_dev_key \"$PREFIX\" active-0\nimport_key devacct0 5KAceDNGYcBJrwLMeL5gQ3xjrEB2fy5ajFoEUBmt8nPyF8ruoSi\nprograms/genesis_util/get_dev_key \"$SECRET\" wit-active-0\nimport_key init0 5K5dAU3Xjjm3y6k6qt8V3pbJVc54w1yhh1GrLZD5wUYLgDaabnm\nprograms/genesis_util/get_dev_key \"$PREFIX\" balance-0\nimport_balance devacct0 [\"5KaUCUiwMCBmCvnj9n8z2vwcmaoAaLdgaRmnZ1bB2ZTLzJqRJmr\"]\n</code></pre>"},{"location":"docs/to_sort/public-testnet/#embedding-genesis-optional","title":"Embedding genesis (optional)","text":"<p>See https://github.com/cryptonomex/graphene/wiki/egenesis for instructions embedding the new genesis file in binaries.</p>"},{"location":"docs/to_sort/resolvable-bitassets/","title":"Resolvable bitassets","text":""},{"location":"docs/to_sort/resolvable-bitassets/#resolvable-bitassets","title":"Resolvable BitAssets","text":"<p>Let us define a resolvable BitAsset as follows.  The BitAsset may be resolved (i.e., settled) based on the feed resolution value at a point in time called the resolution date.</p> <p>The new BitAsset design presented by Dan today (4-13-2015) consists of a trio of BitAssets:  Two with standard bi-annual resolution dates, and a third equal to a portfolio of the first two assets.  The resolution price is equal to the simple moving average of the median feed value in a resolution sampling window consisting of the 30 days preceding the resolution date.</p>"},{"location":"docs/to_sort/resolvable-bitassets/#declaration-window","title":"Declaration window","text":"<p>One improvement to resolvable BitAssets which comes to mind is to provide a declaration window whereby the long side must opt-in to the settlement process.  The declaration process would work something like this:  The declaration window consists of e.g. 60-45 days before the resolution date, each long asset holder may make a binding declaration stating that they wish to settle.  At the end of the declaration window, declaration causes each long holder's USD to be replaced by USDA, which is then settled on the resolution date.  This has the virtue of having only two assets (USD and USDA), and USDA only exists for the interval between the close of the declaration window and the resolution date.  There is no potential \"A -&gt; B conversion black swan event\" which could potentially affect USD holders (although BitShares-style black swans where BTS drops like a rock, causing settlement to soar and exceed the total available collateral is still possible).</p> <p>This creates a declare-wait-sample-resolve cycle consisting of the declaration window (60-45 days before resolution), a waiting period (45-30 days before resolution), a sampling window (30-0 days before resolution), and resolution.  The waiting period is necessary to deal with the fact that the price feed will be slow to respond to new information in the market, thus some lag period provides a \"handicap\" of sorts to \"hobble\" the traders who would normally be able to move faster than the system and outmaneuver it.  Note that since the USDA is transferrable and tradeable during the waiting period and sampling period, USDA holders will likely be able to find counterparties in the market willing to convert their USDA to BTS right away (at a small spread of course).  So all of the long side's wealth is always liquid.</p>"},{"location":"docs/to_sort/resolvable-bitassets/#equitable-shorting","title":"Equitable shorting","text":"<p>Another modification which I have been thinking about for a very long time is equitable shorting, which does away with the traditional shorting mechanics.  Equitable shorting divides the short side into short shares which are fully tradeable and fungible.  Unlike BitShares-style shorting, all short positions have equal debt-to-collateral ratios in equitable shorting, and short positions are naturally divisible (to the satoshi), transferrable, tradeable, and fungible.  Equitable shorting offers substantial bookkeeping advantages, and the mechanics are much easier to explain than shorting.  Furthermore, depending on the details of the mechanics, it may be possible to design equitable shorting in a manner that separates (at least to some extent) market activities (involving counterparties making deals with each other) from supply activities (involving creation or redemption of long/short shares).</p>"},{"location":"docs/to_sort/resolvable-bitassets/#balanced-supply-operations","title":"Balanced supply operations","text":"<p>At any time, identical \"balanced\" fractions of the long and short float can be created or redeemed, indeed without any reference whatsoever to any \"book value\" of the long-vs-short split.  So for example, if 10 long shares backed by 100 BTS are outstanding, and 20 short shares backed by 200 BTS are also outstanding, then creating a basket of 1 long share and 2 short shares will increase the float by 10% and thus require BTS equal to 10% of the existing collateral to create the backing.  Thus the collateral for the new basket is 30 BTS.  After the basket is created, there will be 11 long shares backed by 110 BTS, and 22 short shares backed by 220 BTS.</p> <p>Let's re-run that example with the same total collateral but a very different price -- the long side is 10 long shares backed by 200 BTS and 20 short shares backed by 100 BTS.  At this valuation, creating 1 long share and 2 short shares backed by a total of 30 BTS results in 11 long shares backed by 220 BTS and 22 short shares backed by 110 BTS.</p> <p>This shows that regardless of what is the \"correct\" price, balanced creation (or redemption) doesn't change anyone's equation and is therefore \"economically safe\" to allow a single actor to perform, since it doesn't have effects of increasing risk or transferring wealth on any third party.</p>"},{"location":"docs/to_sort/resolvable-bitassets/#unbalanced-supply-operations","title":"Unbalanced supply operations","text":"<p>There must be a way for new investors to re-capitalize a losing short side, and a way for old investors to take profits from a winning short side.  In other words, while it does provide liquidity in both directions, balanced creation/redemption preserves the debt-to-collateral ratio of the float, and thus will be unable to correct any deviation from the ideal 300% backing.  However, unbalanced supply operations need a notion of book value.  If 20 short shares are backed by 200 BTS, then creating a short share (without creating any corresponding long share) should cost 10 BTS (which will go into the backing).  If those 20 shares are backed by 100 BTS instead, then creating a short share (again, without any corresponding long share) should cost 5 BTS!</p> <p>Unbalanced supply operations on the short side are necessary, but suffer from the same problem as unbalanced long-side operations.  Thus, a similar solution seems appropriate -- use a declare-wait-sample-resolve cycle.  However this cycle should be much shorter than what we contemplated above for the long side.  If the price is dropping and the short side is in danger of reaching black swan territory, but there are plenty of investors willing to short, forcing them to wait 30 days seems perverse.  Indeed the DWSR cycle can be shortened, the limitation is how quickly pricing information known to investors moves into the price feed.  A daily DWSR cycle with 16/2/6 hours allowing unbalanced creation of shorts when collateralization is less than 300% seems reasonable.</p> <p>When collateralization is greater than 300%, instead of admitting new unbalanced shorts, the DWSR cycle should instead pay the excess collateral to the shorts.  This is a combination of taking profit and liberation of excess capital (the short side can also become overcollateralized in the case where the long side is shrinking through redemptions).</p>"},{"location":"docs/to_sort/resolvable-bitassets/#creating-new-longs","title":"Creating new longs","text":"<p>Conditions where less than 300% collateral exists and existing longs are illiquid may be eased if market makers are allowed to create new longs.  Thus, we can initiate a simple rule:  New shorts must be issued with new longs such that the new longs are collateralized 300%.  If the existing collateralization is less than 300%, this results in a mix of balanced creation and unbalanced short creation.  If the existing collateralization is more than 300%, then this results in a mix of balanced creation and unbalanced long creation.  In either case, the new short causes the overall market collateralization moves toward 300%.</p>"},{"location":"docs/to_sort/resolvable-bitassets/#equitable-margin-call","title":"Equitable \"margin call\"","text":"<p>A margin call is requiring the short to buy out the long (i.e. debt) at a premium to book value when collateralization is getting dangerously close to 100%, in order to reduce the probability of a black swan.</p> <p>In BitShares, margin call happens on a position-by-position basis, and the excess collateral liberated by the margin call is cashed out.  With equitable shorts, it is possible to let this liberated collateral remain to shore up the collateralization of the remaining long shares.</p>"},{"location":"docs/to_sort/resolvable-bitassets/#reducing-long-dwsr-cycles","title":"Reducing long DWSR cycles","text":"<p>Upon consideration of the DWSR cycle for shorts, there is little reason the long DWSR cycle cannot be reduced to the same time interval.  A reduced DWSR cycle for longs has the benefit of improving the symmetry between long and short (elegance and perceptions of fairness (i.e. the system doesn't unduly favor shorts or longs)).  It allows market makers the ability to trade with greater velocity, improving their returns, and some of this benefit will be passed on to the markets they serve in the form of better liquidity and lower spreads.</p> <p>The best benefit of a reduced long DWSR cycle is it will allow us to get rid of USDA.  The main reason USDA exists is to keep a redeeming long holder liquid during the WS parts of the DWSR cycle.  If the WS part of the cycle is 8 hours instead of 30 days, the loss of liquidity is much less harmful to long holders.  There may be a decent number of traders willing to pay fees and spreads to exit a position 30 days early, but there are relatively few willing to pay fees and spreads to exit a position 8 hours early (and those who are willing to do so still have the alternative of selling their USD to a market maker instead of redeeming it).</p>"},{"location":"docs/to_sort/resolvable-bitassets/#rules","title":"Rules","text":"<ul> <li>(R1) Can only do unbalanced creation when books are empty</li> <li>(R2) Unbalanced short creation only happens once per day (I assume this happens during a maintenance block at midnight, 00:00 UTC)</li> <li>(R3) Unbalanced short creation must be declared by 16:00 UTC the previous day</li> <li>(R4) Unbalanced short creation uses sampling window of 18:00 UTC - 00:00 UTC</li> <li>(R5) Price feed providers should update once per hour</li> <li>(R6) Unbalanced long creation requires 2x short creation</li> <li>(R7) Balanced redemption is possible at any time without waiting (analogous to short cover)</li> <li>(R8) Balanced creation is possible at any time without waiting, provided overall collateralization is 250% or more</li> <li>(R9) Margin call begins at 200% collateralization</li> <li>(R10) Margin call pays premium which increases smoothly from 0% at 200% collateralization, to 10% at 150% collateralization.</li> <li>(R11) If collateralization exceeds 300%, the excess is returned to shorts, quantized to 0.1% of the book value.</li> <li>(R12) The check in R11 is performed in a maintenance block after long redemption, but before short creation.</li> </ul>"},{"location":"docs/to_sort/resolvable-bitassets/#example","title":"Example","text":"<p>First, Alice creates a basket of short/long shares.  This is considered unbalanced creation since there is no existing market (R1).  She uses 7500 BTS to do this.  She must declare her intent by 16:00 UTC (R3), upon her declaration the 7500 BTS become locked.  At 00:00 UTC the next day, a book price is determined by the average value of the median feed from 18:00 UTC to 00:00 UTC (R4), let us say this value is $0.04 USD / BTS.  1/3 of the pledged collateral goes to the long side, 2/3 goes to the short side. The number of long shares issued will be determined by the price.  2500 BTS at $0.04 USD / BTS has a value of $100, thus 100 long shares are created, and 200 short shares are also created.</p> <p>To simplify discussion, let's say Alice transfers the long shares to Lisa.  (Long holders will have names starting with letters \"L\" and later, short holders will begin with \"A\".  A list of alphabetical names is available in BitShares at https://github.com/BitShares/bitshares/blob/3ebe73b463d637d3c0e991d6abd4613b68bed3b6/tests/drltc_tests/tscript/genesis.py#L31 ). We have these books:</p> <pre><code>-------------------------------------------\n| CR: 7500 / 2500 = 300%                  |\n| PF: 0.04 USD / BTS                      |\n-------------------------------------------------------------------------------------------\n| short      shares              equity   |  long        shares                  equity   |\n-------------------------------------------------------------------------------------------\n| Alice      200 SHORT_USD    5000 BTS    |  Lisa        100 USD               2500 BTS   |\n-------------------------------------------------------------------------------------------\n| (total)    200 SHORT_USD    5000 BTS    |  (total)     100 USD               2500 BTS   |\n-------------------------------------------------------------------------------------------\n</code></pre> <p>Note that equity is a bookkeeping fiction based on the price feed value.  We \"want\" Lisa to be able to redeem her USD for 2500 BTS at any time.  However, Lisa may know things about the price that are not reflected in the feed (e.g. by directly observing the exchanges that feed value is based on). If Lisa knows the value of the feed is about to fall, then instead of waiting for the shoe to drop, she might try to \"catch the shoe\" and redeem her USD before the feed catches up to the exchange.  The DWSR cycle's purpose is to prevent this maneuver.</p> <p>The price feed falls to $0.035 BTS.  The books now look like this:</p> <pre><code>-------------------------------------------\n| CR: 7500 / 2857 = 263%                  |\n| PF: 0.035 USD / BTS                     |\n-------------------------------------------------------------------------------------------\n| short      shares              equity   |  long        shares                  equity   |\n-------------------------------------------------------------------------------------------\n| Alice      200 SHORT_USD    4643 BTS    |  Lisa        100 USD               2857 BTS   |\n-------------------------------------------------------------------------------------------\n| (total)    200 SHORT_USD    4643 BTS    |  (total)     100 USD               2857 BTS   |\n-------------------------------------------------------------------------------------------\n</code></pre> <p>Let's say Bob uses 3000 BTS to enter a DWSR cycle which resolves with a price of $0.035, and transfers the long side to Matt.  The new longs are collateralized with 1000 BTS, and the new shorts are collateralized with 2000 BTS.  The number of short shares Bob gets is based on the value of his short shares (2000 BTS) over the short side's new capital pot (6643 BTS).</p> <pre><code>-------------------------------------------\n| CR: 10500 / 3857 = 272%                 |\n| PF: 0.035 USD / BTS                     |\n-------------------------------------------------------------------------------------------\n| short      shares              equity   |  long        shares                  equity   |\n-------------------------------------------------------------------------------------------\n| Alice      200 SHORT_USD    4643 BTS    |  Lisa        100 USD               2857 BTS   |\n| Bob         86 SHORT_USD    2000 BTS    |  Matt         35 USD               1000 BTS   |\n-------------------------------------------------------------------------------------------\n| (total)    286 SHORT_USD    6643 BTS    |  (total)     135 USD               3857 BTS   |\n-------------------------------------------------------------------------------------------\n</code></pre> <p>As you can see, the collateral ratio increased.</p> <p>If the price moved back to 0.040 USD / BTS, what would happen?</p> <pre><code>-------------------------------------------\n| CR: 10500 / 3857 = 272%                 |\n| PF: 0.040 USD / BTS                     |\n-------------------------------------------------------------------------------------------\n| short      shares              equity   |  long        shares                  equity   |\n-------------------------------------------------------------------------------------------\n| Alice      200 SHORT_USD    4983 BTS    |  Lisa        100 USD               2500 BTS   |\n| Bob         86 SHORT_USD    2142 BTS    |  Matt         35 USD                875 BTS   |\n-------------------------------------------------------------------------------------------\n| (total)    286 SHORT_USD    7125 BTS    |  (total)     135 USD               3375 BTS   |\n-------------------------------------------------------------------------------------------\n</code></pre> <p>This book shows a very interesting phenomenon.  Alice's equity was originally 5000 BTS at 0.040 USD / BTS, and she didn't engage in any transactions; from her point of view, the only things which occurred were a price feed move and trading by third parties.  What is going on here?  Have we discovered an attack vector?  Who has taken Alice's money?</p> <p>The answer is that Bob has received the extra value.  Bob's action can be viewed as a combination of balanced creation of 35 long shares backed by 1000 BTS and 70 short shares backed by 1630 BTS, followed by an unbalanced creation of 16 short shares backed by 370 BTS.</p> <p>Unbalanced creation of short shares has the effect of de-leveraging every other short holder.  Thus, Alice really experiences a loss of leverage, rather than loss of capital.  Indeed Alice's balance sheet is unchanged immediately before and after Bob's entrance -- leverage only matters when the price is moving.  This effect cuts both ways:  If the price moved in the opposite direction, causing losses to the shorts, then Alice would experience a smaller loss.</p> <p>Alice shorted, the price feed moved against her, she was de-leveraged when Bob entered the market, then the price feed regained its ground.  This story makes it clear how Alice's value was lost.  If the price feed had moved further against the shorts, instead of regaining ground, Alice would have benefited instead; Bob would have taken some of the losses that would have otherwise been assigned to Alice.</p>"},{"location":"docs/to_sort/theoretical-theories/","title":"Theoretical theories","text":"<p>These are possible features I (@theoretical) want to discuss.</p> <ul> <li>Saleable / transferrable short positions</li> </ul> <p>Short position should be its own object which is transferrable between accounts.  Including \"for sale\" flag allowing it to be atomically traded for a certain amount of asset.</p> <p>NB it is similar to real estate market, every short position is unique due to having its own debt-to-collateral ratio.</p> <ul> <li>Short \"I want in\" or \"I want out\"</li> </ul> <p>In BitAssets 3.0, shorts should be allowed to specify a flag indicating whether they want to stay in (as much as possible) or whether they want to stay out.  If a short wants in, on redemption they will be partially covered; if a short wants out, they will be fractionally covered.</p> <ul> <li>Spread options positions</li> </ul> <p>A long option (e.g. allowing you to buy) can be combined with a short option (e.g. requiring you to sell), then instead of providing the position you might be required to sell, you only have to provide the capital to exercise the long.  Hmm, could this create unbounded load via a chain of option exercises?</p> <ul> <li>Privatized BitAssets : Separate feed providers from asset owners</li> </ul> <p>Providing a feed is simple, providing an asset is a business which has to be concerned with a specific type of marketing and user acquisition.  Provide a way for some organization whose only business is publication of a feed a way to do so, and let anyone else who wants to be in charge of creating and marketing an asset that uses that feed.</p> <p>Feed providers can have their own branding, there are plenty of organizations that publish highly trusted feeds in the real world, they might be interested in monetizing their feed by putting it on our platform (e.g. if WSJ wants to be a feed provider, then someone else would be able to have an asset that is settled based on WSJ numbers.  WSJ gets a portion of the fees in exchange for allowing asset to use their brand).  Technically there is no way to prevent \"stripping\", e.g. someone else publishes a reduced-fee or free feed making a feed equal to the WSJ feed, but people would have to trust the stripper to always remain faithful.  It's easier to trust the WSJ than it is to trust some random obscure businessman who promises to always mirror the WSJ; we'd be providing WSJ a way to extract the premium people are willing to pay for the trust in their brand.</p> <ul> <li>Graduated margin call premium</li> </ul> <p>Arhag mentions graduated margin call premium here:  https://bitsharestalk.org/index.php/topic,15775.msg202705.html#msg202705</p> <ul> <li>Market matching of redemption requests</li> </ul> <p>Despite my rebuttal of arhag here:  https://bitsharestalk.org/index.php/topic,15775.msg202832.html#msg202832</p> <p>It turns out that we can actually do market matching of redemption requests.  If there's a party who's willing to give the long what they're asking for voluntarily, we should provide the long what they ask for by matching with that party, rather than forcing a short to settle involuntarily.</p> <ul> <li>Stochastic redemption time</li> </ul> <p>Instead of redeeming during a maintenance block, a redemption order has a chance of executing each block.  The chance is 0% for the first 24 hours (giving the feed time to catch up), then rises gradually to 100% at 48 hours according to some curve (finding a good curve is an interesting problem).</p>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/","title":"Graphene CLI Wallet Cookbook","text":""},{"location":"docs/wallet/CLI-Wallet-Cookbook/#running-a-local-test-network","title":"Running a Local Test Network","text":"<p>Right now, there is no public testnet, so the only way to test is to run your own private network.  To do this, launch a witness node to generate blocks.  In the directory where you built your graphene distribution:</p> <pre><code>cd programs/witness_node\n# if you have previously run a witness node, you may need to remove the old blockchain.\n# at this early stage, new commits often make it impossible to reuse an old database\n#   rm -r witness_node_data_dir\n./witness_node --rpc-endpoint \"127.0.0.1:8090\" --enable-stale-production -w \\\"\"1.6.0\"\\\" \\\"\"1.6.1\"\\\" \\\"\"1.6.2\"\\\" \\\"\"1.6.3\"\\\" \\\"\"1.6.4\"\\\"\n</code></pre> <p>The initial genesis state has ten pre-configured delegates (1.6.0-9) that all use the same private key to sign their blocks, and the witness node has the private keys for these initial delgates built in..  Launching <code>witness_node</code>  this way allows you to act as all ten delegates.</p> <p>Now, in a second window, launch a <code>cli_wallet</code> process to interact with the network.</p> <pre><code>cd programs/cli_wallet\n# similarly, if you have previously run a wallet, you may need to wipe out your \n# old wallet\n#    rm wallet.json\n./cli_wallet\n</code></pre> <p>Before doing anything with the new wallet, set a password and unlock the wallet.  </p> <p>Warning: your passwords will be displayed on the screen.</p> <pre><code>new &gt;&gt;&gt; set_password my_password\nlocked &gt;&gt;&gt; unlock my_password\nunlocked &gt;&gt;&gt;\n</code></pre>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/#account-management","title":"Account Management","text":"<p>To create a new account, you will need to start with an existing account with some of the CORE asset that will pay the transaction fee registering your new account.  The account paying this fee will be the Registrar.</p> <p>In the initial genesis state, there are about a dozen pre-existing accounts. We use the 'nathan' account as a general purpose test account, and its private key is printed at witness startup to allow us to import it here:</p> <pre><code># first, import the private key to take ownership of the 'nathan' account\nunlocked &gt;&gt;&gt; import_key \"nathan\" 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\nunlocked &gt;&gt;&gt; list_my_accounts\n[{\n    \"id\": \"1.2.15\",\n    ...\n    \"name\": \"nathan\",\n    ...\n]\nunlocked &gt;&gt;&gt; list_account_balances nathan\nunlocked &gt;&gt;&gt;\n</code></pre> <p>We control the account now, but there is no money in the account yet.  In the genesis  state, none of the accounts have balances in them.  In the first BitShares network,  accounts were less tightly coupled to balances.  Balances were associated with  public keys, and an account could have hundreds of public keys with balances (or, conversely, public keys with balances could exist without any account associated with them).  When the real network launches, each of the public keys with a balance will be converted into a balance object in Graphene, and they will not be associated with any account until their owner publishes a transaction claiming the balance.</p> <p>In the test genesis state, there is only one balance object and it owns 100% of the  funds in the system.  Let's import that here:</p> <pre><code>unlocked &gt;&gt;&gt; import_balance nathan [5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3] true\nunlocked &gt;&gt;&gt; list_account_balances nathan\n10000000000 CORE\n</code></pre> <p>So we now have an account to act as registrar and it has plenty of funds to pay the registration key for new accounts.  Only lifetime (prime?) members are allowed to register accounts, so we must upgrade <code>nathan</code> first.  Then, go ahead and create our test account named my-account:</p> <pre><code># before nathan can create other accounts, we need to upgrade it to a prime member.\nunlocked &gt;&gt;&gt; upgrade_account nathan true\n# register our account.  we list nathan as both the referrer and registrar.\nunlocked &gt;&gt;&gt; create_account_with_brain_key \"this is the brain key for my account\" my-account nathan nathan true\n</code></pre> <p>Like most methods in the wallet, <code>create_account_with_brain_key</code>'s last parameter is the boolean <code>broadcast</code>.  This parameter tells the wallet whether you want to publish the transaction on the network immediately, which is usually what you want to do.  If you pass false, it will just create the transaction and sign it, and display it on the console, but it wouldn't be sent out onto the network.  This could be used to build up a multi-sig transaction and collect the other signatures offline, or it could be used to construct a transaction in a offline cold wallet that you could put on a flash drive and broadcast from a machine connected to the network.  Here, we'll always pass <code>true</code> for the <code>broadcast</code> parameter.</p> <p>If you were to execute <code>list_my_accounts</code> now, you would see that you  control both <code>nathan</code> and <code>my-account</code>.</p>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/#transferring-currency","title":"Transferring Currency","text":"<p>Your newly-created account doesn't have any funds in it yet, the <code>nathan</code> account still has all the money.  To send some CORE from <code>nathan</code> to your account, use the <code>transfer</code> command:</p> <pre><code>unlocked &gt;&gt;&gt; transfer nathan my-account 10000 CORE \"have some CORE\" true\n</code></pre>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/#becoming-a-witness","title":"Becoming a Witness","text":"<p>To become a witness and be able to produce blocks, you first need to create a witness object that can be voted in.</p> <p>Note: If you want to experiment with things that require voting, be aware that votes are only tallied once per day at the maintenance interval.  For testing, it's helpful to change the <code>GRAPHENE_DEFAULT_MAINTENANCE_INTERVAL</code> in <code>libraries/chain/include/graphene/chain/config.hpp</code> to, say, 10 minutes.</p> <p>Before we get started, we can see the current list of witnesses voted in, which will simply be the ten default witnesses:</p> <pre><code>unlocked &gt;&gt;&gt; get_global_properties\n...\n  \"active_witnesses\": [\n    \"1.6.0\",\n    \"1.6.1\",\n    \"1.6.2\",\n    \"1.6.3\",\n    \"1.6.4\",\n    \"1.6.5\",\n    \"1.6.6\",\n    \"1.6.7\",\n    \"1.6.8\",\n    \"1.6.9\"\n  ],\n...\n</code></pre> <p>Only lifetime members can become witnesses, so you must first upgrade to a lifetime member.  Upgrade and create our witness object.</p> <pre><code>unlocked &gt;&gt;&gt; upgrade_account my-account true\nunlocked &gt;&gt;&gt; create_witness my-account \"http://witness.bar.com/\" true\n{\n  \"ref_block_num\": 139,\n  \"ref_block_prefix\": 3692461913,\n  \"relative_expiration\": 3,\n  \"operations\": [[\n      21,{\n        \"fee\": {\n          \"amount\": 0,\n          \"asset_id\": \"1.3.0\"\n        },\n        \"witness_account\": \"1.2.16\",\n        \"url\": \"http://witness.bar.com/\",\n        \"block_signing_key\": \"PUBLIC KEY\",\n        \"initial_secret\": \"00000000000000000000000000000000000000000000000000000000\"\n      }\n    ]\n  ],\n  \"signatures\": [\n      \"1f2ad5597af2ac4bf7a50f1eef2db49c9c0f7616718776624c2c09a2dd72a0c53a26e8c2bc928f783624c4632924330fc03f08345c8f40b9790efa2e4157184a37\"\n  ]\n}\n</code></pre> <p>Our witness is registered, but it can't produce blocks because nobody has voted it in.  You can see the current list of active witnesses with <code>get_global_properties</code>:</p> <pre><code>unlocked &gt;&gt;&gt; get_global_properties\n{\n  \"active_witnesses\": [\n    \"1.6.0\",\n    \"1.6.1\",\n    \"1.6.2\",\n    \"1.6.3\",\n    \"1.6.4\",\n    \"1.6.5\",\n    \"1.6.7\",\n    \"1.6.8\",\n    \"1.6.9\"\n  ],\n  ...\n</code></pre> <p>Now, we should vote our witness in.  Vote all of the shares in both <code>my-account</code> and <code>nathan</code> in favor of your new witness.</p> <pre><code>unlocked &gt;&gt;&gt; vote_for_witness my-account my-account true true\nunlocked &gt;&gt;&gt; vote_for_witness nathan my-account true true\n</code></pre> <p>Now we wait until the next maintenance interval. <code>get_dynamic_global_properties</code> tells us when that will be in <code>next_maintenance_time</code>.  Once the next maintenance interval passes, run <code>get_global_properties</code> again and you should see that your new witness has been voted in.  </p> <p>Even though it's voted in, it isn't producing any blocks yet because we only told the witness_node to produce blocks for 1.6.0 - 1.6.9 on the command line, and it doesn't know the private key for the witness.  Get the witness object  using <code>get_witness</code> and take note of two things.  The <code>id</code> is displayed in <code>get_global_properties</code> when the witness is voted in, and we will need it  on the <code>witness_node</code> command line to produce blocks.  We'll also need the public <code>signing_key</code> so we can look up the correspoinding private key.</p> <p>Once we have that, run <code>dump_private_keys</code> which lists the public-key  private-key pairs to find the private key.</p> <p>Warning: <code>dump_private_keys</code> will display your keys unencrypted on the terminal, don't do this with someone looking over your shoulder.</p> <pre><code>unlocked &gt;&gt;&gt; get_witness my-account\n{\n  \"id\": \"1.6.10\",\n  \"witness_account\": \"1.2.16\",\n  \"signing_key\": \"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\",\n}\nunlocked &gt;&gt;&gt; dump_private_keys\n[[\n  ...\n  ],[\n    \"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\",\n    \"5JGi7DM7J8fSTizZ4D9roNgd8dUc5pirUe9taxYCUUsnvQ4zCaQ\"\n  ]\n]\n</code></pre> <p>Now we need to re-start the witness, so shut down the wallet (ctrl-d),  and shut down the witness (ctrl-c).  Re-launch the witness, now mentioning the new witness 1.6.10 and its keypair:</p> <pre><code>./witness_node --rpc-endpoint=0.0.0.0:8090 --enable-stale-production --witness-id \\\"\"1.6.0\"\\\" \\\"\"1.6.1\"\\\" \\\"\"1.6.2\"\\\" \\\"\"1.6.3\"\\\" \\\"\"1.6.4\"\\\"  \\\"\"1.6.5\"\\\" \\\"\"1.6.6\"\\\" \\\"\"1.6.7\"\\\" \\\"\"1.6.8\"\\\" \\\"\"1.6.9\"\\\"  \\\"\"1.6.10\"\\\" --private-key \"[\\\"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\\\", \\\"5JGi7DM7J8fSTizZ4D9roNgd8dUc5pirUe9taxYCUUsnvQ4zCaQ\\\"]\"\n</code></pre> <p>If you monitor the output of the <code>witness_node</code>, you should see it generate  blocks signed by your witness:</p> <pre><code>Witness 1.6.10 production slot has arrived; generating a block now...\nGenerated block #367 with timestamp 2015-07-05T20:46:30 at time 2015-07-05T20:46:30\n</code></pre>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/#becoming-a-delegate","title":"Becoming a Delegate","text":"<p>Becoming a delegate is almost the same as becoming a witness, but it is  simpler because delegates don't have a separate private key for signing blocks.</p> <p>As for witnesses, only lifetime members can become delegates, so you must first upgrade to a lifetime member if you haven't already.  Upgrade and create our delegate object.</p> <pre><code>unlocked &gt;&gt;&gt; upgrade_account my-account true\nunlocked &gt;&gt;&gt; create_delegate my-account \"http://delegate.baz.com/\" true\n</code></pre> <p>Now that we're registered as a delegate, we should vote e should vote our delegate  in.  Vote all of the shares in both <code>my-account</code> and <code>nathan</code> in favor of your new delegate.</p> <pre><code>unlocked &gt;&gt;&gt; vote_for_delegate my-account my-account true true\nunlocked &gt;&gt;&gt; vote_for_delegate nathan my-account true true\n</code></pre> <p>Like with witnesses, you will have to wait for the next maintenance interval before the delegate becomes active.  Get the id of the delegate with:</p> <pre><code>unlocked &gt;&gt;&gt; get_delegate my-account\n{\n  \"id\": \"1.5.10\",\n  ...\n</code></pre> <p>and then run <code>get_global_properties</code> after the maintenance period and you should see the new delegate <code>1.5.10</code> listed in the <code>active_delegates</code> list.</p>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/#creating-new-keys","title":"Creating New Keys","text":"<p>Registering a new account requires the provision of at least two public keys to the registrar: one for the owner key and another for the active key.  Some registrars require a third public key for the memo.</p> <p>Pseudo-random keys for an account can be created by using the CLI Wallet command <code>suggest_brain_key</code>.</p> <pre><code>locked &gt;&gt;&gt; suggest_brain_key \n{\n  \"brain_priv_key\": \"XXXXXX ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ...... ......\",\n  \"wif_priv_key\": \"5......\",\n  \"pub_key\": \"TEST......\"\n}\n</code></pre> <p>The public key is provided to a registrar during account registration.  The WIF private key should be securely archived.</p> <p>After account registration, a key can be imported into a CLI wallet with the command <code>import_key</code>.</p> <pre><code>locked &gt;&gt;&gt; gethelp import_key\n\nusage: import_key ACCOUNT_NAME_OR_ID  WIF_PRIVATE_KEY\n\nexample: import_key \"1.3.11\" 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\nexample: import_key \"usera\" 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3\n</code></pre>"},{"location":"docs/wallet/CLI-Wallet-Cookbook/#claiming-accumulated-fees","title":"Claiming Accumulated Fees","text":"<p>The accumulated fees for the asset owner can be claimed with the following steps.</p> <p>Two identifiers will be needed to claim the vesting balance.</p> <ul> <li>The identifier of the account (1.2.x)</li> <li>The identifier of the asset (1.3.y)</li> <li>The amount to be claimed in satoshis (N)</li> </ul> <p>The identifier of the account can be found by inspecting the <code>id</code> (\"1.3.x\") in the output of <code>get_account</code></p> <pre><code>get_account &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>The identifier of the asset can be found by inspecting the <code>id</code> in the output of <code>get_asset</code> (\"1.2.y\").</p> <pre><code>get_asset &lt;ACCOUNT_NAME&gt;\n</code></pre> <p>Withdraw the vesting balance with the asset_claim_fees_operation which has an operation identifier of 43.  This will require building a transaction in the CLI Wallet.</p> <pre><code>begin_builder_transaction\nadd_operation_to_builder_transaction 0 [43, {\"issuer\":\"1.2.x\", \"amount_to_claim\":{\"amount\":N, \"asset_id\":\"1.3.y\"}}]\nset_fees_on_builder_transaction 0 1.3.0\n</code></pre> <p>Optionally preview the transaction before signing.</p> <pre><code>preview_builder_transaction 0\n</code></pre> <p>Sign and broadcast the transaction.</p> <pre><code>sign_builder_transaction 0 true\n</code></pre>"},{"location":"docs/wallet/HTLC/","title":"HTLC","text":"<p>=====================================================================</p> <p>\u56fd\u8bed\u7ffb\u8bd1</p> <p>Note: The BitShares UI Web Wallet does not yet implement the HTLC features. Therefore, one must use the BitShares CLI (command line wallet) to interact with HTLC directly. The UI Team is working with the Core Team to implement the required graphical interface prior to mainnet release.</p>"},{"location":"docs/wallet/HTLC/#introduction","title":"Introduction","text":"<p>An HTLC is a conditional transfer of value from \"depositor\" to \"recipient\" where two distinct conditions prevent immediate execution. 1) The hashlock requires presenting the proper \"preimage\" to the blockchain prior to the 2) timelock expiration, else the value automatically returns to \"depositor\".</p> <p>This allows two parties to exchange tokens on independent platforms trustlessly and securely and thus enables Atomic Cross-Chain Swaps (ACCS) among other useful functionalities.</p>"},{"location":"docs/wallet/HTLC/#getting-started-with-htlc","title":"Getting Started with HTLC","text":"<p>There are 5 steps to progress through when working with an HTLC: 1. Generate a \"preimage\" (depositor) 1. Calculate the \"preimage_hash\" (depositor) 1. Create the HTLC (depositor) 1. Verify the HTLC (recipient) 1. Redeem the HTLC (recipient)</p>"},{"location":"docs/wallet/HTLC/#0-prerequisites","title":"0. Prerequisites","text":"<ol> <li>The \"depositor\" must have an unlocked <code>cli_wallet</code> with their account (e.g <code>alice</code>) </li> <li>a. <code>alice</code> must have a balance of TEST tokens in her wallet</li> <li>b. anyone may issue this command to verify: $&gt;<code>list_account_balances alice</code> </li> <li>The \"recipient\" must have an unlocked <code>cli_wallet</code> with their account (e.g <code>bob</code>)</li> <li>a. <code>bob</code> may have a 0 balance</li> </ol> <p>Note: For testing purpose, the accounts may be in the same wallet</p>"},{"location":"docs/wallet/HTLC/#1-generate-a-preimage-depositor","title":"1. Generate a \"preimage\" (depositor)","text":"<ol> <li><code>alice</code> must generate a \"preimage\" (think: password) and keep is safe from <code>bob</code> until she is  ready to reveal it him. </li> <li>Using this external website generate a \"preimage\"</li> <li>Enter your \"preimage\" text into the textbox</li> </ol> <pre><code>Warning: Using a popular preimage is large security risk. The recipient can redeem the HTLC by comparing the preimage_hash to a dictionary of popular hashes. The best preimage is a long, random one.\n</code></pre> <ol> <li>Count how many characters your entered, including spaces, this is your \"preimage_length\" in bytes</li> <li>Retain your \"preimage\" and \"preimage_length\" for later use</li> <li>Example: \"preimage\" is <code>My Preimage</code> and \"preimage_length\" is <code>11</code> bytes</li> </ol>"},{"location":"docs/wallet/HTLC/#2-calculate-the-preimage_hash-depositor","title":"2. Calculate the \"preimage_hash\" (depositor)","text":"<ol> <li><code>alice</code> must calculate the \"preimage_hash\" from the preimage she generated above</li> <li>Just below the textbox will be the SHA256 hash of your preimage string</li> <li>Retain this as your \"preimage_hash\" for later use</li> <li>Example: \"preimage_hash\" is <code>650BFCEF53BD8E6E030613E0B75EC0CBA4FCD25C53BF0D15A6283593B269DF79</code></li> </ol>"},{"location":"docs/wallet/HTLC/#3-create-the-htlc-depositor","title":"3. Create the HTLC (depositor)","text":"<ol> <li><code>alice</code> will create the HTLC using the <code>htlc_create</code> command with syntax of <code>htlc_create &lt;from&gt; &lt;to&gt; &lt;amount&gt; &lt;symbol&gt; &lt;hash_algo&gt; &lt;preimage_hash&gt; &lt;preimage_length&gt; &lt;expiration&gt; &lt;broadcast&gt;</code></li> <li>a.  is <code>alice</code> our depositor <li>b.  is <code>bob</code> our recipient <li>c.  is the number of tokens to be locked into the contract (e.g. <code>100</code>) <li>d.  is the token symbol (e.g. <code>TEST</code>) <li>e.  will be <code>SHA256</code> (future releases may support additional hash algorithms) <li>f.  is the calculated value from #2 (not the preimage which remains private) <li>g.  is the number of bytes from #1 <li>h.  is the timelock expressed as the number of seconds the HTLC will remain valid   upon broadcast to the blockchain (e.g. <code>300</code> for 5 minutes) <li>i.  is a boolean value which must be set to <code>true</code> to be sent by the <code>cli_wallet</code> software <li><code>alice</code> will execute this command: $(unlocked)&gt;<code>htlc_create alice bob 100 TEST SHA256 \"650BFCEF53BD8E6E030613E0B75EC0CBA4FCD25C53BF0D15A6283593B269DF79\" 11 300 true</code></li> <li>The JSON response will be returned (else an assert error - check your parameters)</li> <li>The HTLC is now active and the hashlock expiration is counting down the seconds for <code>bob</code> to verify and redeem.</li> <li>The 100 TEST tokens are deducted from the account balance of <code>alice</code> and are locked into the HTLC,  protected by both the hashlock and timelock conditions.</li>"},{"location":"docs/wallet/HTLC/#4-verify-the-htlc-recipient","title":"4. Verify the HTLC (recipient)","text":"<ol> <li><code>bob</code> must validate the HTLC created by <code>alice</code> meets his requirements. He can do this by looking  at the recent account history operations for his account to find the active HTLC.</li> <li><code>bob</code> will execute this command: $(unlocked)&gt;<code>get_account_history bob 1</code></li> <li>a. This will return the most recent operation, which should begin with \"Create HTLC to bob\" </li> <li>b. Locate the HTLC \"database_id\" having the format <code>1.16.XX</code> </li> <li>i. \"XX\" will also be a numeric value unique to the HTLC <code>alice</code> created</li> <li>ii. Retain the complete HTLC \"database_id\" (e.g <code>1.16.99</code>)</li> <li><code>bob</code> will use the \"database_id\" to execute this command: $(unlocked)&gt;<code>get_htlc 1.16.99</code></li> <li><code>bob</code> will verify the following transfer values meet his expectations, as agreed to previously with <code>alice</code>:</li> <li>a. from</li> <li>b. to</li> <li>c. amount</li> <li>d. asset</li> <li> <p><code>bob</code> will now learn about the two conditions <code>alice</code> applied to the HTLC. </p> </li> <li> <p>Within the hashlock he observes:</p> </li> <li> <p>a. hash_algo</p> </li> <li>b. preimage_hash</li> <li> <p>c. preimage_length</p> </li> <li> <p>Within the timelock he observes:</p> </li> <li> <p>d. expiration_string</p> </li> <li> <p>If <code>bob</code> validates everything, he may proceed to Redeem the HTLC</p> </li> <li>Else, <code>alice</code> will automatically receive the value locked in the HTLC when the timelock expires </li> </ol>"},{"location":"docs/wallet/HTLC/#5-redeem-the-htlc-recipient","title":"5. Redeem the HTLC (recipient)","text":"<ol> <li><code>bob</code> will obtain the <code>preimage</code> from <code>alice</code>, likely after performing the agreed upon task</li> <li>The <code>htlc_redeem</code> command has the following syntax: <code>htlc_redeem &lt;htlc_database_id&gt; &lt;fee_paying_account&gt; &lt;preimage&gt; &lt;broadcast&gt;</code></li> <li><code>bob</code> will execute the following command: $(unlocked)&gt;<code>htlc_redeem 1.16.99 bob \"My Preimage\" true</code></li> <li>The JSON response will be returned (else an assert error - check your parameters)</li> <li>The \"preimage\" <code>bob</code> supplied satisfies the hashlock condition on the HTLC and the <code>100 TEST</code> are moved into his account balance (less 0.4 TEST which is paid as the transaction fee, less 0.8 TEST which is paid as the kilobyte fee for storing the \"preimage\").</li> <li>Anyone may issue this command to verify: $&gt;<code>list_account_balances bob</code></li> </ol>"},{"location":"docs/wallet/HTLC/#using-two-htlcs-to-perform-an-atomic-swap","title":"Using Two HTLCs to Perform an Atomic Swap","text":"<p>An atomic swap involves a pair of HTLCs related by the same hashlock within both, allowing for  trustless exchange of distinct tokens between distinct accounts. More on how to perform this on the TESTNET shortly.</p>"},{"location":"docs/wallet/HTLC/#performing-an-atomic-cross-chain-swap-accs","title":"Performing an Atomic Cross Chain Swap (ACCS)","text":"<p>The ultimate goal for our HTLC implementation is to allow the trustless exchange of tokens on the  BitShares blockchain for tokens on a foreign blockchain. We will likely start with TESTBTC instructions in the coming weeks. Please practice on our chain first. </p>"},{"location":"docs/wallet/Import-BitShares-0.9.3c-wallets-into-BitShares-2.0-CLI-wallet/","title":"Import BitShares 0.9.3c wallets into BitShares 2.0 CLI wallet","text":""},{"location":"docs/wallet/Import-BitShares-0.9.3c-wallets-into-BitShares-2.0-CLI-wallet/#how-to-import-large-wallets-from-bitshares-093","title":"How to Import Large Wallets from BitShares 0.9.3","text":"<p>In bitshares 0.9.3c, run: </p> <pre><code>wallet_export_keys /tmp/final_bitshares_keys.json\n</code></pre> <p>in bitshares 2.0 CLI wallet, run:     &gt;&gt;&gt; import_accounts /tmp/final_bitshares_keys.json my_password</p> <p>then, for each account in your wallet (run list_my_accounts to see them):</p> <pre><code> &gt;&gt;&gt; import_account_keys /tmp/final_bitshares_keys.json my_password my_account_name my_account_name\n</code></pre> <p>note: in the release tag, this will create a full backup of the wallet after every key it imports. If you have thousands of keys, this is quite slow and also takes up a lot of disk space. Monitor your free disk space during the import and, if necessary, periodically erase the backups to avoid filling your disk.  The latest code only saves your wallet after all keys have been imported.  </p> <pre><code> &gt;&gt;&gt; import_balance my_account_name [\"*\"] true\n &gt;&gt;&gt; list_account_balances my_account_name\n</code></pre> <p>Verify the Results</p>"},{"location":"docs/wallet/Import-account-to-cli-wallet/","title":"Import account to cli wallet","text":"<p>Lets face it, in this days most of the bitshares accounts are created through OpenLedger.</p> <p>As developers we like to control our accounts throw the command line. This small tutorial will help you import your light/web wallet created account into the cli wallet.</p> <p>Everything is done with your private key, it is extremely important that you keep this key safe or as you will see anybody will be able to claim your funds.</p> <p>Go to the permissions tab of your account: </p> <p>Click in your public key and press \"show\" to get your private key.</p> <p>If your wallet is locked you will need to enter your password to unlock and unhide the private key.</p> <p></p> <p>Thanks @valentin for showing me where how to obtain the private keys from the web wallet.</p> <p>Now, the only thing you need to import to the cli wallet is your account name and your private key.</p> <p>Start the cli wallet pointing it to a live node:</p> <pre><code>root@NC-PH-1346-07:~/bitshares/issue163/bitshares-core# ./programs/cli_wallet/cli_wallet --server-rpc-endpoint ws://localhost:8090\n</code></pre> <p>Set a password for your wallet, please note this password does not need to be the same as the one you have for OpenLedger, this is a new wallet and it will be secured by a new password, then we import the accounts into the new created wallet.</p> <pre><code>new &gt;&gt;&gt; set_password mypass\nset_password mypass\nnull\nlocked &gt;&gt;&gt; unlock mypass\nunlock mypass\nnull\nunlocked &gt;&gt;&gt; \n</code></pre> <p>Using the private key use the following command to import account:</p> <pre><code>import_key \"oxarbitrage.a699\" privatekeygoeshere\n</code></pre> <p>And you are done, no need to claim balance, it is already there.</p> <p>Use <code>list_my_accounts</code> to see your imported account.</p> <p>And to check balance:</p> <pre><code>unlocked &gt;&gt;&gt; list_account_balances oxarbitrage.a699\nlist_account_balances oxarbitrage.a699\n31016.69330 BTS\n0 CNY\n0 USD\n\nunlocked &gt;&gt;&gt; \n</code></pre> <p>You now control your web wallet created account from your cli wallet.</p>"},{"location":"docs/wallet/Plasma---Wallet-API/","title":"Plasma   Wallet API","text":""},{"location":"docs/wallet/Plasma---Wallet-API/#plasma-wallet-api","title":"Plasma Wallet API","text":"<p>This API defines how developers can create and manage a Wallet using Plasma. A Wallet is a place where private user information can be stored.  This information is kept encrypted when on disk or stored on the remote server.</p> <p>The purpose of this API is to abstract the details of synchronizing local and remote copies of your wallet.</p> <p>Assume a class named Wallet that has the following calls:</p> <p>This method will configure the wallet to look to a remote host to load and/or save your wallet. By passing null into this call the wallet will stop synchronizing its state with the remote server.</p> <pre><code>wallet.useBackupServer( url )\n</code></pre> <p>This call is used to configure the wallet to keep a local copy on disk. This allows the user to access the wallet even if the server is no longer available. This option can be disabled on public computers where the wallet data should never touch disk and should be deleted when the user logs out. </p> <pre><code>wallet.keepLocalCopy( save = true )\n</code></pre> <p>This method is used to configure the wallet to save its data on the remote server. If this is set to false, then it will be removed from the server. If it is set to true, then it will be uploaded to the server. If the wallet is not currently saved on the server a token will be required to allow the creation of a new wallet.</p> <pre><code>wallet.keepRemoteCopy( save = true, token = null )\n</code></pre> <p>This API call is used to load the wallet. If a backup server has been specified then it will attempt to fetch the latest version from the server, otherwise it will load the local wallet into memory.  The configuration set by keepLocalCopy will determine whether or not the wallet is saved to disk as a side effect of logging in.  The wallet is unlocked in RAM when it combines these as follows: lowercase(email) + lowercase(username) + password to come up with a matching public / private key.  If keepRemoteCopy is enabled, the email used to obtain the token must match the email used here.  Also, if keepRemoteCopy is enabled, the server will store only a one-way hash of the email (and not the email itself) so that it can track resources by unique emails.</p> <pre><code>wallet.login( email, username, password )\n</code></pre> <p>This API call will remove the wallet state from memory.</p> <pre><code>wallet.logout()\n</code></pre> <p>This method returns a JSON object representing the state of the wallet. It is only valid if the wallet has successfully logged in.</p> <pre><code>wallet.getState()\n</code></pre> <p>This method is used to update the wallet state. If the wallet is configured to keep synchronized with the remote wallet then the server will refer to a copy of the wallets revision history to ensure that no version is  overwritten.  If the local wallet ever falls on a fork any attempt to upload that wallet will cause the API call to fail. The user should be alerted so they can reconcile manually.  After successfully storing the state on the server, save the state to local memory, and optionally disk.  </p> <pre><code>wallet.setState( state ) \n</code></pre>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/","title":"Wallet 2 Factor Authentication Protocol","text":""},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#two-factor-authentication-protocol","title":"Two Factor Authentication Protocol","text":"<p>Two factor authentication is critical for maximizing security and ease of use.  In the case of cryptocurrencies two-factor authentication means gathering multiple signatures on a transaction to authorize a transfer.  The process of gathering these signatures requires passing around a transaction digest to multiple parties who will automatically provide their signature after verifying your identity by some means. </p> <p>The purpose of this protocol is to define a standard way for 3rd parties to provide automatic 2-factor authentication services with any standard Graphene wallet.  Users of a Graphene wallet can easily add any number of 2-factor authentication (2FA) providers to their account and the Graphene wallet will use this protocol to gather the required signatures for the transaction.</p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#user-accounts","title":"User Accounts","text":"<p>A user wishing to add one or more 2FA providers to their account will need to update their account permissions to require the authority of one key from the user AND the authority of a second account controlled by the 2FA provider.   The purpose of this protocol is to help automate the gathering of any additional signatures in a standardized manner. </p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#2fa-providers","title":"2FA Providers","text":"<p>For the purpose of this document <code>https://secondfactor.org</code> will be the example service provider and <code>alice</code> will be the account name of the user seeking services from secondfactor.org.</p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#step-1-user-registration","title":"Step 1 - User Registration","text":"<p>The first thing a user must do is identify themselves with <code>secondfactor.org</code> by some means.  This may be as simple as verifying an email address, registering a phone number, or ordering a keyfob. </p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#step-2-create-graphene-account-for-secondfactororg","title":"Step 2 - Create Graphene Account for secondfactor.org","text":"<p>A Graphene account is how <code>secondfactor.org</code> authenticates itself with a Graphene blockchain. We will assume <code>secondfactor.org</code> has registered the Graphene account name <code>sfactor</code>.  </p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#step-3-create-a-dedicated-graphene-account-for-the-alicesfactor-combination","title":"Step 3 - Create a Dedicated Graphene Account for the alice/sfactor Combination","text":"<p>When <code>alice</code> approaches <code>sfactor</code> and signs up for 2FA she needs to add a second signer on the account <code>alice</code>.   The goal is for <code>sfactor</code> to sign anything at the request of <code>alice</code> but to do this without compromising the <code>sfactor</code>.  To do this a new account must be registered on the blockchain that is effectively controlled by <code>alice</code> via <code>sfactor</code>.  We will call this new account <code>sfactor.alice</code>.   <code>sfactor.alice</code> will be configured so that it's owner authority is <code>sfactor</code>, but it's active authority is a unique public key assigned to the account by <code>sfactor</code>.    At any time <code>sfactor</code> may update the active authority of <code>sfactor.alice</code> using the owner permissions.   </p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#step-4-add-sfactoralice-as-a-required-authority-for-alice","title":"Step 4 - Add sfactor.alice as a required authority for alice","text":"<p>Alice will have to update the active permissions of account <code>alice</code> to require both her key and the permission of <code>alice.sfactor</code> to approve any action on the part of <code>alice</code>.    She can either do this manually or https://secondfactor.org can use the Transaction Request Protocol to automatically ask <code>alice</code> to approve the change to her account.</p>"},{"location":"docs/wallet/Wallet-2-Factor-Authentication-Protocol/#step-5-alice-requests-an-action-requiring-2fa","title":"Step 5 - Alice Requests an Action requiring 2FA","text":"<p>After the <code>alice</code> account has been updated it will now require permission from <code>alice.sfactor</code> to authorize any action. The most basic 2-factor API assumes the provider.</p> <p>reates an account with <code>secondfactor.org</code></p>"},{"location":"docs/wallet/Wallet-Argument-Format/","title":"Wallet Argument Format","text":"<p>When using the Wallet Login Protocol or the Wallet Merchant Protocol it is necessary to pass arguments to and from the wallet.   For security purposes these arguments are passed via the URL after the <code>#</code> so that they are kept secret from the wallet service provider.   Because URLs are limited to about 2048 bytes of data the Wallet APIs pass arguments as a JSON string that has been compressed with LZMA and serialized to Base58.</p>"},{"location":"docs/wallet/Wallet-Argument-Format/#step-1-compress-your-json-representation","title":"Step 1: Compress your JSON representation","text":"<p>Using LZMA-JS library to compress the JSON into a binary array.  This will be the most compact form of the data.  This will reduce the size of the data by up to 50%.</p>"},{"location":"docs/wallet/Wallet-Argument-Format/#step-2-convert-to-base58","title":"Step 2: Convert to Base58","text":"<p>Using the bs58 library encode the compressed data in base58.  Base58 is URL friendly and size efficient.  After converting to base58 the result will be about 70% the size of the original JSON data.</p>"},{"location":"docs/wallet/Wallet-Backup/","title":"Wallet Backup Implementation","text":"<p>The purpose of this document is to outline the requirements for automated backup to prevent the loss of funds.  A web-based wallet is easily accidentally deleted anytime the user clears all cache and cookies and is not a safe place to keep unrecoverable information.  For this reason the wallet data must be backed up in a secure manner. </p>"},{"location":"docs/wallet/Wallet-Backup/#tracking-backup-status","title":"Tracking Backup Status","text":"<p>The minimal requirement for wallet backups is for the user to download an encrypted copy of their wallet to their disk outside the browser cache / data stores.   Any time new, unrecoverable data is added to the wallet the user interface needs to indicate \"Backup Recommended\" on the footer of every screen.  When the user clicks \"backup\" it should automatically download the wallet to their Download's folder with no other action require.  Ideally, the user would not have to click anything to trigger the automatic saving to the Download's folder. </p>"},{"location":"docs/wallet/Wallet-Backup/#automatic-uploading-to-drop-box","title":"Automatic Uploading to Drop Box","text":"<p>This process can be automated as an alternative (or in addition to) downloading the wallet locally.  </p>"},{"location":"docs/wallet/Wallet-Backup/#encrypting-the-wallet","title":"Encrypting the Wallet","text":"<p>Backups are only as secure as the password protecting the encrypted data.  Typical user passwords are less than ideal for the purpose of securing a backup, so instead it is preferred to encrypt backups relative to a brain key.  A brainkey is something users are expected to write down and physically store and then keep off of digital devices that may be lost.  </p> <p>The brainkey can be used to derive a public key.  When a wallet is encrypted a one-time private key is generated and combined with the public brainkey to generate a onetime secret that will serve as the AES password.    </p> <p>Users will be able to recover any backup with their brain key, but will not require their private brain key to encrypt their backup.</p>"},{"location":"docs/wallet/Wallet-Backup/#accessing-the-wallet-on-new-device","title":"Accessing the Wallet on New Device","text":"<p>A secondary purpose for remote backups is to allow the user to easily load their wallet on a new device by simply entering the brain key.   Using 3rd party services such as Drop Box or Github to track backups complicates the process of loading a wallet on a new computer.  Users will have a better experience if all backups are seamless and do not require signing or authorizing a 3rd party service. </p> <p>Users should be able to upload their encrypted wallet to the wallet server and then look it up again knowing nothing but the brain key.   The server will need a secure, automated way to authenticate the individual requesting to upload or download the wallet without requiring external verification. </p> <p>To achieve this wallets storage and retrieval will require authentication of the WALLET_KEY which is derived from the brain key.   The private WALLET_KEY is kept on the user's device protected only by their simple password.   Anytime the user's local wallet is unlocked it is possible to upload a backup.</p> <p>When a user logs into the web service from a new device, they must provide their BRAIN_KEY which will allow them to generate their WALLET_KEY and therefore authenticate a request to download the wallet from the server.   The server will lookup the wallet using the PUBLIC_WALLET_KEY as the unique identifier. </p>"},{"location":"docs/wallet/Wallet-Backup/#avoid-deleting-data","title":"Avoid Deleting Data","text":"<p>When a user does a backup to the server, old versions of the wallet should be saved.  This will prevent attackers who compromise a local wallet from overwriting a good backup with a bad backup.  </p>"},{"location":"docs/wallet/Wallet-Backup/#wallet-data-should-be-compressed","title":"Wallet Data Should be Compressed","text":"<p>To save space on the server, wallet data should be compressed prior to being encrypted.  </p>"},{"location":"docs/wallet/Wallet-Backup/#preventing-abuse","title":"Preventing Abuse","text":"<p>Any service that allows users to upload arbitrary binary data has the potential to be abused to store data other than wallet backups.  There are several ways of preventing abuse:</p> <ol> <li>Require all wallet keys to belong to an account registered on the blockchain</li> <li>Limit automatic backup to accounts referred by a set of accounts</li> <li>Limit the frequency of updates to the backup wallet </li> <li>Limit the frequency of downloads of the backup wallet </li> <li>Limit automatic backup to whitelisted accounts </li> <li>Limit automatic backup to accounts with a minimal balance </li> <li>Require proof-of-work on every backup</li> </ol>"},{"location":"docs/wallet/Wallet-Backup/#limiting-liability","title":"Limiting Liability","text":"<p>Account backup should be provided for convenience only, and should not be relied upon as a way to recover your wallet file in all circumstances.  The service provider should have all users waive the right to sue if the provider is unable or unwilling to produce a copy of the backup wallet.  Users should also agree to allow the service provider to publish all backup wallets in a public manner, such as a github repository, and therefore the service provider has no liability for data breaches.  </p>"},{"location":"docs/wallet/Wallet-Login-Protocol/","title":"Wallet Login Protocol","text":""},{"location":"docs/wallet/Wallet-Login-Protocol/#wallet-login-protocol","title":"Wallet Login Protocol","text":"<p>The idea behind the login protocol is to allow another party to verify that you are are the owner of a particular account.  Traditionally login is performed via a password that sent to the server, but this method is subject to Phishing Attacks.  Instead of a password, Graphene uses a cryptographic challenge/response to verify that a user controls a particular account.</p> <p>For the purpose of this document, we will assume https://merchant.org is the service that will be logged into and that https://wallet.org is the wallet provider that will be assisting the user with their login.</p>"},{"location":"docs/wallet/Wallet-Login-Protocol/#step-1-merchant-login-button","title":"Step 1 - Merchant Login Button","text":"<p>The merchant must provide the user with a login button that links to https://wallet.org/login#${args} where ${args} is a JSON object serialized with the Wallet Argument Format and containing following information: </p> <pre><code>{\n   \"onetimekey\" : \"${SERVER_PUBLIC_KEY}\",\n   \"account\"  : \"${OPT_ACCOUNT_NAME}\",\n   \"callback\" : \"https://merchant.org/login_callback\"\n}\n</code></pre> <p>The merchant server will need to save the <code>${SERVER_PRIVATE_KEY}</code> associated with the <code>${SERVER_PUBLIC_KEY}</code> in the user's web session in order to verify the login.  </p>"},{"location":"docs/wallet/Wallet-Login-Protocol/#step-2-wallet-confirmation","title":"Step 2 - Wallet Confirmation","text":"<p>When the user loads <code>https://wallet.org/login#${args}</code> they will be prompted to confirm the login request by selecting an account that they wish to login with.  If \"account\" was specified in the <code>${args}</code> then it will default to that account.</p> <p>After the account is identified enough keys to authorize a account must participate in the login process in the following way.</p> <p>The wallet generates a <code>WALLET_ONETIMEKEY</code> and derives a <code>shared secret</code> with the <code>SERVER_PUBLIC_KEY</code> provided by the https://merchant.org via <code>${args}</code>.   This shared secret is a provably \"random\" 512 bits of data that is only known to the wallet at this point in time.   The wallet then gathers signatures on the shared secret from enough keys to authorize the account.  In the simple case this will be a single signature, but in more complex cases multi-factor authentication may be required.  </p> <p>After gathering all of the signatures the wallet redirects the user to <code>https://merchant.org/login_callback?a=${result}</code> where <code>result</code> is an encoded JSON object containing the following information:</p> <pre><code>{\n   \"account\": \"Graphene Account Name\",\n   \"server_key\": \"${SERVER_PUBLIC_KEY}\",\n   \"account_key\": \"${WALLET_ONETIMEKEY}\",\n   \"signatures\" : [ \"SIG1\", \"SIG2\", .. ]\n}\n</code></pre>"},{"location":"docs/wallet/Wallet-Login-Protocol/#step-3-server-verifies-authority","title":"Step 3 - Server Verifies Authority","text":"<p>Upon receiving the <code>result</code> from the wallet, https://merchant.org will lookup ${SERVER_PRIVATE_KEY} in the user's session data and then combine it with <code>${WALLET_ONETIMEKEY}</code> to generate the <code>shared secret</code> that was used by the wallet.   Once this shared secret has been recovered, it can be used to recover the public keys that correspond to the provided signatures. </p> <p>The last step is to verify that the public keys provided by the signatures are sufficient to authorize the account given the current state of the graphene blockchain.   This can be achieved using the witness API call <code>verify_account_authority( account_name_or_id, [public_keys...] )</code>.   The <code>verify_account_authority</code> call will return <code>true</code> if the provided keys have sufficient authority to authorize the account, otherwise it will return <code>false</code></p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/","title":"Wallet Merchant Protocol","text":"<p>The purpose of this protocol is to enable a merchant to request payment from the user via a hosted wallet provider or via a browser plugin.  We will assume that the wallet is hosted at https://wallet.org and that the merchant is hosted at https://merchant.org.</p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#privacy-concerns","title":"Privacy Concerns","text":"<p>The goal of this protocol is to maintain user and merchant privacy from the wallet provider which should never have direct access to the invoice data.</p> <p>To securely pass data from https://merchant.org to the javascript wallet hosted at https://wallet.org, the data will have to be passed after the \"#\".  Assuming the wallet provider is not serving up pages designed to compromise your privacy, only your web browser will have access to the invoice data.  </p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#step-1-define-your-invoice-via-json","title":"Step 1: Define your Invoice via JSON","text":"<p>This invoice provides all of the data needed by the wallet to display an invoice to the user. </p> <pre><code>{\n   \"to\" : \"merchant_account_name\",\n   \"to_label\" : \"Merchant Name\",\n   \"memo\" : \"Invoice #1234\",\n   \"line_items\" : [\n        { \"label\" : \"Something to Buy\", \"quantity\": 1, \"price\" : \"1000.00 SYMBOL\" },\n        { \"label\" : \"10 things to Buy\", \"quantity\": 10, \"price\" : \"1000.00 SYMBOL\" },\n        { \"label\" : \"User Specified Price\", \"quantity\": 1, \"price\" : \"CUSTOM SYMBOL\" },\n        { \"label\" : \"User Asset and Price\", \"quantity\": 1, \"price\" : \"CUSTOM\" }\n    ],\n    \"note\" : \"Something the merchant wants to say to the user\",\n    \"callback\" : \"https://merchant.org/complete\"\n}\n</code></pre> <p>By itself this data is 579 characters which after URL encoding is 916 characters, with a 2000 character limit this approach doesn't scale as well as we would like.</p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#step-2-compress-your-json-representation","title":"Step 2: Compress your JSON representation","text":"<p>Using LZMA-JS library to compress the JSON into a binary array.  This will be the most compact form of the data.  After running the compression the example JSON was reduced to 281 bytes from 579 bytes.</p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#step-3-convert-to-base58","title":"Step 3: Convert to Base58","text":"<p>Using the bs58 library encode the compressed data in base58.  Base58 is URL friendly and size efficient.  After converting to base58 the string will be 385 characters which can easily be passed in a URL and easily support much larger invoices. </p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#step-4-pass-to-wallet","title":"Step 4: Pass to Wallet","text":"<p>Once the Base58 data is known, it can be passed to the wallet with the following URL:</p> <p>https://wallet.org/#/invoice/BASE58BLOB</p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#step-5-receive-callback-from-wallet","title":"Step 5: Receive Callback from Wallet","text":"<p>After the wallet has signed a transaction, broadcast it, and gotten confirmation from https://wallet.org that the transaction was included in <code>block 12345</code> as <code>transaction 4</code> wallet will direct the user to <code>https://merchant.org/complete?block=12345&amp;trx=4</code></p> <p>The merchant will then request that transaction from https://wallet.org/api?block=12345&amp;trx=4 which will respond with the transaction that was included in the blockchain.   The merchant will decrypt the memo from the transaction and use memo content to confirm payment for the invoice.  </p>"},{"location":"docs/wallet/Wallet-Merchant-Protocol/#step-6-payment-complete","title":"Step 6: Payment Complete","text":"<p>At this point the user has successfully made a payment and the merchant has verified the payment has been received without having to maintain a full node.  </p>"},{"location":"docs/wallet/Wallet-Server-Architecture/","title":"Wallet Server Architecture","text":"<p>To maintain a user experience similar to any other website, it is critical that users can log into the website and gain access to their private keys from any computer.  It is equally important that the server does not have access to the user's private keys.</p> <p>The goal of this specification is to define a protocol between the web browser and the server for storing and retrieving private data of the user.  Because all data is encrypted, the server will need to use some techniques to prevent abuse.  We will assume that prior to storing data on the server the user must request a code that will be sent to them by email.</p> <p>The syntax below is shorthand for JSON-RPC requests sent to/from the server:</p> <pre><code>server.requestCode( email )\n</code></pre> <p>Then the user can store data on the server like so:</p> <pre><code>server.createWallet( code, encrypted_data, signature )\n</code></pre> <p>The wallet will be saved on the server using the public_key derived from encrypted_data and signature.  The code contains a irreversible hash of the email.  This is used in a unique constraint effectively limiting users to one wallet per email.  The original email address is not stored in the database.</p> <p>Then the user can fetch data from the server like so:</p> <pre><code>server.fetchWallet( publickey, local_hash )\n</code></pre> <p>This method will only fetch the wallet if it is different than what is already cached locally.  In addition to returning the encrypted wallet, this method will also return statistics about when it was last updated, and which IPs have requested the wallet and when.  This can be used by the user to detect potential attempts at fraud.</p> <p>The user can update their data with this call:</p> <pre><code>server.saveWallet( original_local_hash, encrypted_data, signature )\n</code></pre> <p>The signature can be used to derive the public key under which encrypted_data should be stored.  The server will have to verify that derived public key exists in the database or this method will fail.  If the original_local_hash does not match the wallet being overwritten this method needs to fail.</p> <p>The user can change their \"key\" with the following call:</p> <pre><code>server.changePassword( original_local_hash, original_signature, new_encrypted_data, new_signature )\n</code></pre> <p>After this call the public key used to lookup this wallet will be the one derived from new_signature and new_encrypted_data.  A wallet must exist at the old_public_key derived from the original_local_hash and original_signature.</p> <p>The user may delete their wallet with the following call:</p> <pre><code>server.deleteWallet( local_hash, signature )\n</code></pre> <p>For security reasons, this delete is permanent.  The user may repeat the process to create a new wallet using the same email.</p>"},{"location":"docs/wallet/Wallet-Server-Architecture/#generating-public-keys","title":"Generating Public Keys","text":"<p>Users generate a private key from their password.  Generally speaking, passwords are too weak and could be strengthened by being combined with other information that is both unique to the user and unlikely for the user to forget.  At a minimum email address and/or username can be combined with the password to recover the private key for the wallet.  Additional information such as social security numbers, passport IDs, phone numbers, or answers to other security questions may be useful for some applications.  Keep in mind that the user must remember both their password AND the exact set of security Questions and Answers in order to recover their account.</p>"},{"location":"docs/wallet/Wallet-Server-Architecture/#mitigating-brute-force-attacks","title":"Mitigating Brute Force Attacks","text":"<p>The server should limit the number of wallet requests it accepts per IP address to a fixed number per hour.  In this way users wallet data is kept secure from attempts at brute force attacks unless the server itself is compromised.  In the event the server is compromised, users are only protected by the quality of their password and any other data used as salt.</p>"},{"location":"docs/wallet/Wallet-Server-Architecture/#saving-the-wallet-locally","title":"Saving the Wallet Locally","text":"<p>The browser should cache the wallet data locally </p>"},{"location":"docs/wallet/Wallet_Full-Nodes_Witness_Nodes/","title":"Wallet Full Nodes Witness Nodes","text":"<p>We need a client to connect to. Either we run a witness in (monitor mode) or use a public trusted witness. For exchanges, it is though recommended to run a full node. We can connect to the network via a seed node:</p> <pre><code>programs/witness_node/witness_node -s 104.200.28.117:61705 --rpc-endpoint 127.0.0.1:8090  # FIXME?\n</code></pre> <p>This opens up a node that we can connect to via the inluded wallet</p> <pre><code>programs/cli_wallet/cli_wallet -s ws://127.0.0.1:8090 -H 127.0.0.1:8091\n</code></pre> <p>which will open port <code>8091</code> for HTTP-RPC requests and has the capabilities to handle accounts while the witness_node can only answer queries to the blockchain.</p>"},{"location":"docs/wallet/Web-and-light-wallets-release-procedure/","title":"Web and light wallets release procedure","text":"<p>(outdated, should rewrite and move it to https://github.com/bitshares/bitshares-ui)</p>"},{"location":"docs/wallet/Web-and-light-wallets-release-procedure/#release-notes","title":"Release Notes","text":"<ul> <li>Checkout and test graphene-ui master</li> <li>Add release notes to <code>graphene-ui/release-notes.txt</code></li> <li>Commit your changes</li> </ul>"},{"location":"docs/wallet/Web-and-light-wallets-release-procedure/#open-ledger-wallet-release","title":"Open Ledger wallet release:","text":"<ul> <li>Clone openledger graphene-ui</li> <li>Add upstream repo    <code>git remote add cnx https://github.com/cryptonomex/graphene-ui</code></li> <li>Fetch upstream   <code>git fetch cnx</code></li> <li>Merge upstream/master   <code>git merge cnx/master</code></li> <li>Run <code>npm install</code> in <code>dl/</code> and in <code>web/</code></li> <li>Commit changes to openledger repository</li> <li>Tag using in this format: <code>2.X.YYMMDD</code></li> <li>Push including tags <code>git push --tags</code></li> <li>Build (<code>cd web/ &amp;&amp; npm run build</code>)</li> <li>Open <code>dist/index.html</code> and make sure everything is working and the version in status bar matches tag</li> <li>Clone <code>https://github.com/cryptonomex/faucet</code> and checkout <code>ol</code> branch and install gems with bundle command</li> <li>In faucet dir run <code>mina wallet</code> - this will deploy to 'ol' server (specified in <code>.ssh/config</code>)</li> <li>Alternatively, copy the dist folder directly to the server: scp dist/* bitshares.openledger.info:/www/current/public/wallet/    </li> <li>Open https://bitshares.openledger.info and make sure there are no errors and version matches release tag</li> </ul>"},{"location":"docs/wallet/Web-and-light-wallets-release-procedure/#light-wallets","title":"Light wallets","text":"<ul> <li>(one time) Install NSIS</li> <li><code>git clone https://github.com/bitshares/bitshares-2-ui</code> branch <code>bitshares</code></li> <li>Add upstream repo <code>git remote add cnx https://github.com/cryptonomex/graphene-ui</code></li> <li>Fetch upstream   <code>git fetch cnx</code></li> <li>Merge upstream/master into bitshares branch   <code>git merge cnx/master</code></li> <li>Run <code>npm install</code> in <code>dl/</code> , <code>web/</code> and in <code>electron/</code></li> <li>Tag it with release version</li> <li>Edit <code>electron/build/package.json</code> and update version</li> <li>Commit your changes and push both commits and tags</li> <li>Build it in <code>web/</code> via <code>npm run electron</code> command</li> <li>Goto to <code>electron/</code></li> <li>Build light wallet via <code>npm run release</code> command</li> <li>It will create dmg/deb/exe file in <code>releases/</code></li> <li>Make sure created file name matches tag/version</li> <li>Run installer and test the app</li> <li>Go to bitshares-2 repo</li> <li>Update gui_version, commit, tag and push - this will create a new tag</li> <li>Open https://github.com/bitshares/bitshares-2/releases, create new release under tag created in previous step</li> <li>Specify release notes, upload dmg/deb/exe wallets created earlie</li> </ul>"},{"location":"docs/wallet/Web-and-light-wallets-release-procedure/#bitsharesorg-wallet-and-downloads-page","title":"Bitshares.org wallet and downloads page","text":"<ul> <li>Go to bitshares.gihub.io repo (<code>git clone https://github.com/bitshares/bitshares.github.io</code>)</li> <li>Copy <code>bitshares-2-ui/web/dist/*</code> to <code>wallet/</code></li> <li>Edit <code>_includes/download.html</code> and update download links and gui release date</li> <li>Commit and push</li> </ul>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/","title":"How To become an active witness in BitShares 2.0","text":"<p>This document serves as an introduction on how to become an actively block producing witness in in the BitShares2.0 network. Please note that there currently is no public testnet available, hence, this howto will fail at the last few steps. However, we feel that we should inform interested parties about how to prepare their machines for participation as witness as soon as possible.</p> <p>We will have to import an existing account from the BitShares 0.9 network and add some initial funds for the witness registration fee. After that, we will create, configure and run a witness node.</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#preparations-in-bitshares-09-network","title":"Preparations in BitShares 0.9 network","text":""},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#extracting-an-account-from-bitshares-09","title":"Extracting an account from BitShares 0.9","text":"<p>To create a new account, you will need to start with an existing account with some of the BTS asset that will pay the transaction fee registering your new witness. Get your <code>&lt;wif&gt;</code> key from BitShares 0.9 via</p> <pre><code>BitShares0.9: &gt;&gt;&gt; wallet_dump_account_private_key &lt;accountname&gt; \"owner_key\"\n\"5.....\"  # the &lt;owner wif key&gt;\n</code></pre>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#extracting-balances-from-bitshares-09","title":"Extracting balances from BitShares 0.9","text":"<p>The key we have extracted previously only gives access to the registered name. Hence, none of the accounts in the genesis block have balances in them. In the first BitShares network, accounts were less tightly coupled to balances. Balances were associated with public keys, and an account could have hundreds of public keys with balances (or, conversely, public keys with balances could exist without any account associated with them). </p> <p>In order to get a witness registered we need to import approximately $120 worth of BTS into the BitShares 2.0 client later.</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#manually-extracting-private-keys-most-secure-way","title":"Manually extracting private keys (most secure way)","text":"<p>We can extract the required private keys that hold funds this way. First we get all balance ids from an account via:</p> <pre><code>BitShares0.9: &gt;&gt;&gt; wallet_account_balance_ids &lt;accountname&gt;\n[[\n\"xeroc\",[\n  \"BTSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n  \"BTSBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\",\n      ...\n]\n  ]\n]\n</code></pre> <p>Each of these balances can be investigated via:</p> <pre><code>BitShares0.9: &gt;&gt;&gt; blockchain_get_balance BTSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n....\n\"asset_id\": 0,                                     &lt;- asset_id (0: BTS)\n\"data\": {\n  \"owner\": \"BTSOOOOOOOOOOOOOOOOOOOOOOOOOOOOOWNER\", &lt;- address\n      ...\n  \"balance\": 0,                                        &lt;- balance\n  ...\n</code></pre> <p>The required part (the owner of the balance) is denoted as <code>owner</code>. Pick one or more address for BTS balances and dump the corresponding private key(s) with:</p> <pre><code>BitShares0.9: &gt;&gt;&gt; wallet_dump_private_key BTSOOOOOOOOOOOOOOOOOOOOOOOOOOOOOWNER\n\"5.......\" # the &lt;balance wif key&gt;\n</code></pre> <p>Note: Make sure to secure these private keys, as they are unencrypted and give access to the funds in the BitShares 0.9 network. You may loose your money if you are not an secure computer!</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#scripted-extraction-with-python-requires-code-audit","title":"Scripted extraction with Python (requires code audit)","text":"<p>The following paragraphs will give an alternative (easier) way to dump the relevant private keys using a python script. If you are comfortable with the description above, you can safely skip the subsequent paragraph.</p> <p>A Python script located at github may help you to retrieve private keys for your balances. You need to modify the first few lines of the script in order to get a connection to your BitShares daemon.</p> <pre><code>$ edit getbalancekeys.py\n    [...]\nconfig.url    = \"http://10.0.0.16:19988/rpc\"\nconfig.user   = 'rpc-user'\nconfig.passwd = 'rpc-password'\nconfig.wallet = \"default\"\n    [...]\n</code></pre> <p>If you don't know what to do with these, you certainly shouldn't run a witness just now. Instead, read about RPC and the API of BitShares. If you set up everything correctly, you may just run the python script and get the private keys associated to a given account name and the correspoinding balance:</p> <pre><code>$ python getbalancekeys.py\naccountA   5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;owner wif key&gt;           2750.00000 BTS        \naccountB   5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;owner wif key&gt;          11246.00000 BTS\naccountB   5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;owner wif key&gt;          30000.00000 BROWNIE.PTS\naccountB   5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;owner wif key&gt;            300.00000 USE\naccountB   5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;owner wif key&gt;          65744.00000 NOTE\naccountC   5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;owner wif key&gt;              3.00000 GOLD\n[...]\naccountA's owner key 5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;balance wif key&gt;  # \naccountB's owner key 5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;balance wif key&gt;  # \naccountC's owner key 5xxxxxxxxxxxxxxxxxxxxxxxxxx&lt;balance wif key&gt;  #\n</code></pre> <p>You will only need BTS balances and the one of your account owner keys in order to become a witness.</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#bitshares-20-network-or-graphene-testnet","title":"BitShares 2.0 network (or Graphene testnet)","text":"<p>We now have everything prepared to</p> <ul> <li>import an existing account into the testnet</li> <li>redeem funds to register a witness in the testnet</li> </ul> <p>and we will now continue with the following steps:</p> <ul> <li>create a wallet for the testnet</li> <li>import an account and funds</li> <li>upgrade our account to a lifetime member</li> <li>register a new witness</li> <li>upvote the witness with our funds</li> <li>sign blocks</li> </ul> <p>From this point on, we will no longer require interaction with BitShares 0.9.</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#download-the-genesis-block-only-for-testnet","title":"Download the genesis block (only for testnet)","text":"<p>For the testnet we need to download the proper genesis block. Eventually, the genesis block will be part of the client so that this step will not be required for the real network later. The genesis block can be downloaded (here)[https://drive.google.com/open?id=0B_GVo0GoC_v_S3lPOWlUbFJFWTQ].</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#run-the-witness-as-a-node-in-the-network","title":"Run the witness as a node in the network","text":"<p>We first run the witness node without block production and connect it to the P2P network with the following command:</p> <pre><code>$ programs/witness_node/witness_node -s 104.200.28.117:61705 --rpc-endpoint 127.0.0.1:8090 --genesis-json aug-14-test-genesis.json\n</code></pre> <p>The address <code>104.200.28.117</code> is one of the public seed nodes.</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#creating-a-wallet","title":"Creating a wallet","text":"<p>We now open up the cli_wallet and connect to our plain and stupid witness node:</p> <pre><code>$ programs/cli_wallet/cli_wallet -s ws://127.0.0.1:8090\n</code></pre> <p>First thing to do is setting up a password for the newly created wallet prior to importing any private keys:</p> <pre><code>new &gt;&gt;&gt; set_password &lt;password&gt;\nnull\nlocked &gt;&gt;&gt; unlock &lt;password&gt;\nnull\nunlocked &gt;&gt;&gt;\n</code></pre> <p>Wallet creation is now done.</p>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#basic-account-management","title":"Basic Account Management","text":"<p>We can import the account name (owner key) and the balance containing keys into BitShares 2.0:</p> <pre><code>unlocked &gt;&gt;&gt; import_key &lt;accountname&gt; &lt;owner wif key&gt;\ntrue\nunlocked &gt;&gt;&gt; import_balance &lt;accountname&gt; [&lt;balance wif key&gt;] true\n[a transaction in json format]\nunlocked &gt;&gt;&gt; list_my_accounts\n[{\n\"id\": \"1.2.15\",\n...\n\"name\": &lt;accountname&gt;,\n...\n]\nunlocked &gt;&gt;&gt; list_account_balances &lt;accountname&gt;\nXXXXXXX BTS\n</code></pre> <p>Note: Make sure to put the []-brackets around the private key, since the import method takes an array of keys.  </p> <p>In case your account's owner key is different from its active key, make sure you import it into BitShares 2.0 as well.</p> <p>Since only lifetime members can become witnesses, you must first upgrade to a lifetime member. This step costs the lifetime-upgrade fee which will eventually cost about $100</p> <pre><code>unlocked &gt;&gt;&gt; upgrade_account &lt;accountname&gt; true\n[a transaction in json format]\n</code></pre>"},{"location":"docs/witnesses/How-To-become-an-active-witness-in-BitShares-2.0/#becoming-a-witness","title":"Becoming a Witness","text":"<p>To become a witness and be able to produce blocks, you first need to create a witness object that can be voted in.</p> <p>Note: If you want to experiment with things that require voting, be aware that votes are only tallied once per day at the maintenance interval. <code>get_dynamic_global_properties</code> tells us when that will be in <code>next_maintenance_time</code>. Once the next maintenance interval passes, run <code>get_global_properties</code> again and you should see that your new witness has been voted in.  </p> <p>Before we get started, we can see the current list of witnesses voted in, which will simply be the ten default witnesses:</p> <pre><code>unlocked &gt;&gt;&gt; get_global_properties\n...\n  \"active_witnesses\": [\n\"1.6.0\",\n\"1.6.1\",\n\"1.6.2\",\n\"1.6.3\",\n\"1.6.4\",\n\"1.6.5\",\n\"1.6.6\",\n\"1.6.7\",\n\"1.6.8\",\n\"1.6.9\"\n  ],\n...\n\nunlocked &gt;&gt;&gt; create_witness &lt;accountname&gt; \"url-to-proposal\" true\n{\n  \"ref_block_num\": 139,\n  \"ref_block_prefix\": 3692461913,\n  \"relative_expiration\": 3,\n  \"operations\": [[\n  21,{\n    \"fee\": {\n      \"amount\": 0,\n      \"asset_id\": \"1.3.0\"\n    },\n    \"witness_account\": \"1.2.16\",\n    \"url\": \"url-to-proposal\",\n    \"block_signing_key\": \"PUBLIC KEY\",\n    \"initial_secret\": \"00000000000000000000000000000000000000000000000000000000\"\n  }\n]\n  ],\n  \"signatures\": [\n  \"1f2ad5597af2ac4bf7a50f1eef2db49c9c0f7616718776624c2c09a2dd72a0c53a26e8c2bc928f783624c4632924330fc03f08345c8f40b9790efa2e4157184a37\"\n  ]\n}\n</code></pre> <p>Our witness is registered, but it can't produce blocks because nobody has voted it in.  You can see the current list of active witnesses with <code>get_global_properties</code>:</p> <pre><code>unlocked &gt;&gt;&gt; get_global_properties\n{\n  \"active_witnesses\": [\n\"1.6.0\",\n\"1.6.1\",\n\"1.6.2\",\n\"1.6.3\",\n\"1.6.4\",\n\"1.6.5\",\n\"1.6.7\",\n\"1.6.8\",\n\"1.6.9\"\n  ],\n  ...\n</code></pre> <p>Now, we should vote our witness in.  Vote all of the shares in both <code>&lt;accountname&gt;</code> and <code>nathan</code> in favor of your new witness.</p> <pre><code>unlocked &gt;&gt;&gt; vote_for_witness &lt;accountname&gt; &lt;accountname&gt; true true\n[a transaction in json format]\n</code></pre> <p>Now we wait until the next maintenance interval.</p> <p>Get the witness object using <code>get_witness</code> and take note of two things. The <code>id</code> is displayed in <code>get_global_properties</code> when the witness is voted in, and we will need it on the <code>witness_node</code> command line to produce blocks.  We'll also need the public <code>signing_key</code> so we can look up the correspoinding private key.</p> <p>Once we have that, run <code>dump_private_keys</code> which lists the public-key  private-key pairs to find the private key.</p> <p>Warning: <code>dump_private_keys</code> will display your keys unencrypted on the terminal, don't do this with someone looking over your shoulder.</p> <pre><code>unlocked &gt;&gt;&gt; get_witness &lt;accountname&gt;\n{\n  [...]\n  \"id\": \"1.6.10\",\n  \"signing_key\": \"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\",\n  [...]\n}\n</code></pre> <p>The <code>id</code> and the <code>signing_key</code> are the two important parameters, here. Let's get the private key for that signing key with:</p> <pre><code>unlocked &gt;&gt;&gt; dump_private_keys\n[[\n  ...\n  ],[\n\"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\",\n\"5JGi7DM7J8fSTizZ4D9roNgd8dUc5pirUe9taxYCUUsnvQ4zCaQ\"\n  ]\n]\n</code></pre> <p>Now we need to start the witness, so shut down the wallet (ctrl-d),  and shut down the witness (ctrl-c).  Re-launch the witness, now mentioning the new witness 1.6.10 and its keypair:</p> <pre><code>./witness_node --rpc-endpoint=127.0.0.1:8090 --witness-id '\"1.6.10\"' --private-key '[\"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\", \"5JGi7DM7J8fSTizZ4D9roNgd8dUc5pirUe9taxYCUUsnvQ4zCaQ\"]' --genesis-json aug-14-test-genesis.json -s 104.200.28.117:61705\n</code></pre> <p>Alternatively, you can also add this line into yout config.ini:</p> <pre><code>witness-id = \"1.6.10\"\nprivate-key = [\"GPH7vQ7GmRSJfDHxKdBmWMeDMFENpmHWKn99J457BNApiX1T5TNM8\",\"5JGi7DM7J8fSTizZ4D9roNgd8dUc5pirUe9taxYCUUsnvQ4zCaQ\"]\n</code></pre> <p>Note: Make sure to use YOUR public/private keys instead of the once given above!</p> <p>If you monitor the output of the <code>witness_node</code>, you should see it generate  blocks signed by your witness:</p> <pre><code>Witness 1.6.10 production slot has arrived; generating a block now...\nGenerated block #367 with timestamp 2015-07-05T20:46:30 at time 2015-07-05T20:46:30\n</code></pre>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/","title":"How to setup your witness for test net (Ubuntu 14.04 LTS 64 bit)","text":"<p>The following instructions covers the setup of a witness in Ubuntu 14.04 LTS (64-bit). The instructions are specific for the Test 5 release, but should be easily ported to other releases.</p> <p>You can get latest version with chain id, genesis, and github tag here https://github.com/cryptonomex/graphene/releases</p> <p>Note: Nodes might gone down as everyone is testing.</p>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/#installation-of-dependencies","title":"Installation of dependencies","text":"<p>Extracted from instructions here: https://github.com/cryptonomex/graphene/wiki/build-ubuntu, but limited only for witness / cli build.</p> <p>If you already have done your installation move to next step</p> <pre><code>sudo apt-get update\n</code></pre> <p>Installation of development tools</p> <pre><code>sudo apt-get install gcc-4.9 g++-4.9 cmake make libbz2-dev libdb++-dev libdb-dev libssl-dev openssl libreadline-dev autoconf libtool git\n</code></pre> <p>If you cannot install gcc-4.9, you will need to add this repository before hand and try again.</p> <pre><code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n</code></pre>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/#installation-of-boost","title":"Installation of BOOST","text":"<pre><code>BOOST_ROOT=$HOME/opt/boost_1_57_0\nsudo apt-get update\nsudo apt-get install autotools-dev build-essential g++ libbz2-dev libicu-dev python-dev\nwget -c 'http://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.bz2/download' -O boost_1_57_0.tar.bz2\n[ $( sha256sum boost_1_57_0.tar.bz2 | cut -d ' ' -f 1 ) == \"910c8c022a33ccec7f088bd65d4f14b466588dda94ba2124e78b8c57db264967\" ] || ( echo 'Corrupt download' ; exit 1 )\ntar xjf boost_1_57_0.tar.bz2\ncd boost_1_57_0/\n./bootstrap.sh \"--prefix=$BOOST_ROOT\"\n./b2 install\n</code></pre>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/#git-checkout-and-build","title":"Git  checkout and build","text":"<p>Ensure your boost path is correct</p> <pre><code>BOOST_ROOT=$HOME/opt/boost_1_57_0\n</code></pre> <p>Check out and build</p> <pre><code>cd ~\ngit clone https://github.com/cryptonomex/graphene.git\ncd graphene\n</code></pre> <p>Check out test 5 (specific to this chain) / or don't do anything to get latest</p> <pre><code>git checkout test5\n</code></pre> <p>Update submodules and build make file</p> <pre><code>git submodule update --init --recursive\ncmake -DBOOST_ROOT=\"$BOOST_ROOT\" -DCMAKE_BUILD_TYPE=Debug .\nmake\n</code></pre>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/#setup-witness-import-balances","title":"Setup witness / import balances","text":"<p>Navigate to the witness directory</p> <pre><code>cd ~/graphene/programs/witness_node\n</code></pre> <p>Download genesis Path specific for Test 5</p> <pre><code> wget https://github.com/cryptonomex/graphene/releases/download/test5/oct-02-testnet-genesis.json.zip\n unzip oct-02-testnet-genesis.json.zip\n</code></pre> <p>Start a new terminal screen</p> <pre><code> screen\n</code></pre> <p>Run the witness Current nodes for test 5 (replace for other tests)</p> <pre><code>./witness_node --rpc-endpoint \"127.0.0.1:8090\"  --genesis-json oct-02-testnet-genesis.json -d test_net_5 -s  \"104.236.51.238:2001\"\n</code></pre> <p>Note:  -d parameter is for the directory you want the witness data to be stored -s is the node you want to connect</p> <p>If you have problems, you might need to put the whole path for the genesis</p> <pre><code>./witness_node --rpc-endpoint \"127.0.0.1:8090\"  --genesis-json ~/graphene/programs/witness-node/oct-02-testnet-genesis.json -d test_net_5 -s \"104.236.51.238:2001\"\n</code></pre> <p>Detach from screen</p> <pre><code> Ctrl A Ctrl D\n</code></pre> <p>Extract your wif keys for user and balances as per xeroc's instructions</p> <p>How-to-become-an-active-witness-in-BitShares-2.0</p> <p>Navigate to cli_wallet</p> <pre><code>cd ~/graphene/programs/cli_wallet\n</code></pre> <p>Run cli Current chain id for test 5</p> <pre><code> ./cli_wallet -w test_wallet  --chain-id c746b258deb5e476601488d8dbb98cf6dcacc2dec857fda58514907257d461c3\n</code></pre> <p>Note: -w is your directory wallet</p> <p>Setup witness as per xerocs instructions </p> <p>Howto-become-an-active-witness-in-BitShares-2.0</p> <p>Remember to copy your keys, witness id Note you need to wait for a maintenance period to be voted in</p> <p>Exit</p> <p>Go back to your witness screen</p> <p>screen -r </p> <p>Exit your witness</p> <pre><code>ctrl c\n</code></pre> <p>Restart with parameters to start block producing (block producing needs your witness id and private keys) Current nodes for test 5 (replace for other tests)</p> <pre><code>./witness_node --rpc-endpoint \"127.0.0.1:8090\"  --genesis-json oct-02-testnet-genesis.json -d test_net_5 -s  \"104.236.51.238:2001\"  --witness-id '\"1.6.5156\"' --private-key '[\"GPH6JhL..your.signing.key..bc5mWyCvERV3coy\",\"5K..your.secret..a\"]'\n</code></pre> <p>See your witness producing blocks and  you can Ctrl A Ctrl D to detach from screen.</p>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/#tips","title":"Tips","text":"<p>If you end up in a fork, or your blockchain gets corrupted it takes a long time to replay blockchain.</p> <p>When I am synced, I shutdown with C-c (it should shutdown in a clean way) and I copy the blockchain folder as       backup (if it shutdown without errors). Everytime my blockchain is corrupted, I remove the blockchain folder and I copy with the backup one and restart    the witness. Finally I backup the blockchain folder every day.</p> <p>spartako</p>"},{"location":"docs/witnesses/How-to-setup-your-witness-for-test-net-%28Ubuntu-14.04-LTS-64-bit%29/#credits","title":"Credits","text":"<p>xeroc, puppies, abit, clayop, betax, maqifrnswa, lafona, IHashfury, Riverhead, testz,  cryptosile, Thom, spartako</p>"},{"location":"docs/witnesses/witness-rng/","title":"Witness rng","text":""},{"location":"docs/witnesses/witness-rng/#witness-scheduler-rng","title":"Witness scheduler RNG","text":"<p>The witness scheduler RNG is a random number generator which uses the blockchain random number generator state as its seed.</p> <p>The witness scheduler RNG creates an infinite stream of random bytes by computing <code>sha256( sha256( seed ) + little_endian_64bit(i) )</code>, increasing <code>i</code> from 0 to 1 to 2, etc.  The RNG only runs during a scheduling block, and <code>i</code> starts from <code>0</code> in each scheduling block (relying on different seeds to produce different results).</p> <p>This infinite stream of random bytes is equivalent to an infinite stream of random bits in little bit-endian order.  Given a bound <code>B</code>, the bitstream can be used to produce a random number uniformly distributed in the range <code>[0, B)</code> using a sample-and-reject algorithm:</p> <ul> <li>Let <code>n</code> be the smallest integer such that <code>2^n &gt;= B</code>.</li> <li>Let <code>x</code> be the next <code>n</code> bits from the bitstream, interpreted as an integer in little bit-endian order.</li> <li>If <code>x &lt;= B</code>, return <code>x</code>.  Otherwise, throw <code>x</code> away and repeat.</li> </ul> <p>The worst-case running time is unbounded, but each iteration has a termination probability greater than one half.  Thus the average-case running time is <code>2</code> iterations, and a running time of more than <code>N</code> iterations will occur (on average) at most once every <code>2^N</code> RNG queries (assuming a worst-case choice of e.g. <code>B = 2^63+1</code> for all queries).  Since each RNG query schedules a witness, the query rate is (over the long term) equal to the block production rate (although in practice many queries are all performed at once in scheduling blocks).  So while it is, in theory, possible for the algorithm to require more than 1000 iterations, in practice this will occur on average only once every <code>2^1000</code> blocks (again assuming all queries have worst-case <code>B</code>).</p> <p>The sample-and-reject algorithm is totally unbiased; every <code>x</code> value has equal probability.</p>"},{"location":"docs/witnesses/witness-scheduler/","title":"Witness scheduler","text":""},{"location":"docs/witnesses/witness-scheduler/#turntoken-witness-scheduling-algorithm","title":"Turn/Token witness scheduling algorithm","text":"<p>The algorithm which determines the order of witnesses is referred to as the witness scheduling algorithm.</p> <p>This was designed by a community bounty in thread https://bitsharestalk.org/index.php/topic,15547.0 however, Graphene has an additional requirement which is not taken into account by the solutions in the thread:</p> <p>The membership and length of the list of witnesses may change over time.</p> <p>So in this article I'll describe my solution.</p>"},{"location":"docs/witnesses/witness-scheduler/#turns-and-tokens","title":"Turns and tokens","text":"<p>The solution is based on terms of turns and tokens.</p> <ul> <li>Newly inserted witnesses start out with a turn and a token.</li> <li>In order for a witness to be scheduled, it must have a turn and a token.</li> <li>The scheduler maintains a FIFO of witnesses without tokens.</li> <li>If no witness has a turn, then the scheduler gives a turn to all witnesses.  This is called \"emitting a turn.\"</li> <li>While less than half of the witnesses have tokens, give a token to the first witness in the FIFO and remove it from the FIFO.</li> <li>Schedule a witness by picking randomly from all witnesses with both a turn and token.</li> <li>When a witness is scheduled, it loses its turn and token.</li> </ul>"},{"location":"docs/witnesses/witness-scheduler/#the-generic-scheduler","title":"The generic scheduler","text":"<p>The generic scheduler implements turns and tokens.  It only depends on the C++11 stdlib and boost (not even using fc).  Types provided by Graphene are template parameters.</p>"},{"location":"docs/witnesses/witness-scheduler/#the-generic-far-future-scheduler","title":"The generic far future scheduler","text":"<p>The far future scheduler is implemented with the following rules:</p> <ul> <li>Run until you emit a turn.</li> <li>Record all witnesses produced.</li> <li>Run until you emit a second turn.</li> <li>The witnesses produced between the emission of the first turn (exclusive) and emission of the second turn (inclusive) are called the far future schedule.</li> </ul> <p>Then the schedule for the rest of time is determined by repeating the future schedule indefinitely.  The far future scheduler is required to give the scheduling algorithm bounded runtime and memory usage even in chains involving very long gaps.</p>"},{"location":"docs/witnesses/witness-scheduler/#slots","title":"Slots","text":"<p>Due to dynamic block interval, we must carefully keep in mind the difference between schedule slots and timestamps.  A schedule slot number is a positive integer.  A slot number of <code>n</code> represents the <code>n</code>th next block-interval-aligned timestamp after the head block.</p> <p>Note that the mapping between slot numbers and timestamps will change if the block interval changes.</p>"},{"location":"docs/witnesses/witness-scheduler/#scheduling-blocks","title":"Scheduling blocks","text":"<p>When each block is produced, the blockchain must determine whether the scheduler needs to be run.  If fewer than <code>num_witnesses</code> are scheduled, the scheduler will run until <code>2*num_witnesses</code> are scheduled. A block in which the scheduler runs is called a scheduling block.</p> <p>Changes in the set of active witnesses do not modify the existing schedule.  Rather, they will be incorporated into new schedule entries when the scheduler runs in the next scheduling block.  Thus, a witness that has lost an election may still produce 1-2 blocks.  Such a witness is called a lame duck.</p>"},{"location":"docs/witnesses/witness-scheduler/#near-vs-far-schedule","title":"Near vs. far schedule","text":"<p>From a particular chain state, it must be possible to specify a mapping from slots to witnesses, called the total witness schedule. The total witness schedule is partitioned into a prefix, called the near schedule; the remainder is the far schedule.</p> <p>When a block occurs, <code>n</code> entries are drained (removed) from the head of the total schedule, where <code>n</code> is the slot number of the new block according to its parent block.</p> <p>If the block is a scheduling block, the total schedule is further transformed.  The new near schedule contains <code>2*num_witnesses</code> entries, with the previous near schedule as a prefix.  The rest of the near schedule is determined by the current blockchain RNG.</p> <p>The new far schedule is determined by running the far future scheduler, as described above.  The far future scheduler also obtains entropy from the current blockchain RNG.</p> <p>As an optimization, the implementation does not run the far future scheduler until a far-future slot is actually queried.  With this optimization, the only circumstance under which validating nodes must run the far future scheduler is when a block gap longer than <code>num_witnesses</code> occurs (an extremely rare condition).</p>"},{"location":"docs/witnesses/witness-scheduler/#minimizing-impact-of-selective-dropout","title":"Minimizing impact of selective dropout","text":"<p>The ability of any single malicious witness to affect the results of the shuffle algorithm is limited because the RNG is based on bit commitment of the witnesses.  However, a malicious witness is able to refuse to produce a block.  A run of <code>m</code> consecutively scheduled malicious witnesses can independently make <code>m</code> independent choices of whether to refuse to produce a block.  Basically they are able to control <code>m</code> bits of entropy in the shuffle algorithm's output.</p> <p>It is difficult-to-impossible to entirely eliminate \"the last person being evil\" problem in trustless distributed RNG's.  But we can at least mitigate this vector by rate-limiting changes to the total witness schedule to a very slow rate.</p> <p>If every block schedules a witness, our adversary with <code>m</code> malicious witnesses gets <code>m</code> chances per round to selectively drop out in order to manipulate the shuffle order, allowing <code>m</code> attacks per round. If witnesses are only scheduled once per round, a selective dropout requires the malicious witness to produce the scheduling block, limiting the probability to <code>m/n</code> attacks per round.</p>"}]}